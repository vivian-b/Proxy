
/Users/vivian/Documents/ProxyU/target/2.2.0/argon/ProxyU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006d40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dad60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001f8  2003e1d0  000dad64  0001e1d0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000042c  2003e3c8  2003e3c8  0002e3c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000daf5c  000daf5c  0002af5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000daf84  000daf84  0002af84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00181393  00000000  00000000  0002af88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000196d1  00000000  00000000  001ac31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030218  00000000  00000000  001c59ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c30  00000000  00000000  001f5c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008098  00000000  00000000  001f8834  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a743  00000000  00000000  002008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003ebd0  00000000  00000000  0023b00f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001120db  00000000  00000000  00279bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000081dc  00000000  00000000  0038bcbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fb42 	bl	d86ba <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fb64 	bl	d870a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1d0 	.word	0x2003e1d0
   d404c:	000dad64 	.word	0x000dad64
   d4050:	2003e3c8 	.word	0x2003e3c8
   d4054:	2003e3c8 	.word	0x2003e3c8
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fd31 	bl	d7ac8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dad34 	.word	0x000dad34
   d4080:	000dad60 	.word	0x000dad60

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b896 	b.w	d41b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9ed 	bl	d4468 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bcd1 	b.w	d7a38 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bb1b 	b.w	d56d0 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bb19 	b.w	d56d0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bb1f 	b.w	d56e0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fa34 	bl	d5518 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5279 	.word	0x000d5279

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40d4:	b513      	push	{r0, r1, r4, lr}
   d40d6:	4b05      	ldr	r3, [pc, #20]	; (d40ec <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40d8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40da:	f88d 3000 	strb.w	r3, [sp]
   d40de:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40e0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e2:	f001 fca1 	bl	d5a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40e6:	4620      	mov	r0, r4
   d40e8:	b002      	add	sp, #8
   d40ea:	bd10      	pop	{r4, pc}
   d40ec:	2003e3c8 	.word	0x2003e3c8

000d40f0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
    return publish(name, data, ttl, PUBLIC);
}

inline bool CloudClass::subscribe(const char* name, EventHandler handler) {
   d40f0:	b507      	push	{r0, r1, r2, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d40f2:	2200      	movs	r2, #0
   d40f4:	e9cd 2200 	strd	r2, r2, [sp]
   d40f8:	2301      	movs	r3, #1
   d40fa:	f001 fa79 	bl	d55f0 <spark_subscribe>
    return subscribe(name, handler, ALL_DEVICES);
}
   d40fe:	b003      	add	sp, #12
   d4100:	f85d fb04 	ldr.w	pc, [sp], #4

000d4104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4104:	4b0a      	ldr	r3, [pc, #40]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4106:	b510      	push	{r4, lr}
   d4108:	4604      	mov	r4, r0
   d410a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d410c:	f002 fa16 	bl	d653c <_ZN5spark10LogManager8instanceEv>
   d4110:	4621      	mov	r1, r4
   d4112:	f002 fc14 	bl	d693e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4116:	f003 fbb7 	bl	d7888 <_Z16_fetch_usbserialv>
   d411a:	f003 fba9 	bl	d7870 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d411e:	4620      	mov	r0, r4
   d4120:	4b04      	ldr	r3, [pc, #16]	; (d4134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4122:	f840 3b04 	str.w	r3, [r0], #4
   d4126:	f002 faf7 	bl	d6718 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d412a:	4620      	mov	r0, r4
   d412c:	bd10      	pop	{r4, pc}
   d412e:	bf00      	nop
   d4130:	000da774 	.word	0x000da774
   d4134:	000da75c 	.word	0x000da75c

000d4138 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
    }
   d413c:	f7ff ffe2 	bl	d4104 <_ZN5spark16SerialLogHandlerD1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	2124      	movs	r1, #36	; 0x24
   d4144:	f003 fdc2 	bl	d7ccc <_ZdlPvj>
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d414c:	b40e      	push	{r1, r2, r3}
   d414e:	b503      	push	{r0, r1, lr}
   d4150:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d4152:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4154:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4158:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d415a:	f003 f974 	bl	d7446 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d415e:	b002      	add	sp, #8
   d4160:	f85d eb04 	ldr.w	lr, [sp], #4
   d4164:	b003      	add	sp, #12
   d4166:	4770      	bx	lr

000d4168 <_Z16locationCallbackfff>:
// gives three values about location
// Latitude: The latitude of the device's location
// Longitude: The longitude of the device's location
// Circle of Uncertainty: The radius in meters that represents the uncertainty range of the reported location
void locationCallback(float lat1, float lon1, float accuracy)
{
   d4168:	b5f0      	push	{r4, r5, r6, r7, lr}
   d416a:	b087      	sub	sp, #28
   d416c:	ee10 7a10 	vmov	r7, s0
   d4170:	ee10 5a90 	vmov	r5, s1
   d4174:	ee11 6a10 	vmov	r6, s2
    Serial.printlnf("Lat: %f Lon: %f Acc (m): %f", lat1, lon1, accuracy);  // writes the coordinates in the serial monitor
   d4178:	f003 fb86 	bl	d7888 <_Z16_fetch_usbserialv>
   d417c:	4604      	mov	r4, r0
   d417e:	4638      	mov	r0, r7
   d4180:	f003 ff12 	bl	d7fa8 <__aeabi_f2d>
   d4184:	4602      	mov	r2, r0
   d4186:	460b      	mov	r3, r1
   d4188:	4630      	mov	r0, r6
   d418a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d418e:	f003 ff0b 	bl	d7fa8 <__aeabi_f2d>
   d4192:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4196:	4628      	mov	r0, r5
   d4198:	f003 ff06 	bl	d7fa8 <__aeabi_f2d>
   d419c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d41a0:	e9cd 0100 	strd	r0, r1, [sp]
   d41a4:	4902      	ldr	r1, [pc, #8]	; (d41b0 <_Z16locationCallbackfff+0x48>)
   d41a6:	4620      	mov	r0, r4
   d41a8:	f7ff ffd0 	bl	d414c <_ZN5Print8printlnfEPKcz>
}
   d41ac:	b007      	add	sp, #28
   d41ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d41b0:	000da6d0 	.word	0x000da6d0

000d41b4 <setup>:
int lastTiltState = 0;     
int tiltState  = 0;

// set up the pins & subscriptions
void setup() 
{
   d41b4:	b508      	push	{r3, lr}
Serial.begin(9600);
   d41b6:	f003 fb67 	bl	d7888 <_Z16_fetch_usbserialv>
   d41ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41be:	f003 fb53 	bl	d7868 <_ZN9USBSerial5beginEl>
pixels.begin(); 
   d41c2:	4814      	ldr	r0, [pc, #80]	; (d4214 <setup+0x60>)
   d41c4:	f000 fdfd 	bl	d4dc2 <_ZN17Adafruit_NeoPixel5beginEv>

pinMode(photoSens, INPUT);
   d41c8:	4b13      	ldr	r3, [pc, #76]	; (d4218 <setup+0x64>)
   d41ca:	2100      	movs	r1, #0
   d41cc:	8818      	ldrh	r0, [r3, #0]
   d41ce:	f003 fceb 	bl	d7ba8 <pinMode>
pinMode(buzzSens, OUTPUT);
   d41d2:	4b12      	ldr	r3, [pc, #72]	; (d421c <setup+0x68>)
   d41d4:	2101      	movs	r1, #1
   d41d6:	8818      	ldrh	r0, [r3, #0]
   d41d8:	f003 fce6 	bl	d7ba8 <pinMode>
pinMode(tiltSens, INPUT_PULLUP);
   d41dc:	4b10      	ldr	r3, [pc, #64]	; (d4220 <setup+0x6c>)
   d41de:	2102      	movs	r1, #2
   d41e0:	8818      	ldrh	r0, [r3, #0]
   d41e2:	f003 fce1 	bl	d7ba8 <pinMode>
void alphaHandler1(const char *event, const char *data); 
void alphaHandler2(const char *event, const char *data); 
void alphaHandler3(const char *event, const char *data); 
void alphaHandler4(const char *event, const char *data); 

Particle.subscribe("betaOnline", alphaHandler1);
   d41e6:	490f      	ldr	r1, [pc, #60]	; (d4224 <setup+0x70>)
   d41e8:	480f      	ldr	r0, [pc, #60]	; (d4228 <setup+0x74>)
   d41ea:	f7ff ff81 	bl	d40f0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>
Particle.subscribe("betaColor", alphaHandler2);
   d41ee:	490f      	ldr	r1, [pc, #60]	; (d422c <setup+0x78>)
   d41f0:	480f      	ldr	r0, [pc, #60]	; (d4230 <setup+0x7c>)
   d41f2:	f7ff ff7d 	bl	d40f0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>
Particle.subscribe("betaLight", alphaHandler3);
   d41f6:	490f      	ldr	r1, [pc, #60]	; (d4234 <setup+0x80>)
   d41f8:	480f      	ldr	r0, [pc, #60]	; (d4238 <setup+0x84>)
   d41fa:	f7ff ff79 	bl	d40f0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>
Particle.subscribe("betaLocate", alphaHandler4);
   d41fe:	490f      	ldr	r1, [pc, #60]	; (d423c <setup+0x88>)
   d4200:	480f      	ldr	r0, [pc, #60]	; (d4240 <setup+0x8c>)
   d4202:	f7ff ff75 	bl	d40f0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>

locator.withSubscribe(locationCallback);
} 
   d4206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
locator.withSubscribe(locationCallback);
   d420a:	490e      	ldr	r1, [pc, #56]	; (d4244 <setup+0x90>)
   d420c:	480e      	ldr	r0, [pc, #56]	; (d4248 <setup+0x94>)
   d420e:	f000 bd65 	b.w	d4cdc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
   d4212:	bf00      	nop
   d4214:	2003e44c 	.word	0x2003e44c
   d4218:	2003e1d4 	.word	0x2003e1d4
   d421c:	2003e1d0 	.word	0x2003e1d0
   d4220:	2003e1e0 	.word	0x2003e1e0
   d4224:	000d4745 	.word	0x000d4745
   d4228:	000da6ec 	.word	0x000da6ec
   d422c:	000d424d 	.word	0x000d424d
   d4230:	000da6f7 	.word	0x000da6f7
   d4234:	000d4335 	.word	0x000d4335
   d4238:	000da701 	.word	0x000da701
   d423c:	000d43ed 	.word	0x000d43ed
   d4240:	000da70b 	.word	0x000da70b
   d4244:	000d4169 	.word	0x000d4169
   d4248:	2003e3e4 	.word	0x2003e3e4

000d424c <_Z13alphaHandler2PKcS0_>:
}

// Particle.subscribe("betaColor", alphaHandler2);
// updates the color selected from the tilt action from the other party
void alphaHandler2(const char *event, const char *data)
{
   d424c:	b538      	push	{r3, r4, r5, lr}
   d424e:	460c      	mov	r4, r1
  if (strcmp(data, "0") == 0)
   d4250:	4620      	mov	r0, r4
   d4252:	4931      	ldr	r1, [pc, #196]	; (d4318 <_Z13alphaHandler2PKcS0_+0xcc>)
   d4254:	f004 fa9d 	bl	d8792 <strcmp>
   d4258:	4605      	mov	r5, r0
   d425a:	b968      	cbnz	r0, d4278 <_Z13alphaHandler2PKcS0_+0x2c>
{
  pixels.setPixelColor(5, pixels.Color(5,0,0,0)); 
   d425c:	4603      	mov	r3, r0
   d425e:	4602      	mov	r2, r0
   d4260:	4601      	mov	r1, r0
   d4262:	2005      	movs	r0, #5
   d4264:	f000 ffd0 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4268:	2105      	movs	r1, #5
   d426a:	4602      	mov	r2, r0
   d426c:	482b      	ldr	r0, [pc, #172]	; (d431c <_Z13alphaHandler2PKcS0_+0xd0>)
   d426e:	f000 ff87 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 0;
   d4272:	4b2b      	ldr	r3, [pc, #172]	; (d4320 <_Z13alphaHandler2PKcS0_+0xd4>)
   d4274:	601d      	str	r5, [r3, #0]
//   {
//   pixels.setPixelColor(5, pixels.Color(0,5,5,0)); 
// colorModeBeta = 5;

//   }  
}
   d4276:	bd38      	pop	{r3, r4, r5, pc}
  } else if (strcmp(data, "1") == 0)
   d4278:	492a      	ldr	r1, [pc, #168]	; (d4324 <_Z13alphaHandler2PKcS0_+0xd8>)
   d427a:	4620      	mov	r0, r4
   d427c:	f004 fa89 	bl	d8792 <strcmp>
   d4280:	4603      	mov	r3, r0
   d4282:	b960      	cbnz	r0, d429e <_Z13alphaHandler2PKcS0_+0x52>
  pixels.setPixelColor(5, pixels.Color(0,5,0,0)); 
   d4284:	4602      	mov	r2, r0
   d4286:	2105      	movs	r1, #5
   d4288:	f000 ffbe 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d428c:	2105      	movs	r1, #5
   d428e:	4602      	mov	r2, r0
   d4290:	4822      	ldr	r0, [pc, #136]	; (d431c <_Z13alphaHandler2PKcS0_+0xd0>)
   d4292:	f000 ff75 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 1;
   d4296:	4b22      	ldr	r3, [pc, #136]	; (d4320 <_Z13alphaHandler2PKcS0_+0xd4>)
   d4298:	2201      	movs	r2, #1
   d429a:	601a      	str	r2, [r3, #0]
   d429c:	e7eb      	b.n	d4276 <_Z13alphaHandler2PKcS0_+0x2a>
  } else if (strcmp(data, "2") == 0)
   d429e:	4922      	ldr	r1, [pc, #136]	; (d4328 <_Z13alphaHandler2PKcS0_+0xdc>)
   d42a0:	4620      	mov	r0, r4
   d42a2:	f004 fa76 	bl	d8792 <strcmp>
   d42a6:	4603      	mov	r3, r0
   d42a8:	b960      	cbnz	r0, d42c4 <_Z13alphaHandler2PKcS0_+0x78>
  pixels.setPixelColor(5, pixels.Color(0,0,5,0)); 
   d42aa:	2205      	movs	r2, #5
   d42ac:	4601      	mov	r1, r0
   d42ae:	f000 ffab 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d42b2:	2105      	movs	r1, #5
   d42b4:	4602      	mov	r2, r0
   d42b6:	4819      	ldr	r0, [pc, #100]	; (d431c <_Z13alphaHandler2PKcS0_+0xd0>)
   d42b8:	f000 ff62 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 2;
   d42bc:	4b18      	ldr	r3, [pc, #96]	; (d4320 <_Z13alphaHandler2PKcS0_+0xd4>)
   d42be:	2202      	movs	r2, #2
   d42c0:	601a      	str	r2, [r3, #0]
   d42c2:	e7d8      	b.n	d4276 <_Z13alphaHandler2PKcS0_+0x2a>
  } else if (strcmp(data, "3") == 0)
   d42c4:	4919      	ldr	r1, [pc, #100]	; (d432c <_Z13alphaHandler2PKcS0_+0xe0>)
   d42c6:	4620      	mov	r0, r4
   d42c8:	f004 fa63 	bl	d8792 <strcmp>
   d42cc:	4603      	mov	r3, r0
   d42ce:	b968      	cbnz	r0, d42ec <_Z13alphaHandler2PKcS0_+0xa0>
  pixels.setPixelColor(5, pixels.Color(2,0,3,0)); 
   d42d0:	4601      	mov	r1, r0
   d42d2:	2203      	movs	r2, #3
   d42d4:	2002      	movs	r0, #2
   d42d6:	f000 ff97 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d42da:	2105      	movs	r1, #5
   d42dc:	4602      	mov	r2, r0
   d42de:	480f      	ldr	r0, [pc, #60]	; (d431c <_Z13alphaHandler2PKcS0_+0xd0>)
   d42e0:	f000 ff4e 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 3;
   d42e4:	4b0e      	ldr	r3, [pc, #56]	; (d4320 <_Z13alphaHandler2PKcS0_+0xd4>)
   d42e6:	2203      	movs	r2, #3
   d42e8:	601a      	str	r2, [r3, #0]
   d42ea:	e7c4      	b.n	d4276 <_Z13alphaHandler2PKcS0_+0x2a>
  }else if (strcmp(data, "4") == 0)
   d42ec:	4910      	ldr	r1, [pc, #64]	; (d4330 <_Z13alphaHandler2PKcS0_+0xe4>)
   d42ee:	4620      	mov	r0, r4
   d42f0:	f004 fa4f 	bl	d8792 <strcmp>
   d42f4:	4603      	mov	r3, r0
   d42f6:	2800      	cmp	r0, #0
   d42f8:	d1bd      	bne.n	d4276 <_Z13alphaHandler2PKcS0_+0x2a>
  pixels.setPixelColor(5, pixels.Color(2,3,0,0)); 
   d42fa:	4602      	mov	r2, r0
   d42fc:	2103      	movs	r1, #3
   d42fe:	2002      	movs	r0, #2
   d4300:	f000 ff82 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4304:	2105      	movs	r1, #5
   d4306:	4602      	mov	r2, r0
   d4308:	4804      	ldr	r0, [pc, #16]	; (d431c <_Z13alphaHandler2PKcS0_+0xd0>)
   d430a:	f000 ff39 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 4;
   d430e:	4b04      	ldr	r3, [pc, #16]	; (d4320 <_Z13alphaHandler2PKcS0_+0xd4>)
   d4310:	2204      	movs	r2, #4
   d4312:	601a      	str	r2, [r3, #0]
}
   d4314:	e7af      	b.n	d4276 <_Z13alphaHandler2PKcS0_+0x2a>
   d4316:	bf00      	nop
   d4318:	000da716 	.word	0x000da716
   d431c:	2003e44c 	.word	0x2003e44c
   d4320:	2003e3d0 	.word	0x2003e3d0
   d4324:	000da732 	.word	0x000da732
   d4328:	000da73c 	.word	0x000da73c
   d432c:	000da746 	.word	0x000da746
   d4330:	000da718 	.word	0x000da718

000d4334 <_Z13alphaHandler3PKcS0_>:

// Particle.subscribe("betaLight", alphaHandler3);
// photo resistor value
void alphaHandler3(const char *event, const char *data)
{
   d4334:	b538      	push	{r3, r4, r5, lr}

  //sound notification
  tone(buzzSens, 900, 500);
   d4336:	4c27      	ldr	r4, [pc, #156]	; (d43d4 <_Z13alphaHandler3PKcS0_+0xa0>)
   d4338:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d433c:	7820      	ldrb	r0, [r4, #0]
{
   d433e:	460d      	mov	r5, r1
  tone(buzzSens, 900, 500);
   d4340:	f44f 7161 	mov.w	r1, #900	; 0x384
   d4344:	f003 f9a2 	bl	d768c <tone>
  delay(200);
   d4348:	20c8      	movs	r0, #200	; 0xc8
   d434a:	f001 fa01 	bl	d5750 <delay>
  tone(buzzSens, 900, 500);
   d434e:	7820      	ldrb	r0, [r4, #0]
   d4350:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d4354:	f44f 7161 	mov.w	r1, #900	; 0x384
   d4358:	f003 f998 	bl	d768c <tone>

 if (strcmp(data, "0") == 0)
   d435c:	491e      	ldr	r1, [pc, #120]	; (d43d8 <_Z13alphaHandler3PKcS0_+0xa4>)
   d435e:	4628      	mov	r0, r5
   d4360:	f004 fa17 	bl	d8792 <strcmp>
   d4364:	4604      	mov	r4, r0
   d4366:	b968      	cbnz	r0, d4384 <_Z13alphaHandler3PKcS0_+0x50>
{
  pixels.setPixelColor(6, pixels.Color(5,0,0,0)); 
   d4368:	4603      	mov	r3, r0
   d436a:	4602      	mov	r2, r0
   d436c:	4601      	mov	r1, r0
   d436e:	2005      	movs	r0, #5
   d4370:	f000 ff4a 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4374:	2106      	movs	r1, #6
   d4376:	4602      	mov	r2, r0
   d4378:	4818      	ldr	r0, [pc, #96]	; (d43dc <_Z13alphaHandler3PKcS0_+0xa8>)
   d437a:	f000 ff01 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
lightModeBeta = 0;
   d437e:	4b18      	ldr	r3, [pc, #96]	; (d43e0 <_Z13alphaHandler3PKcS0_+0xac>)
   d4380:	601c      	str	r4, [r3, #0]
  } else if (strcmp(data, "2") == 0)
{
  pixels.setPixelColor(6, pixels.Color(0,0,5,0)); 
lightModeBeta = 2;
}
}
   d4382:	bd38      	pop	{r3, r4, r5, pc}
  } else if (strcmp(data, "1") == 0)
   d4384:	4917      	ldr	r1, [pc, #92]	; (d43e4 <_Z13alphaHandler3PKcS0_+0xb0>)
   d4386:	4628      	mov	r0, r5
   d4388:	f004 fa03 	bl	d8792 <strcmp>
   d438c:	4603      	mov	r3, r0
   d438e:	b960      	cbnz	r0, d43aa <_Z13alphaHandler3PKcS0_+0x76>
  pixels.setPixelColor(6, pixels.Color(0,5,0,0)); 
   d4390:	4602      	mov	r2, r0
   d4392:	2105      	movs	r1, #5
   d4394:	f000 ff38 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4398:	2106      	movs	r1, #6
   d439a:	4602      	mov	r2, r0
   d439c:	480f      	ldr	r0, [pc, #60]	; (d43dc <_Z13alphaHandler3PKcS0_+0xa8>)
   d439e:	f000 feef 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
lightModeBeta = 1;
   d43a2:	4b0f      	ldr	r3, [pc, #60]	; (d43e0 <_Z13alphaHandler3PKcS0_+0xac>)
   d43a4:	2201      	movs	r2, #1
   d43a6:	601a      	str	r2, [r3, #0]
   d43a8:	e7eb      	b.n	d4382 <_Z13alphaHandler3PKcS0_+0x4e>
  } else if (strcmp(data, "2") == 0)
   d43aa:	490f      	ldr	r1, [pc, #60]	; (d43e8 <_Z13alphaHandler3PKcS0_+0xb4>)
   d43ac:	4628      	mov	r0, r5
   d43ae:	f004 f9f0 	bl	d8792 <strcmp>
   d43b2:	4603      	mov	r3, r0
   d43b4:	2800      	cmp	r0, #0
   d43b6:	d1e4      	bne.n	d4382 <_Z13alphaHandler3PKcS0_+0x4e>
  pixels.setPixelColor(6, pixels.Color(0,0,5,0)); 
   d43b8:	2205      	movs	r2, #5
   d43ba:	4601      	mov	r1, r0
   d43bc:	f000 ff24 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d43c0:	2106      	movs	r1, #6
   d43c2:	4602      	mov	r2, r0
   d43c4:	4805      	ldr	r0, [pc, #20]	; (d43dc <_Z13alphaHandler3PKcS0_+0xa8>)
   d43c6:	f000 fedb 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
lightModeBeta = 2;
   d43ca:	4b05      	ldr	r3, [pc, #20]	; (d43e0 <_Z13alphaHandler3PKcS0_+0xac>)
   d43cc:	2202      	movs	r2, #2
   d43ce:	601a      	str	r2, [r3, #0]
}
   d43d0:	e7d7      	b.n	d4382 <_Z13alphaHandler3PKcS0_+0x4e>
   d43d2:	bf00      	nop
   d43d4:	2003e1d0 	.word	0x2003e1d0
   d43d8:	000da716 	.word	0x000da716
   d43dc:	2003e44c 	.word	0x2003e44c
   d43e0:	2003e3e0 	.word	0x2003e3e0
   d43e4:	000da732 	.word	0x000da732
   d43e8:	000da73c 	.word	0x000da73c

000d43ec <_Z13alphaHandler4PKcS0_>:

// Particle.subscribe("betaLocate", alphaHandler4);
void alphaHandler4(const char *event, const char *data)
{
   d43ec:	b513      	push	{r0, r1, r4, lr}
   d43ee:	460c      	mov	r4, r1
locator.publishLocation();
   d43f0:	480f      	ldr	r0, [pc, #60]	; (d4430 <_Z13alphaHandler4PKcS0_+0x44>)
   d43f2:	f000 fbe9 	bl	d4bc8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
if (strcmp(data, "far") == 0){
   d43f6:	490f      	ldr	r1, [pc, #60]	; (d4434 <_Z13alphaHandler4PKcS0_+0x48>)
   d43f8:	4620      	mov	r0, r4
   d43fa:	f004 f9ca 	bl	d8792 <strcmp>
   d43fe:	4601      	mov	r1, r0
   d4400:	b968      	cbnz	r0, d441e <_Z13alphaHandler4PKcS0_+0x32>
  pixels.setPixelColor(0, pixels.Color(5,0,5,0)); 
   d4402:	2205      	movs	r2, #5
   d4404:	4603      	mov	r3, r0
   d4406:	9001      	str	r0, [sp, #4]
   d4408:	4610      	mov	r0, r2
   d440a:	f000 fefd 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d440e:	9901      	ldr	r1, [sp, #4]
   d4410:	4602      	mov	r2, r0
} else { //near
  pixels.setPixelColor(0, pixels.Color(0,5,0,0)); 
   d4412:	4809      	ldr	r0, [pc, #36]	; (d4438 <_Z13alphaHandler4PKcS0_+0x4c>)
}

}
   d4414:	b002      	add	sp, #8
   d4416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pixels.setPixelColor(0, pixels.Color(0,5,0,0)); 
   d441a:	f000 beb1 	b.w	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   d441e:	2300      	movs	r3, #0
   d4420:	461a      	mov	r2, r3
   d4422:	2105      	movs	r1, #5
   d4424:	4618      	mov	r0, r3
   d4426:	f000 feef 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d442a:	2100      	movs	r1, #0
   d442c:	4602      	mov	r2, r0
   d442e:	e7f0      	b.n	d4412 <_Z13alphaHandler4PKcS0_+0x26>
   d4430:	2003e3e4 	.word	0x2003e3e4
   d4434:	000da71a 	.word	0x000da71a
   d4438:	2003e44c 	.word	0x2003e44c

000d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d443c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d443e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4440:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4442:	b17c      	cbz	r4, d4464 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4444:	6863      	ldr	r3, [r4, #4]
   d4446:	3b01      	subs	r3, #1
   d4448:	6063      	str	r3, [r4, #4]
   d444a:	b95b      	cbnz	r3, d4464 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d444c:	6823      	ldr	r3, [r4, #0]
   d444e:	4620      	mov	r0, r4
   d4450:	689b      	ldr	r3, [r3, #8]
   d4452:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4454:	68a3      	ldr	r3, [r4, #8]
   d4456:	3b01      	subs	r3, #1
   d4458:	60a3      	str	r3, [r4, #8]
   d445a:	b91b      	cbnz	r3, d4464 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d445c:	6823      	ldr	r3, [r4, #0]
   d445e:	4620      	mov	r0, r4
   d4460:	68db      	ldr	r3, [r3, #12]
   d4462:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4464:	4628      	mov	r0, r5
   d4466:	bd38      	pop	{r3, r4, r5, pc}

000d4468 <loop>:
void loop(){
   d4468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if (millis() - lastPublishMs >= publishPeriod.count())
   d446c:	4ca1      	ldr	r4, [pc, #644]	; (d46f4 <loop+0x28c>)
void loop(){
   d446e:	b086      	sub	sp, #24

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4470:	f000 ff12 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
 if (millis() - lastPublishMs >= publishPeriod.count())
   d4474:	6823      	ldr	r3, [r4, #0]
   d4476:	1ac0      	subs	r0, r0, r3
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
	{ return __r; }
   d4478:	4b9f      	ldr	r3, [pc, #636]	; (d46f8 <loop+0x290>)
   d447a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d447e:	2100      	movs	r1, #0
   d4480:	4290      	cmp	r0, r2
   d4482:	eb71 0303 	sbcs.w	r3, r1, r3
   d4486:	db0d      	blt.n	d44a4 <loop+0x3c>
   d4488:	f000 ff06 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
        lastPublishMs = millis();
   d448c:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d448e:	f001 f897 	bl	d55c0 <spark_cloud_flag_connected>
    if (Particle.connected())
   d4492:	b138      	cbz	r0, d44a4 <loop+0x3c>
            Particle.publish("alphaOnline", "on");
   d4494:	a802      	add	r0, sp, #8
   d4496:	4a99      	ldr	r2, [pc, #612]	; (d46fc <loop+0x294>)
   d4498:	4999      	ldr	r1, [pc, #612]	; (d4700 <loop+0x298>)
   d449a:	f7ff fe1b 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d449e:	a803      	add	r0, sp, #12
   d44a0:	f7ff ffcc 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
resVal=analogRead(photoSens);
   d44a4:	4b97      	ldr	r3, [pc, #604]	; (d4704 <loop+0x29c>)
   d44a6:	4d98      	ldr	r5, [pc, #608]	; (d4708 <loop+0x2a0>)
   d44a8:	8818      	ldrh	r0, [r3, #0]
   d44aa:	4c98      	ldr	r4, [pc, #608]	; (d470c <loop+0x2a4>)
   d44ac:	f003 fbb9 	bl	d7c22 <analogRead>
if (200 < resVal){
   d44b0:	28c8      	cmp	r0, #200	; 0xc8
resVal=analogRead(photoSens);
   d44b2:	6028      	str	r0, [r5, #0]
if (200 < resVal){
   d44b4:	dd2a      	ble.n	d450c <loop+0xa4>
  	pixels.setPixelColor(1, pixels.Color(5,0,0,0)); // Moderately bright green color.
   d44b6:	2300      	movs	r3, #0
   d44b8:	461a      	mov	r2, r3
   d44ba:	4619      	mov	r1, r3
   d44bc:	2005      	movs	r0, #5
   d44be:	f000 fea3 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d44c2:	2101      	movs	r1, #1
   d44c4:	4602      	mov	r2, r0
   d44c6:	4892      	ldr	r0, [pc, #584]	; (d4710 <loop+0x2a8>)
   d44c8:	f000 fe5a 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
Particle.publish("lighting1", String(resVal));
   d44cc:	6829      	ldr	r1, [r5, #0]
lightMode = 2;
   d44ce:	2302      	movs	r3, #2
Particle.publish("lighting1", String(resVal));
   d44d0:	220a      	movs	r2, #10
   d44d2:	a802      	add	r0, sp, #8
lightMode = 2;
   d44d4:	6023      	str	r3, [r4, #0]
Particle.publish("lighting1", String(resVal));
   d44d6:	f003 f8aa 	bl	d762e <_ZN6StringC1Eih>
   d44da:	9a02      	ldr	r2, [sp, #8]
   d44dc:	498d      	ldr	r1, [pc, #564]	; (d4714 <loop+0x2ac>)
    Particle.publish("lighting3", String(resVal));
   d44de:	4668      	mov	r0, sp
   d44e0:	f7ff fdf8 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d44e4:	a801      	add	r0, sp, #4
   d44e6:	f7ff ffa9 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44ea:	a802      	add	r0, sp, #8
   d44ec:	f002 ffec 	bl	d74c8 <_ZN6StringD1Ev>
  } else if ((lightModeBeta = 1) && (lightMode == 1)){
   d44f0:	4e89      	ldr	r6, [pc, #548]	; (d4718 <loop+0x2b0>)
   d44f2:	2301      	movs	r3, #1
   d44f4:	6033      	str	r3, [r6, #0]
   d44f6:	6823      	ldr	r3, [r4, #0]
   d44f8:	2b01      	cmp	r3, #1
   d44fa:	d03b      	beq.n	d4574 <loop+0x10c>
  } else if ((lightModeBeta = 2) && (lightMode == 2)){
   d44fc:	2202      	movs	r2, #2
   d44fe:	4293      	cmp	r3, r2
   d4500:	6032      	str	r2, [r6, #0]
   d4502:	d142      	bne.n	d458a <loop+0x122>
      	pixels.setPixelColor(4, pixels.Color(0,0,5,0));
   d4504:	2300      	movs	r3, #0
   d4506:	2205      	movs	r2, #5
   d4508:	4619      	mov	r1, r3
   d450a:	e036      	b.n	d457a <loop+0x112>
  else if (100 < resVal){
   d450c:	2864      	cmp	r0, #100	; 0x64
   d450e:	dd17      	ble.n	d4540 <loop+0xd8>
  	pixels.setPixelColor(1, pixels.Color(0,5,0,0)); // Moderately bright green color.
   d4510:	2300      	movs	r3, #0
   d4512:	461a      	mov	r2, r3
   d4514:	4618      	mov	r0, r3
   d4516:	2105      	movs	r1, #5
   d4518:	f000 fe76 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d451c:	2101      	movs	r1, #1
   d451e:	4602      	mov	r2, r0
   d4520:	487b      	ldr	r0, [pc, #492]	; (d4710 <loop+0x2a8>)
   d4522:	f000 fe2d 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        pixels.show();
   d4526:	487a      	ldr	r0, [pc, #488]	; (d4710 <loop+0x2a8>)
   d4528:	f000 fc84 	bl	d4e34 <_ZN17Adafruit_NeoPixel4showEv>
    Particle.publish("lighting2", String(resVal));
   d452c:	6829      	ldr	r1, [r5, #0]
lightMode = 1;
   d452e:	2301      	movs	r3, #1
    Particle.publish("lighting2", String(resVal));
   d4530:	220a      	movs	r2, #10
   d4532:	a802      	add	r0, sp, #8
lightMode = 1;
   d4534:	6023      	str	r3, [r4, #0]
    Particle.publish("lighting2", String(resVal));
   d4536:	f003 f87a 	bl	d762e <_ZN6StringC1Eih>
   d453a:	9a02      	ldr	r2, [sp, #8]
   d453c:	4977      	ldr	r1, [pc, #476]	; (d471c <loop+0x2b4>)
   d453e:	e7ce      	b.n	d44de <loop+0x76>
  else if (99 > resVal)
   d4540:	2862      	cmp	r0, #98	; 0x62
   d4542:	dcd5      	bgt.n	d44f0 <loop+0x88>
  	pixels.setPixelColor(1, pixels.Color(0,0,5,0)); // Moderately bright green color.
   d4544:	2300      	movs	r3, #0
   d4546:	4619      	mov	r1, r3
   d4548:	4618      	mov	r0, r3
   d454a:	2205      	movs	r2, #5
   d454c:	f000 fe5c 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4550:	2101      	movs	r1, #1
   d4552:	4602      	mov	r2, r0
   d4554:	486e      	ldr	r0, [pc, #440]	; (d4710 <loop+0x2a8>)
   d4556:	f000 fe13 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        pixels.show();
   d455a:	486d      	ldr	r0, [pc, #436]	; (d4710 <loop+0x2a8>)
   d455c:	f000 fc6a 	bl	d4e34 <_ZN17Adafruit_NeoPixel4showEv>
    Particle.publish("lighting3", String(resVal));
   d4560:	6829      	ldr	r1, [r5, #0]
lightMode = 0;
   d4562:	2300      	movs	r3, #0
    Particle.publish("lighting3", String(resVal));
   d4564:	220a      	movs	r2, #10
   d4566:	a802      	add	r0, sp, #8
lightMode = 0;
   d4568:	6023      	str	r3, [r4, #0]
    Particle.publish("lighting3", String(resVal));
   d456a:	f003 f860 	bl	d762e <_ZN6StringC1Eih>
   d456e:	9a02      	ldr	r2, [sp, #8]
   d4570:	496b      	ldr	r1, [pc, #428]	; (d4720 <loop+0x2b8>)
   d4572:	e7b4      	b.n	d44de <loop+0x76>
      	pixels.setPixelColor(4, pixels.Color(0,5,0,0));
   d4574:	2300      	movs	r3, #0
   d4576:	461a      	mov	r2, r3
   d4578:	2105      	movs	r1, #5
      	pixels.setPixelColor(4, pixels.Color(0,0,5,0));
   d457a:	4618      	mov	r0, r3
   d457c:	f000 fe44 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4580:	2104      	movs	r1, #4
   d4582:	4602      	mov	r2, r0
   d4584:	4862      	ldr	r0, [pc, #392]	; (d4710 <loop+0x2a8>)
   d4586:	f000 fdfb 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
tiltState = digitalRead(tiltSens);
   d458a:	4d66      	ldr	r5, [pc, #408]	; (d4724 <loop+0x2bc>)
   d458c:	4f66      	ldr	r7, [pc, #408]	; (d4728 <loop+0x2c0>)
   d458e:	8828      	ldrh	r0, [r5, #0]
   d4590:	4c66      	ldr	r4, [pc, #408]	; (d472c <loop+0x2c4>)
   d4592:	f003 fb33 	bl	d7bfc <digitalRead>
tone(buzzSens, 1000, 10);
   d4596:	4b66      	ldr	r3, [pc, #408]	; (d4730 <loop+0x2c8>)
tiltState = digitalRead(tiltSens);
   d4598:	6038      	str	r0, [r7, #0]
tone(buzzSens, 1000, 10);
   d459a:	220a      	movs	r2, #10
   d459c:	7818      	ldrb	r0, [r3, #0]
   d459e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d45a2:	f003 f873 	bl	d768c <tone>
    if (tiltState != lastTiltState) {
   d45a6:	4b63      	ldr	r3, [pc, #396]	; (d4734 <loop+0x2cc>)
   d45a8:	6839      	ldr	r1, [r7, #0]
   d45aa:	681a      	ldr	r2, [r3, #0]
   d45ac:	4291      	cmp	r1, r2
   d45ae:	4698      	mov	r8, r3
   d45b0:	d022      	beq.n	d45f8 <loop+0x190>
    Particle.publish("alphaColor", String(colorMode));
   d45b2:	6821      	ldr	r1, [r4, #0]
   d45b4:	220a      	movs	r2, #10
   d45b6:	a802      	add	r0, sp, #8
   d45b8:	f003 f839 	bl	d762e <_ZN6StringC1Eih>
   d45bc:	9a02      	ldr	r2, [sp, #8]
   d45be:	495e      	ldr	r1, [pc, #376]	; (d4738 <loop+0x2d0>)
   d45c0:	4668      	mov	r0, sp
   d45c2:	f7ff fd87 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d45c6:	a801      	add	r0, sp, #4
   d45c8:	f7ff ff38 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45cc:	a802      	add	r0, sp, #8
   d45ce:	f002 ff7b 	bl	d74c8 <_ZN6StringD1Ev>
    if ((digitalRead(tiltSens) == HIGH) ||(digitalRead(tiltSens) == LOW) ) { 
   d45d2:	8828      	ldrh	r0, [r5, #0]
   d45d4:	f003 fb12 	bl	d7bfc <digitalRead>
   d45d8:	2801      	cmp	r0, #1
   d45da:	d105      	bne.n	d45e8 <loop+0x180>
    if (colorMode < 5) { //until it reaches the last mode, cycle to the next mode
   d45dc:	6823      	ldr	r3, [r4, #0]
   d45de:	2b04      	cmp	r3, #4
   d45e0:	dd12      	ble.n	d4608 <loop+0x1a0>
      colorMode = 0; // after the last mode, cycle backs to first mode 
   d45e2:	2300      	movs	r3, #0
   d45e4:	6023      	str	r3, [r4, #0]
   d45e6:	e004      	b.n	d45f2 <loop+0x18a>
    if ((digitalRead(tiltSens) == HIGH) ||(digitalRead(tiltSens) == LOW) ) { 
   d45e8:	8828      	ldrh	r0, [r5, #0]
   d45ea:	f003 fb07 	bl	d7bfc <digitalRead>
   d45ee:	2800      	cmp	r0, #0
   d45f0:	d0f4      	beq.n	d45dc <loop+0x174>
      lastTiltState = tiltState; //upade state out of loop
   d45f2:	683b      	ldr	r3, [r7, #0]
   d45f4:	f8c8 3000 	str.w	r3, [r8]
switch (colorMode)
   d45f8:	6823      	ldr	r3, [r4, #0]
   d45fa:	2b04      	cmp	r3, #4
   d45fc:	d812      	bhi.n	d4624 <loop+0x1bc>
   d45fe:	e8df f003 	tbb	[pc, r3]
   d4602:	3906      	.short	0x3906
   d4604:	433e      	.short	0x433e
   d4606:	48          	.byte	0x48
   d4607:	00          	.byte	0x00
      colorMode = colorMode + 1;
   d4608:	3301      	adds	r3, #1
   d460a:	6023      	str	r3, [r4, #0]
   d460c:	e7f1      	b.n	d45f2 <loop+0x18a>
   	pixels.setPixelColor(2, pixels.Color(5,0,0,0));
   d460e:	2300      	movs	r3, #0
   d4610:	461a      	mov	r2, r3
   d4612:	4619      	mov	r1, r3
   d4614:	2005      	movs	r0, #5
    	pixels.setPixelColor(2, pixels.Color(2,3,0,0));
   d4616:	f000 fdf7 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d461a:	2102      	movs	r1, #2
   d461c:	4602      	mov	r2, r0
   d461e:	483c      	ldr	r0, [pc, #240]	; (d4710 <loop+0x2a8>)
   d4620:	f000 fdae 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  if ((colorMode == 0) && (colorModeBeta == 0)){
   d4624:	6823      	ldr	r3, [r4, #0]
   d4626:	4d45      	ldr	r5, [pc, #276]	; (d473c <loop+0x2d4>)
   d4628:	2b00      	cmp	r3, #0
   d462a:	d136      	bne.n	d469a <loop+0x232>
   d462c:	682b      	ldr	r3, [r5, #0]
   d462e:	2b00      	cmp	r3, #0
   d4630:	d15b      	bne.n	d46ea <loop+0x282>
      	pixels.setPixelColor(3, pixels.Color(5,0,0,0));
   d4632:	461a      	mov	r2, r3
   d4634:	4619      	mov	r1, r3
   d4636:	2005      	movs	r0, #5
      	pixels.setPixelColor(3, pixels.Color(0,0,0,5));
   d4638:	f000 fde6 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d463c:	2103      	movs	r1, #3
   d463e:	4602      	mov	r2, r0
   d4640:	4833      	ldr	r0, [pc, #204]	; (d4710 <loop+0x2a8>)
   d4642:	f000 fd9d 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   if ((colorMode == 0) && (colorModeBeta == 0) && (lightModeBeta == 0)) {
   d4646:	682b      	ldr	r3, [r5, #0]
   d4648:	6824      	ldr	r4, [r4, #0]
   d464a:	431c      	orrs	r4, r3
   d464c:	6833      	ldr	r3, [r6, #0]
   d464e:	431c      	orrs	r4, r3
   d4650:	d10a      	bne.n	d4668 <loop+0x200>
         	pixels.setPixelColor(0, pixels.Color(1,2,2,0));
   d4652:	2202      	movs	r2, #2
   d4654:	4611      	mov	r1, r2
   d4656:	4623      	mov	r3, r4
   d4658:	2001      	movs	r0, #1
   d465a:	f000 fdd5 	bl	d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d465e:	4621      	mov	r1, r4
   d4660:	4602      	mov	r2, r0
   d4662:	482b      	ldr	r0, [pc, #172]	; (d4710 <loop+0x2a8>)
   d4664:	f000 fd8c 	bl	d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    locator.loop();
   d4668:	4835      	ldr	r0, [pc, #212]	; (d4740 <loop+0x2d8>)
   d466a:	f000 fae9 	bl	d4c40 <_ZN23GoogleMapsDeviceLocator4loopEv>
}
   d466e:	b006      	add	sp, #24
   d4670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	pixels.setPixelColor(2, pixels.Color(0,5,0,0));
   d4674:	2300      	movs	r3, #0
   d4676:	461a      	mov	r2, r3
   d4678:	2105      	movs	r1, #5
   d467a:	4618      	mov	r0, r3
   d467c:	e7cb      	b.n	d4616 <loop+0x1ae>
   	pixels.setPixelColor(2, pixels.Color(0,0,5,0)); 
   d467e:	2300      	movs	r3, #0
   d4680:	2205      	movs	r2, #5
   d4682:	4619      	mov	r1, r3
   d4684:	4618      	mov	r0, r3
   d4686:	e7c6      	b.n	d4616 <loop+0x1ae>
    pixels.setPixelColor(2, pixels.Color(2,0,3,0));
   d4688:	2300      	movs	r3, #0
   d468a:	2203      	movs	r2, #3
   d468c:	4619      	mov	r1, r3
    	pixels.setPixelColor(2, pixels.Color(2,3,0,0));
   d468e:	2002      	movs	r0, #2
   d4690:	e7c1      	b.n	d4616 <loop+0x1ae>
   d4692:	2300      	movs	r3, #0
   d4694:	461a      	mov	r2, r3
   d4696:	2103      	movs	r1, #3
   d4698:	e7f9      	b.n	d468e <loop+0x226>
  } else if ((colorMode == 1) && (colorModeBeta == 1)){
   d469a:	2b01      	cmp	r3, #1
   d469c:	d107      	bne.n	d46ae <loop+0x246>
   d469e:	682b      	ldr	r3, [r5, #0]
   d46a0:	2b01      	cmp	r3, #1
   d46a2:	d122      	bne.n	d46ea <loop+0x282>
      	pixels.setPixelColor(3, pixels.Color(0,5,0,0));
   d46a4:	2300      	movs	r3, #0
   d46a6:	461a      	mov	r2, r3
   d46a8:	2105      	movs	r1, #5
   d46aa:	4618      	mov	r0, r3
   d46ac:	e7c4      	b.n	d4638 <loop+0x1d0>
  } else if ((colorMode == 2) && (colorModeBeta == 2)){
   d46ae:	2b02      	cmp	r3, #2
   d46b0:	d107      	bne.n	d46c2 <loop+0x25a>
   d46b2:	682b      	ldr	r3, [r5, #0]
   d46b4:	2b02      	cmp	r3, #2
   d46b6:	d118      	bne.n	d46ea <loop+0x282>
      	pixels.setPixelColor(3, pixels.Color(0,0,5,0));
   d46b8:	2300      	movs	r3, #0
   d46ba:	2205      	movs	r2, #5
   d46bc:	4619      	mov	r1, r3
   d46be:	4618      	mov	r0, r3
   d46c0:	e7ba      	b.n	d4638 <loop+0x1d0>
  }  else if ((colorMode == 3) && (colorModeBeta == 3)){
   d46c2:	2b03      	cmp	r3, #3
   d46c4:	d107      	bne.n	d46d6 <loop+0x26e>
   d46c6:	682f      	ldr	r7, [r5, #0]
   d46c8:	2f03      	cmp	r7, #3
   d46ca:	d10e      	bne.n	d46ea <loop+0x282>
      	pixels.setPixelColor(3, pixels.Color(2,0,3,0));
   d46cc:	2300      	movs	r3, #0
   d46ce:	463a      	mov	r2, r7
   d46d0:	4619      	mov	r1, r3
   d46d2:	2002      	movs	r0, #2
   d46d4:	e7b0      	b.n	d4638 <loop+0x1d0>
  } else if ((colorMode == 4) && (colorModeBeta == 4)){
   d46d6:	2b04      	cmp	r3, #4
   d46d8:	d107      	bne.n	d46ea <loop+0x282>
   d46da:	682b      	ldr	r3, [r5, #0]
   d46dc:	2b04      	cmp	r3, #4
   d46de:	d104      	bne.n	d46ea <loop+0x282>
      	pixels.setPixelColor(3, pixels.Color(2,3,0,0));
   d46e0:	2300      	movs	r3, #0
   d46e2:	461a      	mov	r2, r3
   d46e4:	2103      	movs	r1, #3
   d46e6:	2002      	movs	r0, #2
   d46e8:	e7a6      	b.n	d4638 <loop+0x1d0>
      	pixels.setPixelColor(3, pixels.Color(0,0,0,5));
   d46ea:	2200      	movs	r2, #0
   d46ec:	2305      	movs	r3, #5
   d46ee:	4611      	mov	r1, r2
   d46f0:	4610      	mov	r0, r2
   d46f2:	e7a1      	b.n	d4638 <loop+0x1d0>
   d46f4:	2003e3d4 	.word	0x2003e3d4
   d46f8:	2003e1d8 	.word	0x2003e1d8
   d46fc:	000da7e7 	.word	0x000da7e7
   d4700:	000da71e 	.word	0x000da71e
   d4704:	2003e1d4 	.word	0x2003e1d4
   d4708:	2003e460 	.word	0x2003e460
   d470c:	2003e3dc 	.word	0x2003e3dc
   d4710:	2003e44c 	.word	0x2003e44c
   d4714:	000da72a 	.word	0x000da72a
   d4718:	2003e3e0 	.word	0x2003e3e0
   d471c:	000da734 	.word	0x000da734
   d4720:	000da73e 	.word	0x000da73e
   d4724:	2003e1e0 	.word	0x2003e1e0
   d4728:	2003e464 	.word	0x2003e464
   d472c:	2003e3cc 	.word	0x2003e3cc
   d4730:	2003e1d0 	.word	0x2003e1d0
   d4734:	2003e3d8 	.word	0x2003e3d8
   d4738:	000da748 	.word	0x000da748
   d473c:	2003e3d0 	.word	0x2003e3d0
   d4740:	2003e3e4 	.word	0x2003e3e4

000d4744 <_Z13alphaHandler1PKcS0_>:
{
   d4744:	b513      	push	{r0, r1, r4, lr}
Particle.publish("alphaOnline", "on"); // respond to the other being online
   d4746:	4a1d      	ldr	r2, [pc, #116]	; (d47bc <_Z13alphaHandler1PKcS0_+0x78>)
{
   d4748:	460c      	mov	r4, r1
Particle.publish("alphaOnline", "on"); // respond to the other being online
   d474a:	4668      	mov	r0, sp
   d474c:	491c      	ldr	r1, [pc, #112]	; (d47c0 <_Z13alphaHandler1PKcS0_+0x7c>)
   d474e:	f7ff fcc1 	bl	d40d4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4752:	a801      	add	r0, sp, #4
   d4754:	f7ff fe72 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
if (strcmp(data, "on") == 0) // -> beta is online
   d4758:	4620      	mov	r0, r4
   d475a:	4918      	ldr	r1, [pc, #96]	; (d47bc <_Z13alphaHandler1PKcS0_+0x78>)
   d475c:	4c19      	ldr	r4, [pc, #100]	; (d47c4 <_Z13alphaHandler1PKcS0_+0x80>)
   d475e:	f004 f818 	bl	d8792 <strcmp>
   d4762:	b9d8      	cbnz	r0, d479c <_Z13alphaHandler1PKcS0_+0x58>
tone(buzzSens, 1000, 500);
   d4764:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d4768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d476c:	7820      	ldrb	r0, [r4, #0]
   d476e:	f002 ff8d 	bl	d768c <tone>
delay(200);
   d4772:	20c8      	movs	r0, #200	; 0xc8
   d4774:	f000 ffec 	bl	d5750 <delay>
tone(buzzSens, 2000, 500);
   d4778:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d477c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4780:	7820      	ldrb	r0, [r4, #0]
   d4782:	f002 ff83 	bl	d768c <tone>
delay(200);
   d4786:	20c8      	movs	r0, #200	; 0xc8
   d4788:	f000 ffe2 	bl	d5750 <delay>
tone(buzzSens, 3000, 200);
   d478c:	7820      	ldrb	r0, [r4, #0]
   d478e:	22c8      	movs	r2, #200	; 0xc8
   d4790:	f640 31b8 	movw	r1, #3000	; 0xbb8
   d4794:	f002 ff7a 	bl	d768c <tone>
}
   d4798:	b002      	add	sp, #8
   d479a:	bd10      	pop	{r4, pc}
tone(buzzSens, 1000, 100);
   d479c:	7820      	ldrb	r0, [r4, #0]
   d479e:	2264      	movs	r2, #100	; 0x64
   d47a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d47a4:	f002 ff72 	bl	d768c <tone>
delay(200);
   d47a8:	20c8      	movs	r0, #200	; 0xc8
   d47aa:	f000 ffd1 	bl	d5750 <delay>
tone(buzzSens, 1000, 100);
   d47ae:	7820      	ldrb	r0, [r4, #0]
   d47b0:	2264      	movs	r2, #100	; 0x64
   d47b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d47b6:	f002 ff69 	bl	d768c <tone>
}
   d47ba:	e7ed      	b.n	d4798 <_Z13alphaHandler1PKcS0_+0x54>
   d47bc:	000da7e7 	.word	0x000da7e7
   d47c0:	000da71e 	.word	0x000da71e
   d47c4:	2003e1d0 	.word	0x2003e1d0

000d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d47c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d47ca:	e9d0 5300 	ldrd	r5, r3, [r0]
   d47ce:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d47d0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d47d2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d47d6:	42ae      	cmp	r6, r5
   d47d8:	d004      	beq.n	d47e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d47da:	4628      	mov	r0, r5
   d47dc:	f002 fe74 	bl	d74c8 <_ZN6StringD1Ev>
   d47e0:	3514      	adds	r5, #20
   d47e2:	e7f8      	b.n	d47d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d47e4:	6820      	ldr	r0, [r4, #0]
   d47e6:	f000 ff7b 	bl	d56e0 <free>
    AllocatorT::free(data_);
}
   d47ea:	4620      	mov	r0, r4
   d47ec:	bd70      	pop	{r4, r5, r6, pc}

000d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d47ee:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d47f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47f2:	4604      	mov	r4, r0
   d47f4:	460d      	mov	r5, r1
   d47f6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d47f8:	d916      	bls.n	d4828 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d47fa:	4290      	cmp	r0, r2
   d47fc:	d215      	bcs.n	d482a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d47fe:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4802:	1a75      	subs	r5, r6, r1
   d4804:	f1a1 0714 	sub.w	r7, r1, #20
   d4808:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d480a:	42b7      	cmp	r7, r6
   d480c:	d01c      	beq.n	d4848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d480e:	b12c      	cbz	r4, d481c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4810:	4631      	mov	r1, r6
   d4812:	4620      	mov	r0, r4
   d4814:	f002 fed4 	bl	d75c0 <_ZN6StringC1EOS_>
   d4818:	7c33      	ldrb	r3, [r6, #16]
   d481a:	7423      	strb	r3, [r4, #16]
   d481c:	4630      	mov	r0, r6
   d481e:	f002 fe53 	bl	d74c8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4822:	3e14      	subs	r6, #20
   d4824:	3c14      	subs	r4, #20
   d4826:	e7f0      	b.n	d480a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4828:	d00e      	beq.n	d4848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d482a:	42b5      	cmp	r5, r6
   d482c:	d00c      	beq.n	d4848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d482e:	b12c      	cbz	r4, d483c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4830:	4629      	mov	r1, r5
   d4832:	4620      	mov	r0, r4
   d4834:	f002 fec4 	bl	d75c0 <_ZN6StringC1EOS_>
   d4838:	7c2b      	ldrb	r3, [r5, #16]
   d483a:	7423      	strb	r3, [r4, #16]
   d483c:	4628      	mov	r0, r5
   d483e:	f002 fe43 	bl	d74c8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4842:	3514      	adds	r5, #20
   d4844:	3414      	adds	r4, #20
   d4846:	e7f0      	b.n	d482a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d484e:	2300      	movs	r3, #0
   d4850:	e9c0 3300 	strd	r3, r3, [r0]
   d4854:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4856:	684f      	ldr	r7, [r1, #4]
   d4858:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d485a:	4604      	mov	r4, r0
   d485c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d485e:	dd23      	ble.n	d48a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4860:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4864:	fb08 f007 	mul.w	r0, r8, r7
   d4868:	f000 ff32 	bl	d56d0 <malloc>
            if (!d) {
   d486c:	4605      	mov	r5, r0
   d486e:	b1d8      	cbz	r0, d48a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4870:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4874:	fb08 1202 	mla	r2, r8, r2, r1
   d4878:	f7ff ffb9 	bl	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d487c:	6820      	ldr	r0, [r4, #0]
   d487e:	f000 ff2f 	bl	d56e0 <free>
        data_ = d;
   d4882:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4884:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4886:	e9d6 7300 	ldrd	r7, r3, [r6]
   d488a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d488e:	45b8      	cmp	r8, r7
   d4890:	d008      	beq.n	d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4892:	4639      	mov	r1, r7
   d4894:	4628      	mov	r0, r5
   d4896:	f002 fead 	bl	d75f4 <_ZN6StringC1ERKS_>
   d489a:	7c3b      	ldrb	r3, [r7, #16]
   d489c:	742b      	strb	r3, [r5, #16]
   d489e:	3714      	adds	r7, #20
   d48a0:	3514      	adds	r5, #20
   d48a2:	e7f4      	b.n	d488e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d48a4:	6873      	ldr	r3, [r6, #4]
   d48a6:	6063      	str	r3, [r4, #4]
}
   d48a8:	4620      	mov	r0, r4
   d48aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d48b0 <_GLOBAL__sub_I_logHandler>:
}
   d48b0:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d48b2:	4b25      	ldr	r3, [pc, #148]	; (d4948 <_GLOBAL__sub_I_logHandler+0x98>)
   d48b4:	b08c      	sub	sp, #48	; 0x30
   d48b6:	2400      	movs	r4, #0
   d48b8:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);
   d48ba:	4621      	mov	r1, r4
   d48bc:	2001      	movs	r0, #1
   d48be:	f000 fe53 	bl	d5568 <system_thread_set_state>
        capacity_(0) {
   d48c2:	e9cd 4400 	strd	r4, r4, [sp]
   d48c6:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d48c8:	f002 ffde 	bl	d7888 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d48cc:	4c1f      	ldr	r4, [pc, #124]	; (d494c <_GLOBAL__sub_I_logHandler+0x9c>)
   d48ce:	4605      	mov	r5, r0
   d48d0:	4669      	mov	r1, sp
   d48d2:	a803      	add	r0, sp, #12
   d48d4:	f7ff ffb9 	bl	d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d48d8:	4626      	mov	r6, r4
        stream_(&stream) {
   d48da:	a903      	add	r1, sp, #12
   d48dc:	a806      	add	r0, sp, #24
   d48de:	f7ff ffb4 	bl	d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d48e2:	4b1b      	ldr	r3, [pc, #108]	; (d4950 <_GLOBAL__sub_I_logHandler+0xa0>)
   d48e4:	f846 3b04 	str.w	r3, [r6], #4
   d48e8:	a906      	add	r1, sp, #24
   d48ea:	a809      	add	r0, sp, #36	; 0x24
   d48ec:	f7ff ffad 	bl	d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d48f0:	aa09      	add	r2, sp, #36	; 0x24
   d48f2:	211e      	movs	r1, #30
   d48f4:	4630      	mov	r0, r6
   d48f6:	f002 f97c 	bl	d6bf2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d48fa:	a809      	add	r0, sp, #36	; 0x24
   d48fc:	f7ff ff64 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4900:	a806      	add	r0, sp, #24
   d4902:	f7ff ff61 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4906:	4b13      	ldr	r3, [pc, #76]	; (d4954 <_GLOBAL__sub_I_logHandler+0xa4>)
   d4908:	6023      	str	r3, [r4, #0]
   d490a:	6225      	str	r5, [r4, #32]
   d490c:	a803      	add	r0, sp, #12
   d490e:	f7ff ff5b 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4912:	4b11      	ldr	r3, [pc, #68]	; (d4958 <_GLOBAL__sub_I_logHandler+0xa8>)
   d4914:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4916:	f002 ffb7 	bl	d7888 <_Z16_fetch_usbserialv>
   d491a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d491e:	f002 ffa3 	bl	d7868 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4922:	f001 fe0b 	bl	d653c <_ZN5spark10LogManager8instanceEv>
   d4926:	4621      	mov	r1, r4
   d4928:	f002 f8f5 	bl	d6b16 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d492c:	4668      	mov	r0, sp
   d492e:	f7ff ff4b 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
GoogleMapsDeviceLocator locator;
   d4932:	480a      	ldr	r0, [pc, #40]	; (d495c <_GLOBAL__sub_I_logHandler+0xac>)
   d4934:	f000 f8f6 	bl	d4b24 <_ZN23GoogleMapsDeviceLocatorC1Ev>
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(7, D6, SK6812RGBW);
   d4938:	2306      	movs	r3, #6
   d493a:	461a      	mov	r2, r3
   d493c:	2107      	movs	r1, #7
   d493e:	4808      	ldr	r0, [pc, #32]	; (d4960 <_GLOBAL__sub_I_logHandler+0xb0>)
   d4940:	f000 fa66 	bl	d4e10 <_ZN17Adafruit_NeoPixelC1Ethh>
}
   d4944:	b00c      	add	sp, #48	; 0x30
   d4946:	bd70      	pop	{r4, r5, r6, pc}
   d4948:	2003e3c8 	.word	0x2003e3c8
   d494c:	2003e428 	.word	0x2003e428
   d4950:	000da75c 	.word	0x000da75c
   d4954:	000da970 	.word	0x000da970
   d4958:	000da774 	.word	0x000da774
   d495c:	2003e3e4 	.word	0x2003e3e4
   d4960:	2003e44c 	.word	0x2003e44c

000d4964 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4964:	b510      	push	{r4, lr}
   d4966:	4b06      	ldr	r3, [pc, #24]	; (d4980 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
   d4968:	4604      	mov	r4, r0
   d496a:	f840 3b2c 	str.w	r3, [r0], #44
   d496e:	f002 fdab 	bl	d74c8 <_ZN6StringD1Ev>
   d4972:	f104 000c 	add.w	r0, r4, #12
   d4976:	f002 fda7 	bl	d74c8 <_ZN6StringD1Ev>

}
   d497a:	4620      	mov	r0, r4
   d497c:	bd10      	pop	{r4, pc}
   d497e:	bf00      	nop
   d4980:	000da814 	.word	0x000da814

000d4984 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4984:	b510      	push	{r4, lr}
   d4986:	4604      	mov	r4, r0
}
   d4988:	f7ff ffec 	bl	d4964 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d498c:	4620      	mov	r0, r4
   d498e:	2144      	movs	r1, #68	; 0x44
   d4990:	f003 f99c 	bl	d7ccc <_ZdlPvj>
   d4994:	4620      	mov	r0, r4
   d4996:	bd10      	pop	{r4, pc}

000d4998 <_ZL16wifiScanCallbackP15WiFiAccessPointPv>:



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d4998:	b570      	push	{r4, r5, r6, lr}
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d499a:	4d1b      	ldr	r5, [pc, #108]	; (d4a08 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x70>)
   d499c:	4c1b      	ldr	r4, [pc, #108]	; (d4a0c <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x74>)
   d499e:	682e      	ldr	r6, [r5, #0]
   d49a0:	1ba4      	subs	r4, r4, r6
	if (spaceLeft < 30) {
   d49a2:	2c1d      	cmp	r4, #29
static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d49a4:	b088      	sub	sp, #32
	if (spaceLeft < 30) {
   d49a6:	d92d      	bls.n	d4a04 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
		return;
	}

	int sizeNeeded = snprintf(requestCur, spaceLeft,
   d49a8:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   d49ac:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d49b0:	9307      	str	r3, [sp, #28]
   d49b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d49b4:	9306      	str	r3, [sp, #24]
   d49b6:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d49ba:	9305      	str	r3, [sp, #20]
   d49bc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d49c0:	9304      	str	r3, [sp, #16]
   d49c2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d49c6:	9303      	str	r3, [sp, #12]
   d49c8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d49cc:	9302      	str	r3, [sp, #8]
   d49ce:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   d49d2:	9301      	str	r3, [sp, #4]
   d49d4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   d49d8:	4a0d      	ldr	r2, [pc, #52]	; (d4a10 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x78>)
   d49da:	9300      	str	r3, [sp, #0]
   d49dc:	4b0d      	ldr	r3, [pc, #52]	; (d4a14 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x7c>)
   d49de:	4630      	mov	r0, r6
   d49e0:	295b      	cmp	r1, #91	; 0x5b
   d49e2:	bf18      	it	ne
   d49e4:	4613      	movne	r3, r2
   d49e6:	4a0c      	ldr	r2, [pc, #48]	; (d4a18 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x80>)
   d49e8:	4621      	mov	r1, r4
   d49ea:	f000 fe89 	bl	d5700 <snprintf>
			"%s{\"m\":\"%02x:%02x:%02x:%02x:%02x:%02x\",\"s\":%d,\"c\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded > 0 && sizeNeeded < (int)spaceLeft) {
   d49ee:	2800      	cmp	r0, #0
   d49f0:	dd08      	ble.n	d4a04 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
   d49f2:	4284      	cmp	r4, r0
   d49f4:	dd06      	ble.n	d4a04 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d49f6:	682b      	ldr	r3, [r5, #0]
		numAdded++;
   d49f8:	4a08      	ldr	r2, [pc, #32]	; (d4a1c <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x84>)
		requestCur += sizeNeeded;
   d49fa:	4418      	add	r0, r3
		numAdded++;
   d49fc:	6813      	ldr	r3, [r2, #0]
		requestCur += sizeNeeded;
   d49fe:	6028      	str	r0, [r5, #0]
		numAdded++;
   d4a00:	3301      	adds	r3, #1
   d4a02:	6013      	str	r3, [r2, #0]
	}
}
   d4a04:	b008      	add	sp, #32
   d4a06:	bd70      	pop	{r4, r5, r6, pc}
   d4a08:	2003e568 	.word	0x2003e568
   d4a0c:	2003e565 	.word	0x2003e565
   d4a10:	000da784 	.word	0x000da784
   d4a14:	000da936 	.word	0x000da936
   d4a18:	000da786 	.word	0x000da786
   d4a1c:	2003e570 	.word	0x2003e570

000d4a20 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4a24:	4604      	mov	r4, r0
   d4a26:	ed2d 8b02 	vpush	{d8}
	if (callback) {
   d4a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4a2c:	b083      	sub	sp, #12
   d4a2e:	4610      	mov	r0, r2
	if (callback) {
   d4a30:	2b00      	cmp	r3, #0
   d4a32:	d038      	beq.n	d4aa6 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x86>
		char *mutableCopy = strdup(data);
   d4a34:	f003 fec0 	bl	d87b8 <strdup>
		part = strtok_r(mutableCopy, ",", &end);
   d4a38:	491d      	ldr	r1, [pc, #116]	; (d4ab0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x90>)
   d4a3a:	aa01      	add	r2, sp, #4
		char *mutableCopy = strdup(data);
   d4a3c:	4605      	mov	r5, r0
		part = strtok_r(mutableCopy, ",", &end);
   d4a3e:	f004 fd61 	bl	d9504 <strtok_r>
		if (part) {
   d4a42:	b368      	cbz	r0, d4aa0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x80>
			lat = atof(part);
   d4a44:	f003 fe36 	bl	d86b4 <atof>
			part = strtok_r(NULL, ",", &end);
   d4a48:	4919      	ldr	r1, [pc, #100]	; (d4ab0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x90>)
   d4a4a:	aa01      	add	r2, sp, #4
   d4a4c:	2000      	movs	r0, #0
			lat = atof(part);
   d4a4e:	ec57 6b10 	vmov	r6, r7, d0
			part = strtok_r(NULL, ",", &end);
   d4a52:	f004 fd57 	bl	d9504 <strtok_r>
			if (part) {
   d4a56:	b318      	cbz	r0, d4aa0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x80>
				lon = atof(part);
   d4a58:	f003 fe2c 	bl	d86b4 <atof>
				part = strtok_r(NULL, ",", &end);
   d4a5c:	4914      	ldr	r1, [pc, #80]	; (d4ab0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x90>)
   d4a5e:	aa01      	add	r2, sp, #4
   d4a60:	2000      	movs	r0, #0
				lon = atof(part);
   d4a62:	ec59 8b10 	vmov	r8, r9, d0
				part = strtok_r(NULL, ",", &end);
   d4a66:	f004 fd4d 	bl	d9504 <strtok_r>
				if (part) {
   d4a6a:	b1c8      	cbz	r0, d4aa0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x80>
					accuracy = atof(part);
   d4a6c:	f003 fe22 	bl	d86b4 <atof>
   d4a70:	ec51 0b10 	vmov	r0, r1, d0
   d4a74:	f003 fdaa 	bl	d85cc <__aeabi_d2f>
				lon = atof(part);
   d4a78:	4649      	mov	r1, r9
					accuracy = atof(part);
   d4a7a:	ee08 0a90 	vmov	s17, r0
				lon = atof(part);
   d4a7e:	4640      	mov	r0, r8
   d4a80:	f003 fda4 	bl	d85cc <__aeabi_d2f>
			lat = atof(part);
   d4a84:	4639      	mov	r1, r7
				lon = atof(part);
   d4a86:	ee08 0a10 	vmov	s16, r0
			lat = atof(part);
   d4a8a:	4630      	mov	r0, r6
   d4a8c:	f003 fd9e 	bl	d85cc <__aeabi_d2f>
					(*callback)(lat, lon, accuracy);
   d4a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4a92:	ee00 0a10 	vmov	s0, r0
   d4a96:	eeb0 1a68 	vmov.f32	s2, s17
   d4a9a:	eef0 0a48 	vmov.f32	s1, s16
   d4a9e:	4798      	blx	r3
		free(mutableCopy);
   d4aa0:	4628      	mov	r0, r5
   d4aa2:	f000 fe1d 	bl	d56e0 <free>
}
   d4aa6:	b003      	add	sp, #12
   d4aa8:	ecbd 8b02 	vpop	{d8}
   d4aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4ab0:	000da784 	.word	0x000da784

000d4ab4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ab4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4ab6:	b538      	push	{r3, r4, r5, lr}
   d4ab8:	4604      	mov	r4, r0
	  switch (__op)
   d4aba:	d007      	beq.n	d4acc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d4abc:	2a03      	cmp	r2, #3
   d4abe:	d011      	beq.n	d4ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d4ac0:	2a01      	cmp	r2, #1
   d4ac2:	d101      	bne.n	d4ac8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4ac4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d4ac6:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4ac8:	2000      	movs	r0, #0
   d4aca:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4acc:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d4ace:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ad0:	f7ff fae1 	bl	d4096 <_Znwj>
   d4ad4:	4603      	mov	r3, r0
   d4ad6:	2800      	cmp	r0, #0
   d4ad8:	d0f5      	beq.n	d4ac6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d4ada:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4ade:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4ae2:	e7f0      	b.n	d4ac6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d4ae4:	6800      	ldr	r0, [r0, #0]
   d4ae6:	2800      	cmp	r0, #0
   d4ae8:	d0ee      	beq.n	d4ac8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d4aea:	210c      	movs	r1, #12
   d4aec:	f003 f8ee 	bl	d7ccc <_ZdlPvj>
   d4af0:	e7ea      	b.n	d4ac8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d4af2 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM23GoogleMapsDeviceLocatorFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4af2:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d4af4:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
   d4af6:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d4af8:	685c      	ldr	r4, [r3, #4]
   d4afa:	689d      	ldr	r5, [r3, #8]
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6812      	ldr	r2, [r2, #0]
   d4b00:	1066      	asrs	r6, r4, #1
   d4b02:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d4b06:	07e4      	lsls	r4, r4, #31
   d4b08:	bf44      	itt	mi
   d4b0a:	59ac      	ldrmi	r4, [r5, r6]
   d4b0c:	58e3      	ldrmi	r3, [r4, r3]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4b0e:	bc70      	pop	{r4, r5, r6}
   d4b10:	4718      	bx	r3

000d4b12 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4b12:	b510      	push	{r4, lr}
      if (_M_manager)
   d4b14:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4b16:	4604      	mov	r4, r0
      if (_M_manager)
   d4b18:	b113      	cbz	r3, d4b20 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b1a:	2203      	movs	r2, #3
   d4b1c:	4601      	mov	r1, r0
   d4b1e:	4798      	blx	r3
    }
   d4b20:	4620      	mov	r0, r4
   d4b22:	bd10      	pop	{r4, pc}

000d4b24 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4b24:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4b26:	4b0f      	ldr	r3, [pc, #60]	; (d4b64 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
   d4b28:	6003      	str	r3, [r0, #0]
   d4b2a:	2500      	movs	r5, #0
   d4b2c:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4b30:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4b32:	e9c0 5301 	strd	r5, r3, [r0, #4]
   d4b36:	490c      	ldr	r1, [pc, #48]	; (d4b68 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
   d4b38:	300c      	adds	r0, #12
   d4b3a:	f002 fd10 	bl	d755e <_ZN6StringC1EPKc>
   d4b3e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4b42:	62a3      	str	r3, [r4, #40]	; 0x28
   d4b44:	e9c4 5507 	strd	r5, r5, [r4, #28]
   d4b48:	4908      	ldr	r1, [pc, #32]	; (d4b6c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
   d4b4a:	6265      	str	r5, [r4, #36]	; 0x24
   d4b4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4b50:	f002 fd05 	bl	d755e <_ZN6StringC1EPKc>
   d4b54:	f44f 729b 	mov.w	r2, #310	; 0x136
   d4b58:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   d4b5c:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
   d4b60:	4620      	mov	r0, r4
   d4b62:	bd38      	pop	{r3, r4, r5, pc}
   d4b64:	000da814 	.word	0x000da814
   d4b68:	000da7bc 	.word	0x000da7bc
   d4b6c:	000da7ca 	.word	0x000da7ca

000d4b70 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>:


const char *GoogleMapsDeviceLocator::wifiScan() {
   d4b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4b72:	4c10      	ldr	r4, [pc, #64]	; (d4bb4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
	numAdded = 0;
   d4b74:	4f10      	ldr	r7, [pc, #64]	; (d4bb8 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x48>)
	*requestCur++ = '[';
   d4b76:	4e11      	ldr	r6, [pc, #68]	; (d4bbc <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x4c>)
	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4b78:	4911      	ldr	r1, [pc, #68]	; (d4bc0 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x50>)
	numAdded = 0;
   d4b7a:	2500      	movs	r5, #0
	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4b7c:	4620      	mov	r0, r4
	numAdded = 0;
   d4b7e:	603d      	str	r5, [r7, #0]
	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4b80:	f003 fe11 	bl	d87a6 <strcpy>
	*requestCur++ = '[';
   d4b84:	f104 030b 	add.w	r3, r4, #11
   d4b88:	6033      	str	r3, [r6, #0]
    {
        setIPAddressSource(DYNAMIC_IP);
    }

    int scan(wlan_scan_result_t callback, void* cookie=NULL) {
        return wlan_scan(callback, cookie);
   d4b8a:	480e      	ldr	r0, [pc, #56]	; (d4bc4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x54>)
   d4b8c:	235b      	movs	r3, #91	; 0x5b
   d4b8e:	4629      	mov	r1, r5
   d4b90:	72a3      	strb	r3, [r4, #10]
   d4b92:	f000 fcb9 	bl	d5508 <wlan_scan>

	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
   d4b96:	6833      	ldr	r3, [r6, #0]
   d4b98:	225d      	movs	r2, #93	; 0x5d
   d4b9a:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d4b9c:	227d      	movs	r2, #125	; 0x7d
   d4b9e:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d4ba0:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d4ba2:	70dd      	strb	r5, [r3, #3]
   d4ba4:	1d1a      	adds	r2, r3, #4

	if (numAdded == 0) {
   d4ba6:	683b      	ldr	r3, [r7, #0]
	*requestCur++ = 0;
   d4ba8:	6032      	str	r2, [r6, #0]
	if (numAdded == 0) {
   d4baa:	b903      	cbnz	r3, d4bae <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x3e>
		requestBuf[0] = 0;
   d4bac:	7023      	strb	r3, [r4, #0]
	}

	return requestBuf;
}
   d4bae:	4801      	ldr	r0, [pc, #4]	; (d4bb4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
   d4bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4bb2:	bf00      	nop
   d4bb4:	2003e468 	.word	0x2003e468
   d4bb8:	2003e570 	.word	0x2003e570
   d4bbc:	2003e568 	.word	0x2003e568
   d4bc0:	000da7cf 	.word	0x000da7cf
   d4bc4:	000d4999 	.word	0x000d4999

000d4bc8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
void GoogleMapsDeviceLocator::publishLocation() {
   d4bc8:	b530      	push	{r4, r5, lr}
   d4bca:	b085      	sub	sp, #20
   d4bcc:	4605      	mov	r5, r0
	Serial.println("publishLocation");
   d4bce:	f002 fe5b 	bl	d7888 <_Z16_fetch_usbserialv>
   d4bd2:	4918      	ldr	r1, [pc, #96]	; (d4c34 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
   d4bd4:	f002 fc0f 	bl	d73f6 <_ZN5Print7printlnEPKc>
	return wifiScan();
   d4bd8:	4628      	mov	r0, r5
   d4bda:	f7ff ffc9 	bl	d4b70 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>
   d4bde:	4604      	mov	r4, r0
	Serial.printlnf("scanData=%s", scanData);
   d4be0:	f002 fe52 	bl	d7888 <_Z16_fetch_usbserialv>
   d4be4:	4914      	ldr	r1, [pc, #80]	; (d4c38 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
   d4be6:	4622      	mov	r2, r4
   d4be8:	f7ff fab0 	bl	d414c <_ZN5Print8printlnfEPKcz>
	if (scanData[0]) {
   d4bec:	7823      	ldrb	r3, [r4, #0]
   d4bee:	b1f3      	cbz	r3, d4c2e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
   d4bf0:	f000 fce6 	bl	d55c0 <spark_cloud_flag_connected>
		if (Particle.connected()) {
   d4bf4:	b1d8      	cbz	r0, d4c2e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4bf6:	4b11      	ldr	r3, [pc, #68]	; (d4c3c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4bf8:	68e9      	ldr	r1, [r5, #12]
   d4bfa:	781b      	ldrb	r3, [r3, #0]
   d4bfc:	f88d 3000 	strb.w	r3, [sp]
   d4c00:	4622      	mov	r2, r4
   d4c02:	233c      	movs	r3, #60	; 0x3c
   d4c04:	a802      	add	r0, sp, #8
   d4c06:	f000 ff0f 	bl	d5a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d4c0a:	9c03      	ldr	r4, [sp, #12]
   d4c0c:	b17c      	cbz	r4, d4c2e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
      if (--_M_use_count == 0)
   d4c0e:	6863      	ldr	r3, [r4, #4]
   d4c10:	3b01      	subs	r3, #1
   d4c12:	6063      	str	r3, [r4, #4]
   d4c14:	b95b      	cbnz	r3, d4c2e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
          _M_dispose();
   d4c16:	6823      	ldr	r3, [r4, #0]
   d4c18:	4620      	mov	r0, r4
   d4c1a:	689b      	ldr	r3, [r3, #8]
   d4c1c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c1e:	68a3      	ldr	r3, [r4, #8]
   d4c20:	3b01      	subs	r3, #1
   d4c22:	60a3      	str	r3, [r4, #8]
   d4c24:	b91b      	cbnz	r3, d4c2e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
            _M_destroy();
   d4c26:	6823      	ldr	r3, [r4, #0]
   d4c28:	4620      	mov	r0, r4
   d4c2a:	68db      	ldr	r3, [r3, #12]
   d4c2c:	4798      	blx	r3
}
   d4c2e:	b005      	add	sp, #20
   d4c30:	bd30      	pop	{r4, r5, pc}
   d4c32:	bf00      	nop
   d4c34:	000da7da 	.word	0x000da7da
   d4c38:	000da7ea 	.word	0x000da7ea
   d4c3c:	2003e56c 	.word	0x2003e56c

000d4c40 <_ZN23GoogleMapsDeviceLocator4loopEv>:
void GoogleMapsDeviceLocator::loop() {
   d4c40:	b510      	push	{r4, lr}
	switch(state) {
   d4c42:	6a03      	ldr	r3, [r0, #32]
   d4c44:	2b02      	cmp	r3, #2
void GoogleMapsDeviceLocator::loop() {
   d4c46:	4604      	mov	r4, r0
	switch(state) {
   d4c48:	d00b      	beq.n	d4c62 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
   d4c4a:	2b03      	cmp	r3, #3
   d4c4c:	d022      	beq.n	d4c94 <_ZN23GoogleMapsDeviceLocator4loopEv+0x54>
   d4c4e:	b9bb      	cbnz	r3, d4c80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c50:	f000 fcb6 	bl	d55c0 <spark_cloud_flag_connected>
		if (Particle.connected()) {
   d4c54:	b1a0      	cbz	r0, d4c80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			state = CONNECTED_WAIT_STATE;
   d4c56:	2302      	movs	r3, #2
   d4c58:	6223      	str	r3, [r4, #32]
   d4c5a:	f000 fb1d 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d4c5e:	61e0      	str	r0, [r4, #28]
   d4c60:	e00e      	b.n	d4c80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
   d4c62:	f000 fb19 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - stateTime >= waitAfterConnect) {
   d4c66:	69e3      	ldr	r3, [r4, #28]
   d4c68:	1ac0      	subs	r0, r0, r3
   d4c6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4c6c:	4298      	cmp	r0, r3
   d4c6e:	d307      	bcc.n	d4c80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			if (locatorMode == LOCATOR_MODE_ONCE) {
   d4c70:	6863      	ldr	r3, [r4, #4]
   d4c72:	2b01      	cmp	r3, #1
   d4c74:	d105      	bne.n	d4c82 <_ZN23GoogleMapsDeviceLocator4loopEv+0x42>
				publishLocation();
   d4c76:	4620      	mov	r0, r4
   d4c78:	f7ff ffa6 	bl	d4bc8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
				state = IDLE_STATE;
   d4c7c:	2304      	movs	r3, #4
   d4c7e:	6223      	str	r3, [r4, #32]
}
   d4c80:	bd10      	pop	{r4, pc}
			if (locatorMode == LOCATOR_MODE_MANUAL) {
   d4c82:	2b00      	cmp	r3, #0
   d4c84:	d0fa      	beq.n	d4c7c <_ZN23GoogleMapsDeviceLocator4loopEv+0x3c>
				state = CONNECTED_STATE;
   d4c86:	2303      	movs	r3, #3
   d4c88:	6223      	str	r3, [r4, #32]
   d4c8a:	f000 fb05 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d4c8e:	68a3      	ldr	r3, [r4, #8]
   d4c90:	1ac0      	subs	r0, r0, r3
   d4c92:	e7e4      	b.n	d4c5e <_ZN23GoogleMapsDeviceLocator4loopEv+0x1e>
   d4c94:	f000 fc94 	bl	d55c0 <spark_cloud_flag_connected>
		if (Particle.connected()) {
   d4c98:	b170      	cbz	r0, d4cb8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x78>
   d4c9a:	f000 fafd 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
   d4c9e:	69e3      	ldr	r3, [r4, #28]
   d4ca0:	1ac0      	subs	r0, r0, r3
   d4ca2:	68a3      	ldr	r3, [r4, #8]
   d4ca4:	4298      	cmp	r0, r3
   d4ca6:	d3eb      	bcc.n	d4c80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
   d4ca8:	f000 faf6 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4cac:	61e0      	str	r0, [r4, #28]
				publishLocation();
   d4cae:	4620      	mov	r0, r4
}
   d4cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				publishLocation();
   d4cb4:	f7ff bf88 	b.w	d4bc8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			state = CONNECT_WAIT_STATE;
   d4cb8:	6220      	str	r0, [r4, #32]
}
   d4cba:	e7e1      	b.n	d4c80 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

000d4cbc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4cbc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4cbe:	2300      	movs	r3, #0
   d4cc0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4cc2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4cc4:	4604      	mov	r4, r0
   d4cc6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4cc8:	b12b      	cbz	r3, d4cd6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4cca:	2202      	movs	r2, #2
   d4ccc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4cce:	68eb      	ldr	r3, [r5, #12]
   d4cd0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4cd2:	68ab      	ldr	r3, [r5, #8]
   d4cd4:	60a3      	str	r3, [r4, #8]
	}
    }
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4cdc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d4cdc:	b530      	push	{r4, r5, lr}
   d4cde:	b08d      	sub	sp, #52	; 0x34
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d4ce0:	68c3      	ldr	r3, [r0, #12]
	this->callback = callback;
   d4ce2:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d4ce4:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4ce6:	a808      	add	r0, sp, #32
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d4ce8:	9303      	str	r3, [sp, #12]
   d4cea:	f000 fc71 	bl	d55d0 <spark_deviceID>
   d4cee:	9a08      	ldr	r2, [sp, #32]
   d4cf0:	9b03      	ldr	r3, [sp, #12]
   d4cf2:	9200      	str	r2, [sp, #0]
   d4cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4cf8:	4a1a      	ldr	r2, [pc, #104]	; (d4d64 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d4cfa:	481b      	ldr	r0, [pc, #108]	; (d4d68 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
   d4cfc:	f000 fd00 	bl	d5700 <snprintf>
   d4d00:	a808      	add	r0, sp, #32
   d4d02:	f002 fbe1 	bl	d74c8 <_ZN6StringD1Ev>
    _Function_base() : _M_manager(nullptr) { }
   d4d06:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d08:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d4d0a:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d0c:	f7ff f9c3 	bl	d4096 <_Znwj>
   d4d10:	b118      	cbz	r0, d4d1a <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3e>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4d12:	4b16      	ldr	r3, [pc, #88]	; (d4d6c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d14:	6084      	str	r4, [r0, #8]
   d4d16:	e9c0 3500 	strd	r3, r5, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4d1a:	4b15      	ldr	r3, [pc, #84]	; (d4d70 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d1c:	9004      	str	r0, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4d1e:	9307      	str	r3, [sp, #28]
        return subscribe_wiring(eventName, handler, scope);
   d4d20:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d4d22:	4b14      	ldr	r3, [pc, #80]	; (d4d74 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
   d4d24:	9306      	str	r3, [sp, #24]
   d4d26:	a808      	add	r0, sp, #32
   d4d28:	f7ff ffc8 	bl	d4cbc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
   d4d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4d2e:	b17b      	cbz	r3, d4d50 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x74>
            auto wrapper = new wiring_event_handler_t(handler);
   d4d30:	2010      	movs	r0, #16
   d4d32:	f7ff f9b0 	bl	d4096 <_Znwj>
   d4d36:	4605      	mov	r5, r0
   d4d38:	b150      	cbz	r0, d4d50 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x74>
   d4d3a:	a908      	add	r1, sp, #32
   d4d3c:	f7ff ffbe 	bl	d4cbc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d4d40:	2300      	movs	r3, #0
   d4d42:	e9cd 3300 	strd	r3, r3, [sp]
   d4d46:	490c      	ldr	r1, [pc, #48]	; (d4d78 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x9c>)
   d4d48:	4807      	ldr	r0, [pc, #28]	; (d4d68 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
   d4d4a:	462a      	mov	r2, r5
   d4d4c:	f000 fc50 	bl	d55f0 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d4d50:	a808      	add	r0, sp, #32
   d4d52:	f7ff fede 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
   d4d56:	a804      	add	r0, sp, #16
   d4d58:	f7ff fedb 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
}
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	b00d      	add	sp, #52	; 0x34
   d4d60:	bd30      	pop	{r4, r5, pc}
   d4d62:	bf00      	nop
   d4d64:	000da7f6 	.word	0x000da7f6
   d4d68:	2003e468 	.word	0x2003e468
   d4d6c:	000d4a21 	.word	0x000d4a21
   d4d70:	000d4af3 	.word	0x000d4af3
   d4d74:	000d4ab5 	.word	0x000d4ab5
   d4d78:	000d5827 	.word	0x000d5827

000d4d7c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
        val_(val) {
   d4d7c:	4b01      	ldr	r3, [pc, #4]	; (d4d84 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
   d4d7e:	2201      	movs	r2, #1
   d4d80:	701a      	strb	r2, [r3, #0]
}
   d4d82:	4770      	bx	lr
   d4d84:	2003e56c 	.word	0x2003e56c

000d4d88 <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4d88:	b538      	push	{r3, r4, r5, lr}
   d4d8a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4d8c:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4d8e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4d90:	b108      	cbz	r0, d4d96 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4d92:	f000 fca5 	bl	d56e0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4d96:	79a3      	ldrb	r3, [r4, #6]
   d4d98:	2b06      	cmp	r3, #6
   d4d9a:	bf0c      	ite	eq
   d4d9c:	2004      	moveq	r0, #4
   d4d9e:	2003      	movne	r0, #3
   d4da0:	fb10 f005 	smulbb	r0, r0, r5
   d4da4:	b280      	uxth	r0, r0
   d4da6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4da8:	f000 fc92 	bl	d56d0 <malloc>
   d4dac:	60e0      	str	r0, [r4, #12]
   d4dae:	b128      	cbz	r0, d4dbc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4db0:	88a2      	ldrh	r2, [r4, #4]
   d4db2:	2100      	movs	r1, #0
   d4db4:	f003 fca9 	bl	d870a <memset>
    numLEDs = n;
   d4db8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   d4dba:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   d4dbc:	80a0      	strh	r0, [r4, #4]
   d4dbe:	8060      	strh	r0, [r4, #2]
}
   d4dc0:	e7fb      	b.n	d4dba <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000d4dc2 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   d4dc2:	b510      	push	{r4, lr}
   d4dc4:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4dc6:	2101      	movs	r1, #1
   d4dc8:	79c0      	ldrb	r0, [r0, #7]
   d4dca:	f002 feed 	bl	d7ba8 <pinMode>
  digitalWrite(pin, LOW);
   d4dce:	79e0      	ldrb	r0, [r4, #7]
   d4dd0:	2100      	movs	r1, #0
   d4dd2:	f002 fefa 	bl	d7bca <digitalWrite>
  begun = true;
   d4dd6:	2301      	movs	r3, #1
   d4dd8:	7023      	strb	r3, [r4, #0]
}
   d4dda:	bd10      	pop	{r4, pc}

000d4ddc <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   d4dde:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4de0:	4605      	mov	r5, r0
   d4de2:	460c      	mov	r4, r1
    if (begun) {
   d4de4:	b11b      	cbz	r3, d4dee <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4de6:	79c0      	ldrb	r0, [r0, #7]
   d4de8:	2100      	movs	r1, #0
   d4dea:	f002 fedd 	bl	d7ba8 <pinMode>
    }
    pin = p;
    if (begun) {
   d4dee:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   d4df0:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4df2:	b15b      	cbz	r3, d4e0c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   d4df4:	b2a0      	uxth	r0, r4
   d4df6:	2101      	movs	r1, #1
   d4df8:	9001      	str	r0, [sp, #4]
   d4dfa:	f002 fed5 	bl	d7ba8 <pinMode>
        digitalWrite(p, LOW);
   d4dfe:	9801      	ldr	r0, [sp, #4]
   d4e00:	2100      	movs	r1, #0
    }
}
   d4e02:	b003      	add	sp, #12
   d4e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   d4e08:	f002 bedf 	b.w	d7bca <digitalWrite>
}
   d4e0c:	b003      	add	sp, #12
   d4e0e:	bd30      	pop	{r4, r5, pc}

000d4e10 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4e10:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4e12:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4e14:	4604      	mov	r4, r0
   d4e16:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4e18:	7183      	strb	r3, [r0, #6]
   d4e1a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d4e1e:	7005      	strb	r5, [r0, #0]
   d4e20:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   d4e22:	f7ff ffb1 	bl	d4d88 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4e26:	4620      	mov	r0, r4
   d4e28:	4631      	mov	r1, r6
   d4e2a:	f7ff ffd7 	bl	d4ddc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4e2e:	4620      	mov	r0, r4
   d4e30:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e34 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4e34:	68c3      	ldr	r3, [r0, #12]
   d4e36:	2b00      	cmp	r3, #0
   d4e38:	f000 818d 	beq.w	d5156 <_ZN17Adafruit_NeoPixel4showEv+0x322>
void Adafruit_NeoPixel::show(void) {
   d4e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e40:	7983      	ldrb	r3, [r0, #6]
   d4e42:	3b02      	subs	r3, #2
   d4e44:	b2db      	uxtb	r3, r3
   d4e46:	2b04      	cmp	r3, #4
   d4e48:	bf9c      	itt	ls
   d4e4a:	4ac8      	ldrls	r2, [pc, #800]	; (d516c <_ZN17Adafruit_NeoPixel4showEv+0x338>)
   d4e4c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4e50:	b087      	sub	sp, #28
   d4e52:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4e54:	bf88      	it	hi
   d4e56:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4e58:	f000 fa16 	bl	d5288 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4e5c:	692b      	ldr	r3, [r5, #16]
   d4e5e:	1ac0      	subs	r0, r0, r3
   d4e60:	42a0      	cmp	r0, r4
   d4e62:	d3f9      	bcc.n	d4e58 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4e64:	4ac2      	ldr	r2, [pc, #776]	; (d5170 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4e66:	88ab      	ldrh	r3, [r5, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4e68:	ca07      	ldmia	r2, {r0, r1, r2}
   d4e6a:	ac06      	add	r4, sp, #24
   d4e6c:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4e70:	9c03      	ldr	r4, [sp, #12]
   d4e72:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e76:	b91a      	cbnz	r2, d4e80 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e78:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4e7c:	2a00      	cmp	r2, #0
   d4e7e:	db7c      	blt.n	d4f7a <_ZN17Adafruit_NeoPixel4showEv+0x146>
   d4e80:	9c04      	ldr	r4, [sp, #16]
   d4e82:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e86:	b922      	cbnz	r2, d4e92 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e88:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4e8c:	2a00      	cmp	r2, #0
   d4e8e:	f2c0 8152 	blt.w	d5136 <_ZN17Adafruit_NeoPixel4showEv+0x302>
   d4e92:	9c05      	ldr	r4, [sp, #20]
   d4e94:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e98:	2a00      	cmp	r2, #0
   d4e9a:	f000 8137 	beq.w	d510c <_ZN17Adafruit_NeoPixel4showEv+0x2d8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e9e:	4bb5      	ldr	r3, [pc, #724]	; (d5174 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4ea0:	48b5      	ldr	r0, [pc, #724]	; (d5178 <_ZN17Adafruit_NeoPixel4showEv+0x344>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ea2:	681c      	ldr	r4, [r3, #0]
   d4ea4:	79eb      	ldrb	r3, [r5, #7]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4ea6:	68c1      	ldr	r1, [r0, #12]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ea8:	011a      	lsls	r2, r3, #4
   d4eaa:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   d4eae:	5ca7      	ldrb	r7, [r4, r2]
   d4eb0:	7873      	ldrb	r3, [r6, #1]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4eb2:	4cb2      	ldr	r4, [pc, #712]	; (d517c <_ZN17Adafruit_NeoPixel4showEv+0x348>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4eb4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   d4eb8:	60c1      	str	r1, [r0, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4eba:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ebc:	f003 031f 	and.w	r3, r3, #31
   d4ec0:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4ec4:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4ec6:	433a      	orrs	r2, r7
   d4ec8:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4eca:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4ecc:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d4ed0:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ed4:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   d4ed6:	2900      	cmp	r1, #0
   d4ed8:	d044      	beq.n	d4f64 <_ZN17Adafruit_NeoPixel4showEv+0x130>
   d4eda:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   d4ede:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4ee0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   d4ee4:	f818 cb01 	ldrb.w	ip, [r8], #1
   d4ee8:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4eea:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4eec:	6863      	ldr	r3, [r4, #4]
   d4eee:	1a9b      	subs	r3, r3, r2
   d4ef0:	2b46      	cmp	r3, #70	; 0x46
   d4ef2:	d9fb      	bls.n	d4eec <_ZN17Adafruit_NeoPixel4showEv+0xb8>
          cyc  = DWT->CYCCNT;
   d4ef4:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   d4ef6:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4efa:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   d4efe:	ea43 0307 	orr.w	r3, r3, r7
   d4f02:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   d4f06:	d02f      	beq.n	d4f68 <_ZN17Adafruit_NeoPixel4showEv+0x134>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4f08:	6863      	ldr	r3, [r4, #4]
   d4f0a:	1a9b      	subs	r3, r3, r2
   d4f0c:	2b28      	cmp	r3, #40	; 0x28
   d4f0e:	d9fb      	bls.n	d4f08 <_ZN17Adafruit_NeoPixel4showEv+0xd4>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4f10:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4f14:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   d4f16:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4f1a:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   d4f1e:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4f22:	d1e3      	bne.n	d4eec <_ZN17Adafruit_NeoPixel4showEv+0xb8>
      for(uint16_t n=0; n<numBytes; n++) {
   d4f24:	88ab      	ldrh	r3, [r5, #4]
   d4f26:	f10e 0e01 	add.w	lr, lr, #1
   d4f2a:	fa1f fe8e 	uxth.w	lr, lr
   d4f2e:	4573      	cmp	r3, lr
   d4f30:	d8d8      	bhi.n	d4ee4 <_ZN17Adafruit_NeoPixel4showEv+0xb0>
   d4f32:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   d4f36:	fb01 f103 	mul.w	r1, r1, r3
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4f3a:	6863      	ldr	r3, [r4, #4]
   d4f3c:	1a9b      	subs	r3, r3, r2
   d4f3e:	2b46      	cmp	r3, #70	; 0x46
   d4f40:	d9fb      	bls.n	d4f3a <_ZN17Adafruit_NeoPixel4showEv+0x106>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4f42:	6863      	ldr	r3, [r4, #4]
   d4f44:	eba3 0909 	sub.w	r9, r3, r9
   d4f48:	4589      	cmp	r9, r1
   d4f4a:	f0c0 80d9 	bcc.w	d5100 <_ZN17Adafruit_NeoPixel4showEv+0x2cc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4f4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4f52:	f000 f991 	bl	d5278 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   d4f56:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4f58:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d4f5c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   d4f60:	2900      	cmp	r1, #0
   d4f62:	d1ba      	bne.n	d4eda <_ZN17Adafruit_NeoPixel4showEv+0xa6>
      uint32_t cyc = 0;
   d4f64:	460a      	mov	r2, r1
   d4f66:	e7e8      	b.n	d4f3a <_ZN17Adafruit_NeoPixel4showEv+0x106>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4f68:	6863      	ldr	r3, [r4, #4]
   d4f6a:	1a9b      	subs	r3, r3, r2
   d4f6c:	2b11      	cmp	r3, #17
   d4f6e:	d8cf      	bhi.n	d4f10 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
   d4f70:	6863      	ldr	r3, [r4, #4]
   d4f72:	1a9b      	subs	r3, r3, r2
   d4f74:	2b11      	cmp	r3, #17
   d4f76:	d9f7      	bls.n	d4f68 <_ZN17Adafruit_NeoPixel4showEv+0x134>
   d4f78:	e7ca      	b.n	d4f10 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f7a:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f7e:	2a00      	cmp	r2, #0
   d4f80:	f6bf af7e 	bge.w	d4e80 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f84:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f88:	2a00      	cmp	r2, #0
   d4f8a:	f6bf af79 	bge.w	d4e80 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4f8e:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f92:	2a00      	cmp	r2, #0
   d4f94:	f6bf af74 	bge.w	d4e80 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4f98:	011b      	lsls	r3, r3, #4
   d4f9a:	3304      	adds	r3, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4f9c:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4f9e:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4fa0:	f000 fb96 	bl	d56d0 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4fa4:	2800      	cmp	r0, #0
   d4fa6:	f43f af7a 	beq.w	d4e9e <_ZN17Adafruit_NeoPixel4showEv+0x6a>
    for(uint16_t n=0; n<numBytes; n++) {
   d4faa:	88ab      	ldrh	r3, [r5, #4]
   d4fac:	2b00      	cmp	r3, #0
   d4fae:	f000 80da 	beq.w	d5166 <_ZN17Adafruit_NeoPixel4showEv+0x332>
      uint8_t pix = pixels[n];
   d4fb2:	68ea      	ldr	r2, [r5, #12]
   d4fb4:	3b01      	subs	r3, #1
   d4fb6:	fa12 fe83 	uxtah	lr, r2, r3
   d4fba:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   d4fbe:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4fc0:	f248 0206 	movw	r2, #32774	; 0x8006
   d4fc4:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   d4fc8:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4fcc:	f017 0f80 	tst.w	r7, #128	; 0x80
   d4fd0:	bf0c      	ite	eq
   d4fd2:	4690      	moveq	r8, r2
   d4fd4:	4688      	movne	r8, r1
   d4fd6:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
        pos++;
   d4fda:	f103 0801 	add.w	r8, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4fde:	f017 0f40 	tst.w	r7, #64	; 0x40
        pos++;
   d4fe2:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4fe6:	bf0c      	ite	eq
   d4fe8:	4693      	moveq	fp, r2
   d4fea:	468b      	movne	fp, r1
   d4fec:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   d4ff0:	f103 0802 	add.w	r8, r3, #2
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4ff4:	f017 0f20 	tst.w	r7, #32
        pos++;
   d4ff8:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4ffc:	bf0c      	ite	eq
   d4ffe:	4692      	moveq	sl, r2
   d5000:	468a      	movne	sl, r1
   d5002:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
        pos++;
   d5006:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d500a:	f017 0f10 	tst.w	r7, #16
        pos++;
   d500e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5012:	bf0c      	ite	eq
   d5014:	4691      	moveq	r9, r2
   d5016:	4689      	movne	r9, r1
   d5018:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d501c:	f103 0904 	add.w	r9, r3, #4
   d5020:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5024:	f017 0f08 	tst.w	r7, #8
        pos++;
   d5028:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d502c:	bf0c      	ite	eq
   d502e:	4692      	moveq	sl, r2
   d5030:	468a      	movne	sl, r1
        pos++;
   d5032:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5036:	f017 0f04 	tst.w	r7, #4
   d503a:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
   d503e:	bf0c      	ite	eq
   d5040:	4691      	moveq	r9, r2
   d5042:	4689      	movne	r9, r1
   d5044:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d5048:	f103 0806 	add.w	r8, r3, #6
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d504c:	f017 0f02 	tst.w	r7, #2
        pos++;
   d5050:	fa1f f888 	uxth.w	r8, r8
   d5054:	f103 0608 	add.w	r6, r3, #8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5058:	bf0c      	ite	eq
   d505a:	4691      	moveq	r9, r2
   d505c:	4689      	movne	r9, r1
        pos++;
   d505e:	3307      	adds	r3, #7
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5060:	07ff      	lsls	r7, r7, #31
   d5062:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d5066:	9601      	str	r6, [sp, #4]
   d5068:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d506a:	d575      	bpl.n	d5158 <_ZN17Adafruit_NeoPixel4showEv+0x324>
    for(uint16_t n=0; n<numBytes; n++) {
   d506c:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d506e:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
        pos++;
   d5072:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    for(uint16_t n=0; n<numBytes; n++) {
   d5076:	d1a7      	bne.n	d4fc8 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d5078:	1c59      	adds	r1, r3, #1
   d507a:	3302      	adds	r3, #2
   d507c:	b289      	uxth	r1, r1
   d507e:	b29b      	uxth	r3, r3
   d5080:	0049      	lsls	r1, r1, #1
   d5082:	005b      	lsls	r3, r3, #1
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d5084:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d5086:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   d508a:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d508c:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d508e:	4939      	ldr	r1, [pc, #228]	; (d5174 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d5090:	52c7      	strh	r7, [r0, r3]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d5092:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d5094:	f04f 0c14 	mov.w	ip, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d5098:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d509c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d50a0:	f8c4 c508 	str.w	ip, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d50a4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   d50a8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d50ac:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d50b0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   d50b4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d50b8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d50bc:	79eb      	ldrb	r3, [r5, #7]
   d50be:	680e      	ldr	r6, [r1, #0]
   d50c0:	eb06 1703 	add.w	r7, r6, r3, lsl #4
   d50c4:	0119      	lsls	r1, r3, #4
   d50c6:	787b      	ldrb	r3, [r7, #1]
   d50c8:	5c71      	ldrb	r1, [r6, r1]
   d50ca:	f003 031f 	and.w	r3, r3, #31
   d50ce:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    pwm->ENABLE = 1;
   d50d2:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d50d4:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   d50d8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   d50dc:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d50e0:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   d50e2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d50e6:	2b00      	cmp	r3, #0
   d50e8:	d0fb      	beq.n	d50e2 <_ZN17Adafruit_NeoPixel4showEv+0x2ae>
    pwm->EVENTS_SEQEND[0] = 0;
   d50ea:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d50ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   d50f0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   d50f4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d50f8:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   d50fc:	f000 faf0 	bl	d56e0 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5100:	f000 f8c2 	bl	d5288 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d5104:	6128      	str	r0, [r5, #16]
}
   d5106:	b007      	add	sp, #28
   d5108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d510c:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d5110:	2a00      	cmp	r2, #0
   d5112:	f6bf aec4 	bge.w	d4e9e <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5116:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d511a:	2a00      	cmp	r2, #0
   d511c:	f6bf aebf 	bge.w	d4e9e <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5120:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5124:	2a00      	cmp	r2, #0
   d5126:	f6bf aeba 	bge.w	d4e9e <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d512a:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d512e:	2a00      	cmp	r2, #0
   d5130:	f6bf aeb5 	bge.w	d4e9e <_ZN17Adafruit_NeoPixel4showEv+0x6a>
   d5134:	e730      	b.n	d4f98 <_ZN17Adafruit_NeoPixel4showEv+0x164>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5136:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d513a:	2a00      	cmp	r2, #0
   d513c:	f6bf aea9 	bge.w	d4e92 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5140:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5144:	2a00      	cmp	r2, #0
   d5146:	f6bf aea4 	bge.w	d4e92 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d514a:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d514e:	2a00      	cmp	r2, #0
   d5150:	f6bf ae9f 	bge.w	d4e92 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
   d5154:	e720      	b.n	d4f98 <_ZN17Adafruit_NeoPixel4showEv+0x164>
   d5156:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   d5158:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d515a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        pos++;
   d515e:	b2b3      	uxth	r3, r6
    for(uint16_t n=0; n<numBytes; n++) {
   d5160:	f47f af32 	bne.w	d4fc8 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d5164:	e788      	b.n	d5078 <_ZN17Adafruit_NeoPixel4showEv+0x244>
   d5166:	2304      	movs	r3, #4
   d5168:	2102      	movs	r1, #2
   d516a:	e78b      	b.n	d5084 <_ZN17Adafruit_NeoPixel4showEv+0x250>
   d516c:	000da828 	.word	0x000da828
   d5170:	000da81c 	.word	0x000da81c
   d5174:	2003e574 	.word	0x2003e574
   d5178:	e000edf0 	.word	0xe000edf0
   d517c:	e0001000 	.word	0xe0001000

000d5180 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d5180:	8843      	ldrh	r3, [r0, #2]
   d5182:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d5184:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d5186:	d926      	bls.n	d51d6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d5188:	7a05      	ldrb	r5, [r0, #8]
   d518a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d518e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d5192:	b2d6      	uxtb	r6, r2
   d5194:	b13d      	cbz	r5, d51a6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   d5196:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d5198:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d519a:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
   d519c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d51a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d51a4:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d51a6:	f890 c006 	ldrb.w	ip, [r0, #6]
   d51aa:	68c7      	ldr	r7, [r0, #12]
   d51ac:	f1bc 0f06 	cmp.w	ip, #6
   d51b0:	bf0c      	ite	eq
   d51b2:	2504      	moveq	r5, #4
   d51b4:	2503      	movne	r5, #3
   d51b6:	4369      	muls	r1, r5
   d51b8:	f1ac 0c02 	sub.w	ip, ip, #2
   d51bc:	187d      	adds	r5, r7, r1
    switch(type) {
   d51be:	f1bc 0f06 	cmp.w	ip, #6
   d51c2:	d81d      	bhi.n	d5200 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   d51c4:	e8df f00c 	tbb	[pc, ip]
   d51c8:	04081c04 	.word	0x04081c04
   d51cc:	040f      	.short	0x040f
   d51ce:	04          	.byte	0x04
   d51cf:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d51d0:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d51d2:	706b      	strb	r3, [r5, #1]
          *p = b;
   d51d4:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
   d51d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   d51d8:	2bfe      	cmp	r3, #254	; 0xfe
   d51da:	bf28      	it	cs
   d51dc:	23fe      	movcs	r3, #254	; 0xfe
   d51de:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d51e0:	706e      	strb	r6, [r5, #1]
          *p = g;
   d51e2:	70ac      	strb	r4, [r5, #2]
        } break;
   d51e4:	e7f7      	b.n	d51d6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
   d51e6:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d51e8:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d51ea:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d51ec:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   d51ee:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   d51f0:	b913      	cbnz	r3, d51f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   d51f2:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   d51f4:	70ea      	strb	r2, [r5, #3]
        } break;
   d51f6:	e7ee      	b.n	d51d6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
   d51f8:	435a      	muls	r2, r3
   d51fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d51fe:	e7f9      	b.n	d51f4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   d5200:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d5202:	706c      	strb	r4, [r5, #1]
          *p = b;
   d5204:	70ae      	strb	r6, [r5, #2]
}
   d5206:	e7e6      	b.n	d51d6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

000d5208 <_ZN17Adafruit_NeoPixel5ColorEhhhh>:
}

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d5208:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d520c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
}
   d5210:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d5214:	4770      	bx	lr
	...

000d5218 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d5218:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d521a:	f000 f845 	bl	d52a8 <HAL_Pin_Map>
   d521e:	4b01      	ldr	r3, [pc, #4]	; (d5224 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d5220:	6018      	str	r0, [r3, #0]
}
   d5222:	bd08      	pop	{r3, pc}
   d5224:	2003e574 	.word	0x2003e574

000d5228 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <os_mutex_recursive_create+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030248 	.word	0x00030248

000d5238 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <os_mutex_recursive_destroy+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030248 	.word	0x00030248

000d5248 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <os_mutex_recursive_lock+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030248 	.word	0x00030248

000d5258 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <os_mutex_recursive_unlock+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030248 	.word	0x00030248

000d5268 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <HAL_RNG_GetRandomNumber+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	685b      	ldr	r3, [r3, #4]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030218 	.word	0x00030218

000d5278 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <HAL_Delay_Microseconds+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	68db      	ldr	r3, [r3, #12]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030218 	.word	0x00030218

000d5288 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	691b      	ldr	r3, [r3, #16]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030218 	.word	0x00030218

000d5298 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	695b      	ldr	r3, [r3, #20]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030218 	.word	0x00030218

000d52a8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <HAL_Pin_Map+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	681b      	ldr	r3, [r3, #0]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	0003022c 	.word	0x0003022c

000d52b8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <HAL_Validate_Pin_Function+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	685b      	ldr	r3, [r3, #4]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	0003022c 	.word	0x0003022c

000d52c8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <HAL_Pin_Mode+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	689b      	ldr	r3, [r3, #8]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	0003022c 	.word	0x0003022c

000d52d8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <HAL_Get_Pin_Mode+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	68db      	ldr	r3, [r3, #12]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	0003022c 	.word	0x0003022c

000d52e8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <HAL_GPIO_Write+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	691b      	ldr	r3, [r3, #16]
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	0003022c 	.word	0x0003022c

000d52f8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <HAL_GPIO_Read+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	695b      	ldr	r3, [r3, #20]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	0003022c 	.word	0x0003022c

000d5308 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <hal_adc_read+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	0003022c 	.word	0x0003022c

000d5318 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <hal_i2c_write+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	6a1b      	ldr	r3, [r3, #32]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030228 	.word	0x00030228

000d5328 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <hal_i2c_available+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030228 	.word	0x00030228

000d5338 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <hal_i2c_read+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030228 	.word	0x00030228

000d5348 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <hal_i2c_peek+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030228 	.word	0x00030228

000d5358 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <hal_i2c_flush+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030228 	.word	0x00030228

000d5368 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <hal_i2c_is_enabled+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030228 	.word	0x00030228

000d5378 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <hal_i2c_init+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	00030228 	.word	0x00030228

000d5388 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <inet_inet_ntop+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	695b      	ldr	r3, [r3, #20]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	00030264 	.word	0x00030264

000d5398 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <netdb_freeaddrinfo+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	689b      	ldr	r3, [r3, #8]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	00030268 	.word	0x00030268

000d53a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <netdb_getaddrinfo+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	68db      	ldr	r3, [r3, #12]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	00030268 	.word	0x00030268

000d53b8 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <HAL_Tone_Start+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	681b      	ldr	r3, [r3, #0]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	00030224 	.word	0x00030224

000d53c8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <hal_spi_init+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	69db      	ldr	r3, [r3, #28]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030230 	.word	0x00030230

000d53d8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <hal_spi_is_enabled+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	6a1b      	ldr	r3, [r3, #32]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030230 	.word	0x00030230

000d53e8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <hal_usart_init+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	681b      	ldr	r3, [r3, #0]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003023c 	.word	0x0003023c

000d53f8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <hal_usart_end+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	689b      	ldr	r3, [r3, #8]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003023c 	.word	0x0003023c

000d5408 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <hal_usart_write+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	68db      	ldr	r3, [r3, #12]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	0003023c 	.word	0x0003023c

000d5418 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <hal_usart_available+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	691b      	ldr	r3, [r3, #16]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	0003023c 	.word	0x0003023c

000d5428 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <hal_usart_read+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	695b      	ldr	r3, [r3, #20]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	0003023c 	.word	0x0003023c

000d5438 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <hal_usart_peek+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	699b      	ldr	r3, [r3, #24]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	0003023c 	.word	0x0003023c

000d5448 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <hal_usart_flush+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	69db      	ldr	r3, [r3, #28]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	0003023c 	.word	0x0003023c

000d5458 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <hal_usart_is_enabled+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	6a1b      	ldr	r3, [r3, #32]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	0003023c 	.word	0x0003023c

000d5468 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <hal_usart_available_data_for_write+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	0003023c 	.word	0x0003023c

000d5478 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <hal_usart_begin_config+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	0003023c 	.word	0x0003023c

000d5488 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <HAL_USB_USART_Init+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	681b      	ldr	r3, [r3, #0]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	0003024c 	.word	0x0003024c

000d5498 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <HAL_USB_USART_Begin+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	685b      	ldr	r3, [r3, #4]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	0003024c 	.word	0x0003024c

000d54a8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <HAL_USB_USART_End+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	689b      	ldr	r3, [r3, #8]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	0003024c 	.word	0x0003024c

000d54b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <HAL_USB_USART_Available_Data+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	691b      	ldr	r3, [r3, #16]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	0003024c 	.word	0x0003024c

000d54c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	695b      	ldr	r3, [r3, #20]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	0003024c 	.word	0x0003024c

000d54d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <HAL_USB_USART_Receive_Data+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	699b      	ldr	r3, [r3, #24]
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	0003024c 	.word	0x0003024c

000d54e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <HAL_USB_USART_Send_Data+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	69db      	ldr	r3, [r3, #28]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	0003024c 	.word	0x0003024c

000d54f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <HAL_USB_USART_Flush_Data+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6a1b      	ldr	r3, [r3, #32]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	0003024c 	.word	0x0003024c

000d5508 <wlan_scan>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <wlan_scan+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030274 	.word	0x00030274

000d5518 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <panic_+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030260 	.word	0x00030260

000d5528 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <log_level_name+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030260 	.word	0x00030260

000d5538 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <log_set_callbacks+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030260 	.word	0x00030260

000d5548 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <set_system_mode+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	685b      	ldr	r3, [r3, #4]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030220 	.word	0x00030220

000d5558 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <system_delay_ms+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	695b      	ldr	r3, [r3, #20]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	00030220 	.word	0x00030220

000d5568 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <system_thread_set_state+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	00030220 	.word	0x00030220

000d5578 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <application_thread_current+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030220 	.word	0x00030220

000d5588 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <application_thread_invoke+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030220 	.word	0x00030220

000d5598 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b03      	ldr	r3, [pc, #12]	; (d55a8 <system_ctrl_set_app_request_handler+0x10>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55a2:	9301      	str	r3, [sp, #4]
   d55a4:	bd08      	pop	{r3, pc}
   d55a6:	0000      	.short	0x0000
   d55a8:	00030220 	.word	0x00030220

000d55ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b03      	ldr	r3, [pc, #12]	; (d55bc <system_ctrl_set_result+0x10>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55b6:	9301      	str	r3, [sp, #4]
   d55b8:	bd08      	pop	{r3, pc}
   d55ba:	0000      	.short	0x0000
   d55bc:	00030220 	.word	0x00030220

000d55c0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <spark_cloud_flag_connected+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	695b      	ldr	r3, [r3, #20]
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	00030244 	.word	0x00030244

000d55d0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <spark_deviceID+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	69db      	ldr	r3, [r3, #28]
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	00030244 	.word	0x00030244

000d55e0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <spark_send_event+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	6a1b      	ldr	r3, [r3, #32]
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	00030244 	.word	0x00030244

000d55f0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <spark_subscribe+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	00030244 	.word	0x00030244

000d5600 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	00030244 	.word	0x00030244

000d5610 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <network_connect+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	685b      	ldr	r3, [r3, #4]
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	00030240 	.word	0x00030240

000d5620 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <network_connecting+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	689b      	ldr	r3, [r3, #8]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	00030240 	.word	0x00030240

000d5630 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <network_disconnect+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	68db      	ldr	r3, [r3, #12]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	00030240 	.word	0x00030240

000d5640 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <network_ready+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	691b      	ldr	r3, [r3, #16]
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	00030240 	.word	0x00030240

000d5650 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <network_on+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	695b      	ldr	r3, [r3, #20]
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030240 	.word	0x00030240

000d5660 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <network_off+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	699b      	ldr	r3, [r3, #24]
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	00030240 	.word	0x00030240

000d5670 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <network_listen+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	69db      	ldr	r3, [r3, #28]
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	00030240 	.word	0x00030240

000d5680 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <network_listening+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	6a1b      	ldr	r3, [r3, #32]
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	00030240 	.word	0x00030240

000d5690 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <network_set_listen_timeout+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	00030240 	.word	0x00030240

000d56a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <network_get_listen_timeout+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	00030240 	.word	0x00030240

000d56b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <network_is_on+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	00030240 	.word	0x00030240

000d56c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <network_is_off+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	00030240 	.word	0x00030240

000d56d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <malloc+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	681b      	ldr	r3, [r3, #0]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	0003021c 	.word	0x0003021c

000d56e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <free+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	685b      	ldr	r3, [r3, #4]
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	0003021c 	.word	0x0003021c

000d56f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <realloc+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	689b      	ldr	r3, [r3, #8]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	0003021c 	.word	0x0003021c

000d5700 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <snprintf+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	69db      	ldr	r3, [r3, #28]
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	0003021c 	.word	0x0003021c

000d5710 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <vsnprintf+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	0003021c 	.word	0x0003021c

000d5720 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <abort+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	0003021c 	.word	0x0003021c

000d5730 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <_malloc_r+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	0003021c 	.word	0x0003021c

000d5740 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <newlib_impure_ptr_callback+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	0003021c 	.word	0x0003021c

000d5750 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5750:	2100      	movs	r1, #0
   d5752:	f7ff bf01 	b.w	d5558 <system_delay_ms>

000d5756 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5756:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5758:	6883      	ldr	r3, [r0, #8]
   d575a:	4604      	mov	r4, r0
   d575c:	b90b      	cbnz	r3, d5762 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d575e:	f002 fabb 	bl	d7cd8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5762:	68c3      	ldr	r3, [r0, #12]
   d5764:	4798      	blx	r3
      if (_M_manager)
   d5766:	68a3      	ldr	r3, [r4, #8]
   d5768:	b11b      	cbz	r3, d5772 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d576a:	2203      	movs	r2, #3
   d576c:	4621      	mov	r1, r4
   d576e:	4620      	mov	r0, r4
   d5770:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5772:	4620      	mov	r0, r4
   d5774:	2110      	movs	r1, #16
}
   d5776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d577a:	f002 baa7 	b.w	d7ccc <_ZdlPvj>

000d577e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d577e:	680b      	ldr	r3, [r1, #0]
   d5780:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5782:	b113      	cbz	r3, d578a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5784:	685a      	ldr	r2, [r3, #4]
   d5786:	3201      	adds	r2, #1
   d5788:	605a      	str	r2, [r3, #4]
      }
   d578a:	4770      	bx	lr

000d578c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d578c:	4802      	ldr	r0, [pc, #8]	; (d5798 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d578e:	2300      	movs	r3, #0
   d5790:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5792:	f7ff bd49 	b.w	d5228 <os_mutex_recursive_create>
   d5796:	bf00      	nop
   d5798:	2003e578 	.word	0x2003e578

000d579c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d579c:	4770      	bx	lr

000d579e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d579e:	2000      	movs	r0, #0
   d57a0:	4770      	bx	lr

000d57a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57a2:	b510      	push	{r4, lr}
   d57a4:	2110      	movs	r1, #16
   d57a6:	4604      	mov	r4, r0
   d57a8:	f002 fa90 	bl	d7ccc <_ZdlPvj>
   d57ac:	4620      	mov	r0, r4
   d57ae:	bd10      	pop	{r4, pc}

000d57b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d57b0:	b508      	push	{r3, lr}
      { delete this; }
   d57b2:	f7ff fff6 	bl	d57a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d57b6:	bd08      	pop	{r3, pc}

000d57b8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d57b8:	b530      	push	{r4, r5, lr}
        type_(type) {
   d57ba:	2200      	movs	r2, #0
   d57bc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d57c0:	6002      	str	r2, [r0, #0]
   d57c2:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57c4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d57c6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d57c8:	680c      	ldr	r4, [r1, #0]
   d57ca:	8085      	strh	r5, [r0, #4]
   d57cc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d57ce:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d57d0:	bd30      	pop	{r4, r5, pc}

000d57d2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d57d2:	b510      	push	{r4, lr}
   d57d4:	4604      	mov	r4, r0
    free((void*)msg_);
   d57d6:	6800      	ldr	r0, [r0, #0]
   d57d8:	f7ff ff82 	bl	d56e0 <free>
}
   d57dc:	4620      	mov	r0, r4
   d57de:	bd10      	pop	{r4, pc}

000d57e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d57e0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d57e2:	68c4      	ldr	r4, [r0, #12]
   d57e4:	b1f4      	cbz	r4, d5824 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d57e6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d57e8:	2b02      	cmp	r3, #2
   d57ea:	d103      	bne.n	d57f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d57ec:	f104 000c 	add.w	r0, r4, #12
   d57f0:	f7ff ffef 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d57f4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d57f6:	b135      	cbz	r5, d5806 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d57f8:	4628      	mov	r0, r5
   d57fa:	f7ff f98a 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
   d57fe:	2110      	movs	r1, #16
   d5800:	4628      	mov	r0, r5
   d5802:	f002 fa63 	bl	d7ccc <_ZdlPvj>
   d5806:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5808:	b135      	cbz	r5, d5818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d580a:	4628      	mov	r0, r5
   d580c:	f7ff f981 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
   d5810:	2110      	movs	r1, #16
   d5812:	4628      	mov	r0, r5
   d5814:	f002 fa5a 	bl	d7ccc <_ZdlPvj>
   d5818:	4620      	mov	r0, r4
   d581a:	2114      	movs	r1, #20
   d581c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5820:	f002 ba54 	b.w	d7ccc <_ZdlPvj>
   d5824:	bd38      	pop	{r3, r4, r5, pc}

000d5826 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d5826:	b507      	push	{r0, r1, r2, lr}
   d5828:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   d582c:	6882      	ldr	r2, [r0, #8]
   d582e:	b90a      	cbnz	r2, d5834 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d5830:	f002 fa52 	bl	d7cd8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5834:	68c3      	ldr	r3, [r0, #12]
   d5836:	aa01      	add	r2, sp, #4
   d5838:	4669      	mov	r1, sp
   d583a:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d583c:	b003      	add	sp, #12
   d583e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5842:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5844:	460e      	mov	r6, r1
   d5846:	4604      	mov	r4, r0
   d5848:	f856 3b04 	ldr.w	r3, [r6], #4
   d584c:	9300      	str	r3, [sp, #0]
   d584e:	460d      	mov	r5, r1
   d5850:	a801      	add	r0, sp, #4
   d5852:	4631      	mov	r1, r6
   d5854:	f7ff ff93 	bl	d577e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5858:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d585a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d585c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d585e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5860:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5862:	2300      	movs	r3, #0
   d5864:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5866:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5868:	f7fe fde8 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d586c:	4630      	mov	r0, r6
   d586e:	f7fe fde5 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5872:	4628      	mov	r0, r5
   d5874:	2108      	movs	r1, #8
   d5876:	f002 fa29 	bl	d7ccc <_ZdlPvj>
        return p;
    }
   d587a:	4620      	mov	r0, r4
   d587c:	b002      	add	sp, #8
   d587e:	bd70      	pop	{r4, r5, r6, pc}

000d5880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5880:	b513      	push	{r0, r1, r4, lr}
   d5882:	460b      	mov	r3, r1
   d5884:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5886:	e9d0 0100 	ldrd	r0, r1, [r0]
   d588a:	466c      	mov	r4, sp
   d588c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5890:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5894:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5898:	e894 0003 	ldmia.w	r4, {r0, r1}
   d589c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d58a0:	b002      	add	sp, #8
   d58a2:	bd10      	pop	{r4, pc}

000d58a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d58a4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d58a6:	b510      	push	{r4, lr}
      if (_M_empty())
   d58a8:	b90a      	cbnz	r2, d58ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d58aa:	f002 fa15 	bl	d7cd8 <_ZSt25__throw_bad_function_callv>
    }
   d58ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58b2:	68c3      	ldr	r3, [r0, #12]
   d58b4:	4718      	bx	r3

000d58b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d58b6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d58b8:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d58ba:	f100 0110 	add.w	r1, r0, #16
   d58be:	f7ff fff1 	bl	d58a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d58c2:	bd08      	pop	{r3, pc}

000d58c4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d58c4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d58c6:	b510      	push	{r4, lr}
      if (_M_empty())
   d58c8:	b90a      	cbnz	r2, d58ce <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d58ca:	f002 fa05 	bl	d7cd8 <_ZSt25__throw_bad_function_callv>
    }
   d58ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58d2:	68c3      	ldr	r3, [r0, #12]
   d58d4:	4718      	bx	r3

000d58d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d58d6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d58d8:	6800      	ldr	r0, [r0, #0]
   d58da:	f100 0110 	add.w	r1, r0, #16
   d58de:	f7ff fff1 	bl	d58c4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d58e2:	bd08      	pop	{r3, pc}

000d58e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d58e4:	b538      	push	{r3, r4, r5, lr}
   d58e6:	2300      	movs	r3, #0
   d58e8:	4604      	mov	r4, r0
   d58ea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58ec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d58ee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58f0:	f7fe fbd1 	bl	d4096 <_Znwj>
   d58f4:	b128      	cbz	r0, d5902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d58f6:	2301      	movs	r3, #1
   d58f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d58fc:	4b02      	ldr	r3, [pc, #8]	; (d5908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d58fe:	6003      	str	r3, [r0, #0]
   d5900:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5902:	6020      	str	r0, [r4, #0]
	}
   d5904:	4620      	mov	r0, r4
   d5906:	bd38      	pop	{r3, r4, r5, pc}
   d5908:	000da844 	.word	0x000da844

000d590c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d590c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d590e:	2300      	movs	r3, #0
   d5910:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5912:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5914:	4604      	mov	r4, r0
   d5916:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5918:	b12b      	cbz	r3, d5926 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d591a:	2202      	movs	r2, #2
   d591c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d591e:	68eb      	ldr	r3, [r5, #12]
   d5920:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5922:	68ab      	ldr	r3, [r5, #8]
   d5924:	60a3      	str	r3, [r4, #8]
    }
   d5926:	4620      	mov	r0, r4
   d5928:	bd38      	pop	{r3, r4, r5, pc}
	...

000d592c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d592c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d592e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5930:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5932:	4668      	mov	r0, sp
   d5934:	f7ff ff40 	bl	d57b8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5938:	f04f 0302 	mov.w	r3, #2
   d593c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5940:	2a00      	cmp	r2, #0
   d5942:	d103      	bne.n	d594c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5944:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5948:	2900      	cmp	r1, #0
   d594a:	d1f7      	bne.n	d593c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d594c:	d125      	bne.n	d599a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d594e:	f104 050c 	add.w	r5, r4, #12
   d5952:	4669      	mov	r1, sp
   d5954:	4628      	mov	r0, r5
   d5956:	f7ff ff2f 	bl	d57b8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d595a:	f3bf 8f5b 	dmb	ish
   d595e:	2301      	movs	r3, #1
   d5960:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5962:	2000      	movs	r0, #0
   d5964:	f104 0308 	add.w	r3, r4, #8
   d5968:	f3bf 8f5b 	dmb	ish
   d596c:	e853 6f00 	ldrex	r6, [r3]
   d5970:	e843 0200 	strex	r2, r0, [r3]
   d5974:	2a00      	cmp	r2, #0
   d5976:	d1f9      	bne.n	d596c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5978:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d597c:	b16e      	cbz	r6, d599a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d597e:	f7ff fdfb 	bl	d5578 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5982:	b178      	cbz	r0, d59a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5984:	4629      	mov	r1, r5
   d5986:	4630      	mov	r0, r6
   d5988:	f7ff ff8c 	bl	d58a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d598c:	4630      	mov	r0, r6
   d598e:	f7ff f8c0 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5992:	2110      	movs	r1, #16
   d5994:	4630      	mov	r0, r6
   d5996:	f002 f999 	bl	d7ccc <_ZdlPvj>
        p_->setError(std::move(error));
   d599a:	4668      	mov	r0, sp
   d599c:	f7ff ff19 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
    }
   d59a0:	b009      	add	sp, #36	; 0x24
   d59a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d59a4:	4631      	mov	r1, r6
   d59a6:	a802      	add	r0, sp, #8
   d59a8:	f7ff ffb0 	bl	d590c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d59ac:	68e0      	ldr	r0, [r4, #12]
   d59ae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d59b2:	b108      	cbz	r0, d59b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d59b4:	f002 ff00 	bl	d87b8 <strdup>
        type_(type) {
   d59b8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d59ba:	2010      	movs	r0, #16
   d59bc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d59c0:	f7fe fb69 	bl	d4096 <_Znwj>
   d59c4:	4605      	mov	r5, r0
   d59c6:	b1e8      	cbz	r0, d5a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d59c8:	2700      	movs	r7, #0
   d59ca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59cc:	2018      	movs	r0, #24
   d59ce:	f7fe fb62 	bl	d4096 <_Znwj>
   d59d2:	4604      	mov	r4, r0
   d59d4:	b188      	cbz	r0, d59fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d59d6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d59d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d59da:	a802      	add	r0, sp, #8
   d59dc:	f7ff ff50 	bl	d5880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d59e2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d59e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d59e8:	9204      	str	r2, [sp, #16]
   d59ea:	a906      	add	r1, sp, #24
   d59ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d59ee:	60e3      	str	r3, [r4, #12]
   d59f0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d59f4:	9205      	str	r2, [sp, #20]
   d59f6:	f7ff fedf 	bl	d57b8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d59fa:	4b08      	ldr	r3, [pc, #32]	; (d5a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d59fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d59fe:	4b08      	ldr	r3, [pc, #32]	; (d5a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a00:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5a02:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5a04:	a806      	add	r0, sp, #24
   d5a06:	f7ff fee4 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5a0a:	a802      	add	r0, sp, #8
   d5a0c:	f7ff f881 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a10:	2200      	movs	r2, #0
   d5a12:	4629      	mov	r1, r5
   d5a14:	4803      	ldr	r0, [pc, #12]	; (d5a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5a16:	f7ff fdb7 	bl	d5588 <application_thread_invoke>
   d5a1a:	e7b7      	b.n	d598c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5a1c:	000d58b7 	.word	0x000d58b7
   d5a20:	000d5b4d 	.word	0x000d5b4d
   d5a24:	000d5757 	.word	0x000d5757

000d5a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a2c:	b08a      	sub	sp, #40	; 0x28
   d5a2e:	4605      	mov	r5, r0
   d5a30:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5a34:	460c      	mov	r4, r1
   d5a36:	4617      	mov	r7, r2
   d5a38:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a3a:	f7ff fdc1 	bl	d55c0 <spark_cloud_flag_connected>
   d5a3e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5a40:	4682      	mov	sl, r0
   d5a42:	bb38      	cbnz	r0, d5a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5a44:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5a48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a4a:	a905      	add	r1, sp, #20
   d5a4c:	4630      	mov	r0, r6
   d5a4e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5a52:	f7ff feb1 	bl	d57b8 <_ZN8particle5ErrorC1EOS0_>
   d5a56:	2014      	movs	r0, #20
   d5a58:	f7fe fb1d 	bl	d4096 <_Znwj>
   d5a5c:	4604      	mov	r4, r0
   d5a5e:	b148      	cbz	r0, d5a74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5a60:	2302      	movs	r3, #2
   d5a62:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a64:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5a66:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a6a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5a6c:	4631      	mov	r1, r6
   d5a6e:	300c      	adds	r0, #12
   d5a70:	f7ff fea2 	bl	d57b8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5a74:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5a76:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5a78:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5a7c:	f7ff ff32 	bl	d58e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a80:	4630      	mov	r0, r6
   d5a82:	f7ff fea6 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5a86:	a805      	add	r0, sp, #20
   d5a88:	f7ff fea3 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5a8c:	4628      	mov	r0, r5
   d5a8e:	b00a      	add	sp, #40	; 0x28
   d5a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5a94:	230c      	movs	r3, #12
   d5a96:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5a9a:	2014      	movs	r0, #20
   d5a9c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5aa0:	9307      	str	r3, [sp, #28]
   d5aa2:	f7fe faf8 	bl	d4096 <_Znwj>
   d5aa6:	4601      	mov	r1, r0
   d5aa8:	b128      	cbz	r0, d5ab6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5aaa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5aae:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ab2:	f880 a001 	strb.w	sl, [r0, #1]
   d5ab6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5ab8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5aba:	f7ff ff13 	bl	d58e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5abe:	4b22      	ldr	r3, [pc, #136]	; (d5b48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5ac0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5ac2:	2008      	movs	r0, #8
   d5ac4:	f7fe fae7 	bl	d4096 <_Znwj>
   d5ac8:	4682      	mov	sl, r0
   d5aca:	b128      	cbz	r0, d5ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5acc:	9b03      	ldr	r3, [sp, #12]
   d5ace:	f840 3b04 	str.w	r3, [r0], #4
   d5ad2:	a904      	add	r1, sp, #16
   d5ad4:	f7ff fe53 	bl	d577e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5ad8:	9600      	str	r6, [sp, #0]
   d5ada:	fa5f f389 	uxtb.w	r3, r9
   d5ade:	4642      	mov	r2, r8
   d5ae0:	4639      	mov	r1, r7
   d5ae2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5ae4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5ae8:	f7ff fd7a 	bl	d55e0 <spark_send_event>
   d5aec:	b9b8      	cbnz	r0, d5b1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5aee:	9b03      	ldr	r3, [sp, #12]
   d5af0:	785b      	ldrb	r3, [r3, #1]
   d5af2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5af6:	b993      	cbnz	r3, d5b1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5af8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5afc:	a905      	add	r1, sp, #20
   d5afe:	a803      	add	r0, sp, #12
   d5b00:	9205      	str	r2, [sp, #20]
   d5b02:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5b06:	f7ff ff11 	bl	d592c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b0a:	a805      	add	r0, sp, #20
   d5b0c:	f7ff fe61 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5b10:	a805      	add	r0, sp, #20
   d5b12:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5b14:	f7ff fe95 	bl	d5842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5b18:	a806      	add	r0, sp, #24
   d5b1a:	f7fe fc8f 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b1e:	9b03      	ldr	r3, [sp, #12]
   d5b20:	9305      	str	r3, [sp, #20]
   d5b22:	a904      	add	r1, sp, #16
   d5b24:	a806      	add	r0, sp, #24
   d5b26:	f7ff fe2a 	bl	d577e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b2a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5b2c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b2e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5b30:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5b32:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5b34:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5b36:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5b38:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5b3a:	f7fe fc7f 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b3e:	a804      	add	r0, sp, #16
   d5b40:	f7fe fc7c 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5b44:	e7a2      	b.n	d5a8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5b46:	bf00      	nop
   d5b48:	000d5c11 	.word	0x000d5c11

000d5b4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5b4c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b50:	4605      	mov	r5, r0
	  switch (__op)
   d5b52:	d007      	beq.n	d5b64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5b54:	2a03      	cmp	r2, #3
   d5b56:	d018      	beq.n	d5b8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5b58:	2a01      	cmp	r2, #1
   d5b5a:	d101      	bne.n	d5b60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5b5c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5b5e:	6003      	str	r3, [r0, #0]
	}
   d5b60:	2000      	movs	r0, #0
   d5b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b64:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5b66:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5b68:	f7fe fa95 	bl	d4096 <_Znwj>
   d5b6c:	4604      	mov	r4, r0
   d5b6e:	b150      	cbz	r0, d5b86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   d5b70:	4631      	mov	r1, r6
   d5b72:	f7ff fecb 	bl	d590c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5b76:	6930      	ldr	r0, [r6, #16]
   d5b78:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5b7c:	b108      	cbz	r0, d5b82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5b7e:	f002 fe1b 	bl	d87b8 <strdup>
        type_(type) {
   d5b82:	6120      	str	r0, [r4, #16]
   d5b84:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5b86:	602c      	str	r4, [r5, #0]
	}
   d5b88:	e7ea      	b.n	d5b60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5b8a:	6804      	ldr	r4, [r0, #0]
   d5b8c:	2c00      	cmp	r4, #0
   d5b8e:	d0e7      	beq.n	d5b60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5b90:	f104 0010 	add.w	r0, r4, #16
   d5b94:	f7ff fe1d 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5b98:	4620      	mov	r0, r4
   d5b9a:	f7fe ffba 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5b9e:	2118      	movs	r1, #24
   d5ba0:	4620      	mov	r0, r4
   d5ba2:	f002 f893 	bl	d7ccc <_ZdlPvj>
   d5ba6:	e7db      	b.n	d5b60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5ba8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5baa:	2300      	movs	r3, #0
   d5bac:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5bae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5bb0:	4604      	mov	r4, r0
   d5bb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5bb4:	b12b      	cbz	r3, d5bc2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bb6:	2202      	movs	r2, #2
   d5bb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5bba:	68eb      	ldr	r3, [r5, #12]
   d5bbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5bbe:	68ab      	ldr	r3, [r5, #8]
   d5bc0:	60a3      	str	r3, [r4, #8]
    }
   d5bc2:	4620      	mov	r0, r4
   d5bc4:	bd38      	pop	{r3, r4, r5, pc}

000d5bc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5bc6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5bc8:	b570      	push	{r4, r5, r6, lr}
   d5bca:	4604      	mov	r4, r0
	  switch (__op)
   d5bcc:	d007      	beq.n	d5bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5bce:	2a03      	cmp	r2, #3
   d5bd0:	d012      	beq.n	d5bf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5bd2:	2a01      	cmp	r2, #1
   d5bd4:	d101      	bne.n	d5bda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5bd6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5bd8:	6003      	str	r3, [r0, #0]
	}
   d5bda:	2000      	movs	r0, #0
   d5bdc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5bde:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5be0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5be2:	f7fe fa58 	bl	d4096 <_Znwj>
   d5be6:	4605      	mov	r5, r0
   d5be8:	b120      	cbz	r0, d5bf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5bea:	4631      	mov	r1, r6
   d5bec:	f7ff ffdc 	bl	d5ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5bf0:	7c33      	ldrb	r3, [r6, #16]
   d5bf2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5bf4:	6025      	str	r5, [r4, #0]
	}
   d5bf6:	e7f0      	b.n	d5bda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5bf8:	6804      	ldr	r4, [r0, #0]
   d5bfa:	2c00      	cmp	r4, #0
   d5bfc:	d0ed      	beq.n	d5bda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5bfe:	4620      	mov	r0, r4
   d5c00:	f7fe ff87 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5c04:	2114      	movs	r1, #20
   d5c06:	4620      	mov	r0, r4
   d5c08:	f002 f860 	bl	d7ccc <_ZdlPvj>
   d5c0c:	e7e5      	b.n	d5bda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5c10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c12:	b089      	sub	sp, #36	; 0x24
   d5c14:	4604      	mov	r4, r0
   d5c16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5c18:	a801      	add	r0, sp, #4
   d5c1a:	4611      	mov	r1, r2
   d5c1c:	f7ff fe11 	bl	d5842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5c20:	b1a4      	cbz	r4, d5c4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5c22:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5c24:	b11d      	cbz	r5, d5c2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5c26:	4628      	mov	r0, r5
   d5c28:	f002 fdc6 	bl	d87b8 <strdup>
   d5c2c:	4605      	mov	r5, r0
   d5c2e:	a801      	add	r0, sp, #4
   d5c30:	a903      	add	r1, sp, #12
        type_(type) {
   d5c32:	9503      	str	r5, [sp, #12]
   d5c34:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5c38:	f7ff fe78 	bl	d592c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5c3c:	a803      	add	r0, sp, #12
   d5c3e:	f7ff fdc8 	bl	d57d2 <_ZN8particle5ErrorD1Ev>
   d5c42:	a802      	add	r0, sp, #8
   d5c44:	f7fe fbfa 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c48:	b009      	add	sp, #36	; 0x24
   d5c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5c4c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5c4e:	2301      	movs	r3, #1
   d5c50:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5c54:	2a00      	cmp	r2, #0
   d5c56:	d103      	bne.n	d5c60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5c58:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5c5c:	2900      	cmp	r1, #0
   d5c5e:	d1f7      	bne.n	d5c50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5c60:	d1ef      	bne.n	d5c42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5c62:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5c64:	f3bf 8f5b 	dmb	ish
   d5c68:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5c6a:	1d2b      	adds	r3, r5, #4
   d5c6c:	f3bf 8f5b 	dmb	ish
   d5c70:	e853 6f00 	ldrex	r6, [r3]
   d5c74:	e843 4200 	strex	r2, r4, [r3]
   d5c78:	2a00      	cmp	r2, #0
   d5c7a:	d1f9      	bne.n	d5c70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5c7c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5c80:	2e00      	cmp	r6, #0
   d5c82:	d0de      	beq.n	d5c42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5c84:	4620      	mov	r0, r4
   d5c86:	f7ff fc77 	bl	d5578 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5c8a:	4607      	mov	r7, r0
   d5c8c:	b160      	cbz	r0, d5ca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c8e:	f105 010c 	add.w	r1, r5, #12
   d5c92:	4630      	mov	r0, r6
   d5c94:	f7ff fe16 	bl	d58c4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5c98:	4630      	mov	r0, r6
   d5c9a:	f7fe ff3a 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5c9e:	2110      	movs	r1, #16
   d5ca0:	4630      	mov	r0, r6
   d5ca2:	f002 f813 	bl	d7ccc <_ZdlPvj>
   d5ca6:	e7cc      	b.n	d5c42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ca8:	4631      	mov	r1, r6
   d5caa:	a803      	add	r0, sp, #12
   d5cac:	f7ff ff7c 	bl	d5ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5cb0:	7b2b      	ldrb	r3, [r5, #12]
   d5cb2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5cb6:	2010      	movs	r0, #16
   d5cb8:	f7fe f9ed 	bl	d4096 <_Znwj>
   d5cbc:	4605      	mov	r5, r0
   d5cbe:	b1d0      	cbz	r0, d5cf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5cc0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cc2:	2014      	movs	r0, #20
   d5cc4:	f7fe f9e7 	bl	d4096 <_Znwj>
   d5cc8:	4604      	mov	r4, r0
   d5cca:	b178      	cbz	r0, d5cec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5ccc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5cce:	4601      	mov	r1, r0
   d5cd0:	a803      	add	r0, sp, #12
   d5cd2:	f7ff fdd5 	bl	d5880 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5cd8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cda:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cdc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5cde:	9205      	str	r2, [sp, #20]
   d5ce0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ce2:	60e3      	str	r3, [r4, #12]
   d5ce4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5ce8:	9206      	str	r2, [sp, #24]
   d5cea:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5cec:	4b06      	ldr	r3, [pc, #24]	; (d5d08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5cee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5cf0:	4b06      	ldr	r3, [pc, #24]	; (d5d0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cf2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5cf4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5cf6:	a803      	add	r0, sp, #12
   d5cf8:	f7fe ff0b 	bl	d4b12 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5cfc:	2200      	movs	r2, #0
   d5cfe:	4629      	mov	r1, r5
   d5d00:	4803      	ldr	r0, [pc, #12]	; (d5d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5d02:	f7ff fc41 	bl	d5588 <application_thread_invoke>
   d5d06:	e7c7      	b.n	d5c98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5d08:	000d58d7 	.word	0x000d58d7
   d5d0c:	000d5bc7 	.word	0x000d5bc7
   d5d10:	000d5757 	.word	0x000d5757

000d5d14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d14:	2200      	movs	r2, #0
   d5d16:	6840      	ldr	r0, [r0, #4]
   d5d18:	4611      	mov	r1, r2
   d5d1a:	f7ff bcb1 	b.w	d5680 <network_listening>

000d5d1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d1e:	2200      	movs	r2, #0
   d5d20:	6840      	ldr	r0, [r0, #4]
   d5d22:	4611      	mov	r1, r2
   d5d24:	f7ff bcbc 	b.w	d56a0 <network_get_listen_timeout>

000d5d28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d28:	6840      	ldr	r0, [r0, #4]
   d5d2a:	2200      	movs	r2, #0
   d5d2c:	f7ff bcb0 	b.w	d5690 <network_set_listen_timeout>

000d5d30 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d30:	6840      	ldr	r0, [r0, #4]
   d5d32:	2200      	movs	r2, #0
   d5d34:	f081 0101 	eor.w	r1, r1, #1
   d5d38:	f7ff bc9a 	b.w	d5670 <network_listen>

000d5d3c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d3c:	2300      	movs	r3, #0
   d5d3e:	6840      	ldr	r0, [r0, #4]
   d5d40:	461a      	mov	r2, r3
   d5d42:	4619      	mov	r1, r3
   d5d44:	f7ff bc8c 	b.w	d5660 <network_off>

000d5d48 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d48:	2300      	movs	r3, #0
   d5d4a:	6840      	ldr	r0, [r0, #4]
   d5d4c:	461a      	mov	r2, r3
   d5d4e:	4619      	mov	r1, r3
   d5d50:	f7ff bc7e 	b.w	d5650 <network_on>

000d5d54 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d54:	2200      	movs	r2, #0
   d5d56:	6840      	ldr	r0, [r0, #4]
   d5d58:	4611      	mov	r1, r2
   d5d5a:	f7ff bc71 	b.w	d5640 <network_ready>

000d5d5e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d5e:	2200      	movs	r2, #0
   d5d60:	6840      	ldr	r0, [r0, #4]
   d5d62:	4611      	mov	r1, r2
   d5d64:	f7ff bc5c 	b.w	d5620 <network_connecting>

000d5d68 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d68:	6840      	ldr	r0, [r0, #4]
   d5d6a:	2200      	movs	r2, #0
   d5d6c:	2102      	movs	r1, #2
   d5d6e:	f7ff bc5f 	b.w	d5630 <network_disconnect>

000d5d72 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d72:	2300      	movs	r3, #0
   d5d74:	6840      	ldr	r0, [r0, #4]
   d5d76:	461a      	mov	r2, r3
   d5d78:	f7ff bc4a 	b.w	d5610 <network_connect>

000d5d7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d7c:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d7e:	2203      	movs	r2, #3
   d5d80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d82:	4a02      	ldr	r2, [pc, #8]	; (d5d8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5d84:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5d86:	4770      	bx	lr
   d5d88:	2003e57c 	.word	0x2003e57c
   d5d8c:	000da860 	.word	0x000da860

000d5d90 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5d90:	4770      	bx	lr

000d5d92 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d94:	4606      	mov	r6, r0
   d5d96:	4615      	mov	r5, r2
   d5d98:	460c      	mov	r4, r1
   d5d9a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5d9c:	42bc      	cmp	r4, r7
   d5d9e:	d006      	beq.n	d5dae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5da0:	6833      	ldr	r3, [r6, #0]
   d5da2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5da6:	689b      	ldr	r3, [r3, #8]
   d5da8:	4630      	mov	r0, r6
   d5daa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5dac:	e7f6      	b.n	d5d9c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5dae:	4628      	mov	r0, r5
   d5db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5db2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5db2:	7c00      	ldrb	r0, [r0, #16]
   d5db4:	2200      	movs	r2, #0
   d5db6:	f7ff baaf 	b.w	d5318 <hal_i2c_write>

000d5dba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5dba:	7c00      	ldrb	r0, [r0, #16]
   d5dbc:	2100      	movs	r1, #0
   d5dbe:	f7ff bab3 	b.w	d5328 <hal_i2c_available>

000d5dc2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5dc2:	7c00      	ldrb	r0, [r0, #16]
   d5dc4:	2100      	movs	r1, #0
   d5dc6:	f7ff bab7 	b.w	d5338 <hal_i2c_read>

000d5dca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5dca:	7c00      	ldrb	r0, [r0, #16]
   d5dcc:	2100      	movs	r1, #0
   d5dce:	f7ff babb 	b.w	d5348 <hal_i2c_peek>

000d5dd2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5dd2:	7c00      	ldrb	r0, [r0, #16]
   d5dd4:	2100      	movs	r1, #0
   d5dd6:	f7ff babf 	b.w	d5358 <hal_i2c_flush>

000d5dda <_ZN7TwoWireD0Ev>:
   d5dda:	b510      	push	{r4, lr}
   d5ddc:	2114      	movs	r1, #20
   d5dde:	4604      	mov	r4, r0
   d5de0:	f001 ff74 	bl	d7ccc <_ZdlPvj>
   d5de4:	4620      	mov	r0, r4
   d5de6:	bd10      	pop	{r4, pc}

000d5de8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5de8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5dee:	4604      	mov	r4, r0
   d5df0:	4608      	mov	r0, r1
   d5df2:	2100      	movs	r1, #0
   d5df4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5df8:	4b03      	ldr	r3, [pc, #12]	; (d5e08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5dfa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5dfc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5dfe:	4611      	mov	r1, r2
   d5e00:	f7ff faba 	bl	d5378 <hal_i2c_init>
}
   d5e04:	4620      	mov	r0, r4
   d5e06:	bd10      	pop	{r4, pc}
   d5e08:	000da89c 	.word	0x000da89c

000d5e0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e0c:	4770      	bx	lr

000d5e0e <_ZN9IPAddressD0Ev>:
   d5e0e:	b510      	push	{r4, lr}
   d5e10:	2118      	movs	r1, #24
   d5e12:	4604      	mov	r4, r0
   d5e14:	f001 ff5a 	bl	d7ccc <_ZdlPvj>
   d5e18:	4620      	mov	r0, r4
   d5e1a:	bd10      	pop	{r4, pc}

000d5e1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e1e:	7d03      	ldrb	r3, [r0, #20]
   d5e20:	2b06      	cmp	r3, #6
{
   d5e22:	b08d      	sub	sp, #52	; 0x34
   d5e24:	460e      	mov	r6, r1
   d5e26:	f100 0704 	add.w	r7, r0, #4
   d5e2a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5e2e:	d012      	beq.n	d5e56 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5e30:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5e34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e38:	220a      	movs	r2, #10
   d5e3a:	4630      	mov	r0, r6
   d5e3c:	f001 fae5 	bl	d740a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e40:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e42:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5e44:	d019      	beq.n	d5e7a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5e46:	2c00      	cmp	r4, #0
   d5e48:	d0f4      	beq.n	d5e34 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5e4a:	212e      	movs	r1, #46	; 0x2e
   d5e4c:	4630      	mov	r0, r6
   d5e4e:	f001 fac3 	bl	d73d8 <_ZN5Print5printEc>
   d5e52:	4404      	add	r4, r0
   d5e54:	e7ee      	b.n	d5e34 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e56:	232f      	movs	r3, #47	; 0x2f
   d5e58:	466a      	mov	r2, sp
   d5e5a:	4639      	mov	r1, r7
   d5e5c:	200a      	movs	r0, #10
		buf[0] = 0;
   d5e5e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e62:	f7ff fa91 	bl	d5388 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5e66:	4668      	mov	r0, sp
   d5e68:	f002 fcc3 	bl	d87f2 <strlen>
   d5e6c:	6833      	ldr	r3, [r6, #0]
   d5e6e:	4602      	mov	r2, r0
   d5e70:	68db      	ldr	r3, [r3, #12]
   d5e72:	4669      	mov	r1, sp
   d5e74:	4630      	mov	r0, r6
   d5e76:	4798      	blx	r3
   d5e78:	4604      	mov	r4, r0
    }
    return n;
}
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	b00d      	add	sp, #52	; 0x34
   d5e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e80 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5e80:	b510      	push	{r4, lr}
   d5e82:	4b05      	ldr	r3, [pc, #20]	; (d5e98 <_ZN9IPAddressC1Ev+0x18>)
   d5e84:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e86:	2211      	movs	r2, #17
   d5e88:	f840 3b04 	str.w	r3, [r0], #4
   d5e8c:	2100      	movs	r1, #0
   d5e8e:	f002 fc3c 	bl	d870a <memset>
}
   d5e92:	4620      	mov	r0, r4
   d5e94:	bd10      	pop	{r4, pc}
   d5e96:	bf00      	nop
   d5e98:	000da8c4 	.word	0x000da8c4

000d5e9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e9c:	4603      	mov	r3, r0
   d5e9e:	4a07      	ldr	r2, [pc, #28]	; (d5ebc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ea0:	b510      	push	{r4, lr}
   d5ea2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5ea6:	f101 0210 	add.w	r2, r1, #16
   d5eaa:	f851 4b04 	ldr.w	r4, [r1], #4
   d5eae:	f843 4b04 	str.w	r4, [r3], #4
   d5eb2:	4291      	cmp	r1, r2
   d5eb4:	d1f9      	bne.n	d5eaa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5eb6:	780a      	ldrb	r2, [r1, #0]
   d5eb8:	701a      	strb	r2, [r3, #0]
}
   d5eba:	bd10      	pop	{r4, pc}
   d5ebc:	000da8c4 	.word	0x000da8c4

000d5ec0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5ec0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5ec2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5ec6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5eca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5ece:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5ed2:	2304      	movs	r3, #4
   d5ed4:	6041      	str	r1, [r0, #4]
   d5ed6:	7503      	strb	r3, [r0, #20]
}
   d5ed8:	bd10      	pop	{r4, pc}

000d5eda <_ZN9IPAddressaSEPKh>:
{
   d5eda:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5edc:	78cb      	ldrb	r3, [r1, #3]
   d5ede:	9300      	str	r3, [sp, #0]
   d5ee0:	788b      	ldrb	r3, [r1, #2]
   d5ee2:	784a      	ldrb	r2, [r1, #1]
   d5ee4:	7809      	ldrb	r1, [r1, #0]
   d5ee6:	f7ff ffeb 	bl	d5ec0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5eea:	b002      	add	sp, #8
   d5eec:	bd10      	pop	{r4, pc}

000d5eee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5eee:	f100 0310 	add.w	r3, r0, #16
   d5ef2:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5ef4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5ef8:	2901      	cmp	r1, #1
   d5efa:	4618      	mov	r0, r3
   d5efc:	d108      	bne.n	d5f10 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5efe:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d5f02:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d5f06:	3a01      	subs	r2, #1
   d5f08:	f103 0310 	add.w	r3, r3, #16
   d5f0c:	d1f2      	bne.n	d5ef4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5f0e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d5f10:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d5f12:	bf04      	itt	eq
   d5f14:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d5f18:	1852      	addeq	r2, r2, r1
   d5f1a:	e7f4      	b.n	d5f06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d5f1c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d5f1c:	b40e      	push	{r1, r2, r3}
   d5f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f20:	b088      	sub	sp, #32
   d5f22:	af00      	add	r7, sp, #0
   d5f24:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f28:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d5f2a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f2e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d5f30:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f32:	462b      	mov	r3, r5
   d5f34:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d5f36:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f38:	f7ff fbea 	bl	d5710 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d5f3c:	280f      	cmp	r0, #15
   d5f3e:	687a      	ldr	r2, [r7, #4]
   d5f40:	d91a      	bls.n	d5f78 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d5f42:	f100 0308 	add.w	r3, r0, #8
   d5f46:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d5f4a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d5f4c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f50:	1c41      	adds	r1, r0, #1
   d5f52:	462b      	mov	r3, r5
   d5f54:	4668      	mov	r0, sp
        va_start(args, fmt);
   d5f56:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f58:	f7ff fbda 	bl	d5710 <vsnprintf>
        if (n > 0) {
   d5f5c:	1e02      	subs	r2, r0, #0
   d5f5e:	dd04      	ble.n	d5f6a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d5f60:	6823      	ldr	r3, [r4, #0]
   d5f62:	4669      	mov	r1, sp
   d5f64:	689b      	ldr	r3, [r3, #8]
   d5f66:	4620      	mov	r0, r4
   d5f68:	4798      	blx	r3
   d5f6a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d5f6c:	3720      	adds	r7, #32
   d5f6e:	46bd      	mov	sp, r7
   d5f70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5f74:	b003      	add	sp, #12
   d5f76:	4770      	bx	lr
    } else if (n > 0) {
   d5f78:	2800      	cmp	r0, #0
   d5f7a:	d0f7      	beq.n	d5f6c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d5f7c:	6823      	ldr	r3, [r4, #0]
   d5f7e:	4602      	mov	r2, r0
   d5f80:	689b      	ldr	r3, [r3, #8]
   d5f82:	f107 0110 	add.w	r1, r7, #16
   d5f86:	4620      	mov	r0, r4
   d5f88:	4798      	blx	r3
}
   d5f8a:	e7ef      	b.n	d5f6c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d5f8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f8c:	b510      	push	{r4, lr}
          _M_dispose();
   d5f8e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5f90:	4604      	mov	r4, r0
          _M_dispose();
   d5f92:	689b      	ldr	r3, [r3, #8]
   d5f94:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f96:	68a3      	ldr	r3, [r4, #8]
   d5f98:	3b01      	subs	r3, #1
   d5f9a:	60a3      	str	r3, [r4, #8]
   d5f9c:	b92b      	cbnz	r3, d5faa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5f9e:	6823      	ldr	r3, [r4, #0]
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	68db      	ldr	r3, [r3, #12]
    }
   d5fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5fa8:	4718      	bx	r3
    }
   d5faa:	bd10      	pop	{r4, pc}

000d5fac <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5fac:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5fae:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d5fb0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d5fb4:	689b      	ldr	r3, [r3, #8]
   d5fb6:	2201      	movs	r2, #1
   d5fb8:	f10d 0107 	add.w	r1, sp, #7
   d5fbc:	4798      	blx	r3
}
   d5fbe:	b003      	add	sp, #12
   d5fc0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5fc4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5fc4:	b538      	push	{r3, r4, r5, lr}
   d5fc6:	680b      	ldr	r3, [r1, #0]
   d5fc8:	6003      	str	r3, [r0, #0]
   d5fca:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5fcc:	6843      	ldr	r3, [r0, #4]
   d5fce:	429d      	cmp	r5, r3
    class __shared_ptr
   d5fd0:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5fd2:	d00c      	beq.n	d5fee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5fd4:	b115      	cbz	r5, d5fdc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5fd6:	686b      	ldr	r3, [r5, #4]
   d5fd8:	3301      	adds	r3, #1
   d5fda:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5fdc:	6860      	ldr	r0, [r4, #4]
   d5fde:	b128      	cbz	r0, d5fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5fe0:	6843      	ldr	r3, [r0, #4]
   d5fe2:	3b01      	subs	r3, #1
   d5fe4:	6043      	str	r3, [r0, #4]
   d5fe6:	b90b      	cbnz	r3, d5fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5fe8:	f7ff ffd0 	bl	d5f8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5fec:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5fee:	4620      	mov	r0, r4
   d5ff0:	bd38      	pop	{r3, r4, r5, pc}

000d5ff2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5ff2:	460b      	mov	r3, r1
   d5ff4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5ff6:	2200      	movs	r2, #0
   d5ff8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ffa:	e9c0 2200 	strd	r2, r2, [r0]
   d5ffe:	4604      	mov	r4, r0
        t_ = t;
   d6000:	6083      	str	r3, [r0, #8]
    if (t) {
   d6002:	b90b      	cbnz	r3, d6008 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6004:	4620      	mov	r0, r4
   d6006:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6008:	f7ff ffdc 	bl	d5fc4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d600c:	e7fa      	b.n	d6004 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d600e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d600e:	6883      	ldr	r3, [r0, #8]
   d6010:	b1eb      	cbz	r3, d604e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6012:	781a      	ldrb	r2, [r3, #0]
   d6014:	2a03      	cmp	r2, #3
   d6016:	d81a      	bhi.n	d604e <_ZNK5spark9JSONValue4typeEv+0x40>
   d6018:	e8df f002 	tbb	[pc, r2]
   d601c:	1b021704 	.word	0x1b021704
   d6020:	2005      	movs	r0, #5
   d6022:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6024:	6802      	ldr	r2, [r0, #0]
   d6026:	685b      	ldr	r3, [r3, #4]
   d6028:	6852      	ldr	r2, [r2, #4]
   d602a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d602c:	282d      	cmp	r0, #45	; 0x2d
   d602e:	d012      	beq.n	d6056 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6030:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6034:	2b09      	cmp	r3, #9
   d6036:	d90e      	bls.n	d6056 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6038:	2874      	cmp	r0, #116	; 0x74
   d603a:	d00e      	beq.n	d605a <_ZNK5spark9JSONValue4typeEv+0x4c>
   d603c:	2866      	cmp	r0, #102	; 0x66
   d603e:	d00c      	beq.n	d605a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6040:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6044:	4258      	negs	r0, r3
   d6046:	4158      	adcs	r0, r3
   d6048:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d604a:	2006      	movs	r0, #6
   d604c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d604e:	2000      	movs	r0, #0
   d6050:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6052:	2004      	movs	r0, #4
   d6054:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6056:	2003      	movs	r0, #3
   d6058:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d605a:	2002      	movs	r0, #2
}
   d605c:	4770      	bx	lr

000d605e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d605e:	b510      	push	{r4, lr}
   d6060:	4604      	mov	r4, r0
    switch (type()) {
   d6062:	f7ff ffd4 	bl	d600e <_ZNK5spark9JSONValue4typeEv>
   d6066:	2802      	cmp	r0, #2
   d6068:	d00e      	beq.n	d6088 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d606a:	1ec3      	subs	r3, r0, #3
   d606c:	b2db      	uxtb	r3, r3
   d606e:	2b01      	cmp	r3, #1
   d6070:	d814      	bhi.n	d609c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6072:	6822      	ldr	r2, [r4, #0]
   d6074:	68a3      	ldr	r3, [r4, #8]
   d6076:	6850      	ldr	r0, [r2, #4]
   d6078:	685b      	ldr	r3, [r3, #4]
}
   d607a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d607e:	220a      	movs	r2, #10
   d6080:	2100      	movs	r1, #0
   d6082:	4418      	add	r0, r3
   d6084:	f003 babc 	b.w	d9600 <strtol>
        const char* const s = d_->json + t_->start;
   d6088:	6822      	ldr	r2, [r4, #0]
   d608a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d608c:	6852      	ldr	r2, [r2, #4]
   d608e:	685b      	ldr	r3, [r3, #4]
   d6090:	5cd0      	ldrb	r0, [r2, r3]
   d6092:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6096:	4258      	negs	r0, r3
   d6098:	4158      	adcs	r0, r3
}
   d609a:	bd10      	pop	{r4, pc}
    switch (type()) {
   d609c:	2000      	movs	r0, #0
   d609e:	e7fc      	b.n	d609a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d60a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d60a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d60a2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d60a4:	e9c0 3300 	strd	r3, r3, [r0]
   d60a8:	4604      	mov	r4, r0
        n_(0) {
   d60aa:	480e      	ldr	r0, [pc, #56]	; (d60e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d60ac:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d60b0:	b1a9      	cbz	r1, d60de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d60b2:	780b      	ldrb	r3, [r1, #0]
   d60b4:	2b03      	cmp	r3, #3
   d60b6:	d006      	beq.n	d60c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d60b8:	b98b      	cbnz	r3, d60de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d60ba:	6813      	ldr	r3, [r2, #0]
   d60bc:	6858      	ldr	r0, [r3, #4]
   d60be:	684b      	ldr	r3, [r1, #4]
   d60c0:	5cc3      	ldrb	r3, [r0, r3]
   d60c2:	2b6e      	cmp	r3, #110	; 0x6e
   d60c4:	d007      	beq.n	d60d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d60c6:	6813      	ldr	r3, [r2, #0]
   d60c8:	684d      	ldr	r5, [r1, #4]
   d60ca:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d60cc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d60ce:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d60d0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d60d2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d60d4:	60e3      	str	r3, [r4, #12]
   d60d6:	4611      	mov	r1, r2
   d60d8:	4620      	mov	r0, r4
   d60da:	f7ff ff73 	bl	d5fc4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d60de:	4620      	mov	r0, r4
   d60e0:	bd38      	pop	{r3, r4, r5, pc}
   d60e2:	bf00      	nop
   d60e4:	000da936 	.word	0x000da936

000d60e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d60e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d60ea:	2500      	movs	r5, #0
   d60ec:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d60ee:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d60f2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d60f6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d60fa:	4604      	mov	r4, r0
   d60fc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d60fe:	b14b      	cbz	r3, d6114 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6100:	781a      	ldrb	r2, [r3, #0]
   d6102:	2a01      	cmp	r2, #1
   d6104:	d106      	bne.n	d6114 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6106:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d610a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d610c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d610e:	6143      	str	r3, [r0, #20]
   d6110:	f7ff ff58 	bl	d5fc4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6114:	4620      	mov	r0, r4
   d6116:	bd38      	pop	{r3, r4, r5, pc}

000d6118 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6118:	b510      	push	{r4, lr}
    if (!n_) {
   d611a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d611c:	4604      	mov	r4, r0
    if (!n_) {
   d611e:	b163      	cbz	r3, d613a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6120:	6880      	ldr	r0, [r0, #8]
   d6122:	60e0      	str	r0, [r4, #12]
    --n_;
   d6124:	3b01      	subs	r3, #1
    ++t_;
   d6126:	3010      	adds	r0, #16
   d6128:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d612a:	6120      	str	r0, [r4, #16]
    --n_;
   d612c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d612e:	b113      	cbz	r3, d6136 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6130:	f7ff fedd 	bl	d5eee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6134:	60a0      	str	r0, [r4, #8]
    return true;
   d6136:	2001      	movs	r0, #1
   d6138:	e000      	b.n	d613c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d613a:	4618      	mov	r0, r3
}
   d613c:	bd10      	pop	{r4, pc}

000d613e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d613e:	b510      	push	{r4, lr}
    write('}');
   d6140:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6142:	4604      	mov	r4, r0
    write('}');
   d6144:	f7ff ff32 	bl	d5fac <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6148:	2301      	movs	r3, #1
   d614a:	7123      	strb	r3, [r4, #4]
}
   d614c:	4620      	mov	r0, r4
   d614e:	bd10      	pop	{r4, pc}

000d6150 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6150:	b508      	push	{r3, lr}
    switch (state_) {
   d6152:	7903      	ldrb	r3, [r0, #4]
   d6154:	2b01      	cmp	r3, #1
   d6156:	d002      	beq.n	d615e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6158:	2b02      	cmp	r3, #2
   d615a:	d004      	beq.n	d6166 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d615c:	bd08      	pop	{r3, pc}
        write(',');
   d615e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6160:	f7ff ff24 	bl	d5fac <_ZN5spark10JSONWriter5writeEc>
}
   d6164:	e7fa      	b.n	d615c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6166:	213a      	movs	r1, #58	; 0x3a
   d6168:	e7fa      	b.n	d6160 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d616a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d616a:	b510      	push	{r4, lr}
   d616c:	4604      	mov	r4, r0
    writeSeparator();
   d616e:	f7ff ffef 	bl	d6150 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6172:	4620      	mov	r0, r4
   d6174:	217b      	movs	r1, #123	; 0x7b
   d6176:	f7ff ff19 	bl	d5fac <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d617a:	2300      	movs	r3, #0
   d617c:	7123      	strb	r3, [r4, #4]
}
   d617e:	4620      	mov	r0, r4
   d6180:	bd10      	pop	{r4, pc}
	...

000d6184 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6184:	b513      	push	{r0, r1, r4, lr}
   d6186:	4604      	mov	r4, r0
   d6188:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d618a:	f7ff ffe1 	bl	d6150 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d618e:	6823      	ldr	r3, [r4, #0]
   d6190:	9a01      	ldr	r2, [sp, #4]
   d6192:	68db      	ldr	r3, [r3, #12]
   d6194:	4903      	ldr	r1, [pc, #12]	; (d61a4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6196:	4620      	mov	r0, r4
   d6198:	4798      	blx	r3
    state_ = NEXT;
   d619a:	2301      	movs	r3, #1
}
   d619c:	4620      	mov	r0, r4
    state_ = NEXT;
   d619e:	7123      	strb	r3, [r4, #4]
}
   d61a0:	b002      	add	sp, #8
   d61a2:	bd10      	pop	{r4, pc}
   d61a4:	000da8d0 	.word	0x000da8d0

000d61a8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d61a8:	b513      	push	{r0, r1, r4, lr}
   d61aa:	4604      	mov	r4, r0
   d61ac:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d61ae:	f7ff ffcf 	bl	d6150 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d61b2:	6823      	ldr	r3, [r4, #0]
   d61b4:	9a01      	ldr	r2, [sp, #4]
   d61b6:	68db      	ldr	r3, [r3, #12]
   d61b8:	4903      	ldr	r1, [pc, #12]	; (d61c8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d61ba:	4620      	mov	r0, r4
   d61bc:	4798      	blx	r3
    state_ = NEXT;
   d61be:	2301      	movs	r3, #1
}
   d61c0:	4620      	mov	r0, r4
    state_ = NEXT;
   d61c2:	7123      	strb	r3, [r4, #4]
}
   d61c4:	b002      	add	sp, #8
   d61c6:	bd10      	pop	{r4, pc}
   d61c8:	000da8d3 	.word	0x000da8d3

000d61cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d61cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61d0:	460d      	mov	r5, r1
   d61d2:	4617      	mov	r7, r2
    write('"');
   d61d4:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d61d6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6278 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d61da:	4604      	mov	r4, r0
    const char* const end = str + size;
   d61dc:	442f      	add	r7, r5
    write('"');
   d61de:	f7ff fee5 	bl	d5fac <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d61e2:	4629      	mov	r1, r5
    while (s != end) {
   d61e4:	42bd      	cmp	r5, r7
   d61e6:	462a      	mov	r2, r5
   d61e8:	d038      	beq.n	d625c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d61ea:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d61ee:	2e22      	cmp	r6, #34	; 0x22
   d61f0:	d003      	beq.n	d61fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d61f2:	2e5c      	cmp	r6, #92	; 0x5c
   d61f4:	d001      	beq.n	d61fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d61f6:	2e1f      	cmp	r6, #31
   d61f8:	d8f4      	bhi.n	d61e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d61fa:	6823      	ldr	r3, [r4, #0]
   d61fc:	1a52      	subs	r2, r2, r1
   d61fe:	689b      	ldr	r3, [r3, #8]
   d6200:	4620      	mov	r0, r4
   d6202:	4798      	blx	r3
            write('\\');
   d6204:	215c      	movs	r1, #92	; 0x5c
   d6206:	4620      	mov	r0, r4
   d6208:	f7ff fed0 	bl	d5fac <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d620c:	2e0d      	cmp	r6, #13
   d620e:	d80a      	bhi.n	d6226 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6210:	2e07      	cmp	r6, #7
   d6212:	d91c      	bls.n	d624e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6214:	f1a6 0308 	sub.w	r3, r6, #8
   d6218:	2b05      	cmp	r3, #5
   d621a:	d818      	bhi.n	d624e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d621c:	e8df f003 	tbb	[pc, r3]
   d6220:	17110f0d 	.word	0x17110f0d
   d6224:	1513      	.short	0x1513
   d6226:	2e22      	cmp	r6, #34	; 0x22
   d6228:	d001      	beq.n	d622e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d622a:	2e5c      	cmp	r6, #92	; 0x5c
   d622c:	d10f      	bne.n	d624e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d622e:	4631      	mov	r1, r6
                write('b');
   d6230:	4620      	mov	r0, r4
   d6232:	f7ff febb 	bl	d5fac <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6236:	4629      	mov	r1, r5
    while (s != end) {
   d6238:	e7d4      	b.n	d61e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d623a:	2162      	movs	r1, #98	; 0x62
   d623c:	e7f8      	b.n	d6230 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d623e:	2174      	movs	r1, #116	; 0x74
   d6240:	e7f6      	b.n	d6230 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6242:	216e      	movs	r1, #110	; 0x6e
   d6244:	e7f4      	b.n	d6230 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6246:	2166      	movs	r1, #102	; 0x66
   d6248:	e7f2      	b.n	d6230 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d624a:	2172      	movs	r1, #114	; 0x72
   d624c:	e7f0      	b.n	d6230 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d624e:	6823      	ldr	r3, [r4, #0]
   d6250:	4632      	mov	r2, r6
   d6252:	68db      	ldr	r3, [r3, #12]
   d6254:	4641      	mov	r1, r8
   d6256:	4620      	mov	r0, r4
   d6258:	4798      	blx	r3
                break;
   d625a:	e7ec      	b.n	d6236 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d625c:	428d      	cmp	r5, r1
   d625e:	d004      	beq.n	d626a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6260:	6823      	ldr	r3, [r4, #0]
   d6262:	1a6a      	subs	r2, r5, r1
   d6264:	689b      	ldr	r3, [r3, #8]
   d6266:	4620      	mov	r0, r4
   d6268:	4798      	blx	r3
    }
    write('"');
   d626a:	2122      	movs	r1, #34	; 0x22
   d626c:	4620      	mov	r0, r4
   d626e:	f7ff fe9d 	bl	d5fac <_ZN5spark10JSONWriter5writeEc>
}
   d6272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6276:	bf00      	nop
   d6278:	000da8d6 	.word	0x000da8d6

000d627c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d627c:	b513      	push	{r0, r1, r4, lr}
   d627e:	4604      	mov	r4, r0
   d6280:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6284:	f7ff ff64 	bl	d6150 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6288:	4620      	mov	r0, r4
   d628a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d628e:	f7ff ff9d 	bl	d61cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6292:	2302      	movs	r3, #2
}
   d6294:	4620      	mov	r0, r4
    state_ = VALUE;
   d6296:	7123      	strb	r3, [r4, #4]
}
   d6298:	b002      	add	sp, #8
   d629a:	bd10      	pop	{r4, pc}

000d629c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d629c:	b513      	push	{r0, r1, r4, lr}
   d629e:	4604      	mov	r4, r0
   d62a0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d62a4:	f7ff ff54 	bl	d6150 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d62a8:	4620      	mov	r0, r4
   d62aa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d62ae:	f7ff ff8d 	bl	d61cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d62b2:	2301      	movs	r3, #1
}
   d62b4:	4620      	mov	r0, r4
    state_ = NEXT;
   d62b6:	7123      	strb	r3, [r4, #4]
}
   d62b8:	b002      	add	sp, #8
   d62ba:	bd10      	pop	{r4, pc}

000d62bc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d62bc:	6880      	ldr	r0, [r0, #8]
   d62be:	6803      	ldr	r3, [r0, #0]
   d62c0:	68db      	ldr	r3, [r3, #12]
   d62c2:	4718      	bx	r3

000d62c4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d62c4:	4770      	bx	lr

000d62c6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d62c6:	4608      	mov	r0, r1
   d62c8:	b111      	cbz	r1, d62d0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d62ca:	680b      	ldr	r3, [r1, #0]
   d62cc:	685b      	ldr	r3, [r3, #4]
   d62ce:	4718      	bx	r3
}
   d62d0:	4770      	bx	lr

000d62d2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d62d2:	4770      	bx	lr

000d62d4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d62d4:	4770      	bx	lr

000d62d6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d62d6:	4770      	bx	lr

000d62d8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d62d8:	4770      	bx	lr

000d62da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d62da:	b538      	push	{r3, r4, r5, lr}
   d62dc:	4604      	mov	r4, r0
   d62de:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d62e0:	6800      	ldr	r0, [r0, #0]
   d62e2:	212e      	movs	r1, #46	; 0x2e
   d62e4:	f002 fa4b 	bl	d877e <strchrnul>
    size = s - category;
   d62e8:	6823      	ldr	r3, [r4, #0]
   d62ea:	1ac3      	subs	r3, r0, r3
   d62ec:	602b      	str	r3, [r5, #0]
    if (size) {
   d62ee:	b123      	cbz	r3, d62fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d62f0:	7803      	ldrb	r3, [r0, #0]
   d62f2:	b103      	cbz	r3, d62f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d62f4:	3001      	adds	r0, #1
   d62f6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d62f8:	6020      	str	r0, [r4, #0]
}
   d62fa:	4618      	mov	r0, r3
   d62fc:	bd38      	pop	{r3, r4, r5, pc}

000d62fe <_ZN5spark16JSONStreamWriterD0Ev>:
   d62fe:	b510      	push	{r4, lr}
   d6300:	210c      	movs	r1, #12
   d6302:	4604      	mov	r4, r0
   d6304:	f001 fce2 	bl	d7ccc <_ZdlPvj>
   d6308:	4620      	mov	r0, r4
   d630a:	bd10      	pop	{r4, pc}

000d630c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d630c:	b510      	push	{r4, lr}
   d630e:	2104      	movs	r1, #4
   d6310:	4604      	mov	r4, r0
   d6312:	f001 fcdb 	bl	d7ccc <_ZdlPvj>
   d6316:	4620      	mov	r0, r4
   d6318:	bd10      	pop	{r4, pc}

000d631a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d631a:	b510      	push	{r4, lr}
   d631c:	2104      	movs	r1, #4
   d631e:	4604      	mov	r4, r0
   d6320:	f001 fcd4 	bl	d7ccc <_ZdlPvj>
   d6324:	4620      	mov	r0, r4
   d6326:	bd10      	pop	{r4, pc}

000d6328 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d6328:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d632a:	f002 fa32 	bl	d8792 <strcmp>
}
   d632e:	fab0 f080 	clz	r0, r0
   d6332:	0940      	lsrs	r0, r0, #5
   d6334:	bd08      	pop	{r3, pc}

000d6336 <__tcf_1>:
   d6336:	4770      	bx	lr

000d6338 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6338:	b510      	push	{r4, lr}
   d633a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d633c:	f001 faa4 	bl	d7888 <_Z16_fetch_usbserialv>
   d6340:	4284      	cmp	r4, r0
   d6342:	d010      	beq.n	d6366 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6344:	f001 fa18 	bl	d7778 <_Z22__fetch_global_Serial1v>
   d6348:	4284      	cmp	r4, r0
   d634a:	d105      	bne.n	d6358 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d634c:	f001 fa14 	bl	d7778 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d6354:	f001 ba0d 	b.w	d7772 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6358:	b12c      	cbz	r4, d6366 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d635a:	6823      	ldr	r3, [r4, #0]
   d635c:	4620      	mov	r0, r4
   d635e:	685b      	ldr	r3, [r3, #4]
}
   d6360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6364:	4718      	bx	r3
   d6366:	bd10      	pop	{r4, pc}

000d6368 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6368:	b513      	push	{r0, r1, r4, lr}
   d636a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d636c:	4608      	mov	r0, r1
   d636e:	9101      	str	r1, [sp, #4]
   d6370:	f002 fa3f 	bl	d87f2 <strlen>
   d6374:	9901      	ldr	r1, [sp, #4]
   d6376:	4602      	mov	r2, r0
   d6378:	4620      	mov	r0, r4
}
   d637a:	b002      	add	sp, #8
   d637c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d6380:	f7ff bf8c 	b.w	d629c <_ZN5spark10JSONWriter5valueEPKcj>

000d6384 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d6384:	b513      	push	{r0, r1, r4, lr}
   d6386:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6388:	4608      	mov	r0, r1
   d638a:	9101      	str	r1, [sp, #4]
   d638c:	f002 fa31 	bl	d87f2 <strlen>
   d6390:	6823      	ldr	r3, [r4, #0]
   d6392:	9901      	ldr	r1, [sp, #4]
   d6394:	68db      	ldr	r3, [r3, #12]
   d6396:	4602      	mov	r2, r0
   d6398:	4620      	mov	r0, r4
}
   d639a:	b002      	add	sp, #8
   d639c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d63a0:	4718      	bx	r3

000d63a2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d63a2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d63a4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d63a6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d63aa:	68db      	ldr	r3, [r3, #12]
   d63ac:	2201      	movs	r2, #1
   d63ae:	f10d 0107 	add.w	r1, sp, #7
   d63b2:	4798      	blx	r3
}
   d63b4:	b003      	add	sp, #12
   d63b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d63ba <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d63ba:	b40e      	push	{r1, r2, r3}
   d63bc:	b503      	push	{r0, r1, lr}
   d63be:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d63c0:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d63c2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d63c6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d63c8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d63ca:	f001 f83c 	bl	d7446 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d63ce:	b002      	add	sp, #8
   d63d0:	f85d eb04 	ldr.w	lr, [sp], #4
   d63d4:	b003      	add	sp, #12
   d63d6:	4770      	bx	lr

000d63d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d63d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d63dc:	e9d0 9500 	ldrd	r9, r5, [r0]
   d63e0:	f04f 0814 	mov.w	r8, #20
   d63e4:	fb08 f505 	mul.w	r5, r8, r5
   d63e8:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d63ea:	10ab      	asrs	r3, r5, #2
   d63ec:	4d18      	ldr	r5, [pc, #96]	; (d6450 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d63ee:	4617      	mov	r7, r2
   d63f0:	435d      	muls	r5, r3
   d63f2:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d63f4:	2d00      	cmp	r5, #0
   d63f6:	dd23      	ble.n	d6440 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d63f8:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d63fa:	fb08 f006 	mul.w	r0, r8, r6
   d63fe:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6402:	463a      	mov	r2, r7
   d6404:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d6408:	5820      	ldr	r0, [r4, r0]
   d640a:	9101      	str	r1, [sp, #4]
   d640c:	455f      	cmp	r7, fp
   d640e:	bf28      	it	cs
   d6410:	465a      	movcs	r2, fp
   d6412:	f002 f9f6 	bl	d8802 <strncmp>
                if (cmp == 0) {
   d6416:	9901      	ldr	r1, [sp, #4]
   d6418:	2301      	movs	r3, #1
   d641a:	b978      	cbnz	r0, d643c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d641c:	455f      	cmp	r7, fp
   d641e:	d103      	bne.n	d6428 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6420:	9a00      	ldr	r2, [sp, #0]
   d6422:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6424:	4635      	mov	r5, r6
   d6426:	e7e5      	b.n	d63f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d6428:	bf8c      	ite	hi
   d642a:	2001      	movhi	r0, #1
   d642c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d642e:	2800      	cmp	r0, #0
   d6430:	d0f8      	beq.n	d6424 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6432:	1bae      	subs	r6, r5, r6
	      ++__first;
   d6434:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d6438:	3e01      	subs	r6, #1
   d643a:	e7f3      	b.n	d6424 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d643c:	0fc0      	lsrs	r0, r0, #31
   d643e:	e7f6      	b.n	d642e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d6440:	eba4 0409 	sub.w	r4, r4, r9
}
   d6444:	4802      	ldr	r0, [pc, #8]	; (d6450 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6446:	10a4      	asrs	r4, r4, #2
   d6448:	4360      	muls	r0, r4
   d644a:	b003      	add	sp, #12
   d644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6450:	cccccccd 	.word	0xcccccccd

000d6454 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6454:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d6456:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d6458:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d645a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d645c:	b30b      	cbz	r3, d64a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d645e:	b301      	cbz	r1, d64a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d6460:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6462:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d6466:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d6468:	a903      	add	r1, sp, #12
   d646a:	a801      	add	r0, sp, #4
   d646c:	f7ff ff35 	bl	d62da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6470:	4601      	mov	r1, r0
   d6472:	b1b0      	cbz	r0, d64a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6474:	f10d 030b 	add.w	r3, sp, #11
   d6478:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d647a:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d647e:	4620      	mov	r0, r4
   d6480:	f7ff ffaa 	bl	d63d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6484:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6488:	b15b      	cbz	r3, d64a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d648a:	6824      	ldr	r4, [r4, #0]
   d648c:	2314      	movs	r3, #20
   d648e:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d6492:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d6496:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d649a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d649c:	bfa8      	it	ge
   d649e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d64a0:	e7e2      	b.n	d6468 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d64a2:	4630      	mov	r0, r6
   d64a4:	b004      	add	sp, #16
   d64a6:	bd70      	pop	{r4, r5, r6, pc}

000d64a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d64a8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d64aa:	4c09      	ldr	r4, [pc, #36]	; (d64d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d64ac:	7823      	ldrb	r3, [r4, #0]
   d64ae:	f3bf 8f5b 	dmb	ish
   d64b2:	07db      	lsls	r3, r3, #31
   d64b4:	d409      	bmi.n	d64ca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d64b6:	4620      	mov	r0, r4
   d64b8:	f7fd fdfe 	bl	d40b8 <__cxa_guard_acquire>
   d64bc:	b128      	cbz	r0, d64ca <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d64be:	4620      	mov	r0, r4
   d64c0:	f7fd fdff 	bl	d40c2 <__cxa_guard_release>
   d64c4:	4803      	ldr	r0, [pc, #12]	; (d64d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d64c6:	f002 f8ef 	bl	d86a8 <atexit>
}
   d64ca:	4803      	ldr	r0, [pc, #12]	; (d64d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d64cc:	bd10      	pop	{r4, pc}
   d64ce:	bf00      	nop
   d64d0:	2003e588 	.word	0x2003e588
   d64d4:	000d62d3 	.word	0x000d62d3
   d64d8:	2003e1e4 	.word	0x2003e1e4

000d64dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d64dc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d64de:	4c09      	ldr	r4, [pc, #36]	; (d6504 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d64e0:	7823      	ldrb	r3, [r4, #0]
   d64e2:	f3bf 8f5b 	dmb	ish
   d64e6:	07db      	lsls	r3, r3, #31
   d64e8:	d409      	bmi.n	d64fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d64ea:	4620      	mov	r0, r4
   d64ec:	f7fd fde4 	bl	d40b8 <__cxa_guard_acquire>
   d64f0:	b128      	cbz	r0, d64fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d64f2:	4620      	mov	r0, r4
   d64f4:	f7fd fde5 	bl	d40c2 <__cxa_guard_release>
   d64f8:	4803      	ldr	r0, [pc, #12]	; (d6508 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d64fa:	f002 f8d5 	bl	d86a8 <atexit>
    return &factory;
}
   d64fe:	4803      	ldr	r0, [pc, #12]	; (d650c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6500:	bd10      	pop	{r4, pc}
   d6502:	bf00      	nop
   d6504:	2003e58c 	.word	0x2003e58c
   d6508:	000d6337 	.word	0x000d6337
   d650c:	2003e1e8 	.word	0x2003e1e8

000d6510 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6510:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d6512:	2500      	movs	r5, #0
   d6514:	4604      	mov	r4, r0
   d6516:	e9c0 5500 	strd	r5, r5, [r0]
   d651a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d651e:	6085      	str	r5, [r0, #8]
   d6520:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d6522:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d6526:	f7fe fe7f 	bl	d5228 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d652a:	f7ff ffbd 	bl	d64a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d652e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6530:	f7ff ffd4 	bl	d64dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d6534:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6536:	6220      	str	r0, [r4, #32]
}
   d6538:	4620      	mov	r0, r4
   d653a:	bd38      	pop	{r3, r4, r5, pc}

000d653c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d653c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d653e:	4c0a      	ldr	r4, [pc, #40]	; (d6568 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6540:	7823      	ldrb	r3, [r4, #0]
   d6542:	f3bf 8f5b 	dmb	ish
   d6546:	07db      	lsls	r3, r3, #31
   d6548:	d40c      	bmi.n	d6564 <_ZN5spark10LogManager8instanceEv+0x28>
   d654a:	4620      	mov	r0, r4
   d654c:	f7fd fdb4 	bl	d40b8 <__cxa_guard_acquire>
   d6550:	b140      	cbz	r0, d6564 <_ZN5spark10LogManager8instanceEv+0x28>
   d6552:	4806      	ldr	r0, [pc, #24]	; (d656c <_ZN5spark10LogManager8instanceEv+0x30>)
   d6554:	f7ff ffdc 	bl	d6510 <_ZN5spark10LogManagerC1Ev>
   d6558:	4620      	mov	r0, r4
   d655a:	f7fd fdb2 	bl	d40c2 <__cxa_guard_release>
   d655e:	4804      	ldr	r0, [pc, #16]	; (d6570 <_ZN5spark10LogManager8instanceEv+0x34>)
   d6560:	f002 f8a2 	bl	d86a8 <atexit>
    return &mgr;
}
   d6564:	4801      	ldr	r0, [pc, #4]	; (d656c <_ZN5spark10LogManager8instanceEv+0x30>)
   d6566:	bd10      	pop	{r4, pc}
   d6568:	2003e584 	.word	0x2003e584
   d656c:	2003e594 	.word	0x2003e594
   d6570:	000d6a1d 	.word	0x000d6a1d

000d6574 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6574:	4a02      	ldr	r2, [pc, #8]	; (d6580 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6576:	4903      	ldr	r1, [pc, #12]	; (d6584 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6578:	4803      	ldr	r0, [pc, #12]	; (d6588 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d657a:	2300      	movs	r3, #0
   d657c:	f7fe bfdc 	b.w	d5538 <log_set_callbacks>
   d6580:	000d68a5 	.word	0x000d68a5
   d6584:	000d6831 	.word	0x000d6831
   d6588:	000d67b1 	.word	0x000d67b1

000d658c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d658c:	2300      	movs	r3, #0
   d658e:	461a      	mov	r2, r3
   d6590:	4619      	mov	r1, r3
   d6592:	4618      	mov	r0, r3
   d6594:	f7fe bfd0 	b.w	d5538 <log_set_callbacks>

000d6598 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6598:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d659a:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d659c:	f851 3b04 	ldr.w	r3, [r1], #4
   d65a0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d65a2:	4604      	mov	r4, r0
   d65a4:	a801      	add	r0, sp, #4
   d65a6:	f7ff f8ea 	bl	d577e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d65aa:	466a      	mov	r2, sp
   d65ac:	4629      	mov	r1, r5
   d65ae:	4620      	mov	r0, r4
   d65b0:	f7ff fd1f 	bl	d5ff2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d65b4:	a801      	add	r0, sp, #4
   d65b6:	f7fd ff41 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65ba:	4620      	mov	r0, r4
   d65bc:	b003      	add	sp, #12
   d65be:	bd30      	pop	{r4, r5, pc}

000d65c0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d65c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d65c2:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d65c4:	f851 3b04 	ldr.w	r3, [r1], #4
   d65c8:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d65ca:	4604      	mov	r4, r0
   d65cc:	a801      	add	r0, sp, #4
   d65ce:	f7ff f8d6 	bl	d577e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d65d2:	466a      	mov	r2, sp
   d65d4:	4629      	mov	r1, r5
   d65d6:	4620      	mov	r0, r4
   d65d8:	f7ff fd86 	bl	d60e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d65dc:	a801      	add	r0, sp, #4
   d65de:	f7fd ff2d 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65e2:	4620      	mov	r0, r4
   d65e4:	b003      	add	sp, #12
   d65e6:	bd30      	pop	{r4, r5, pc}

000d65e8 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d65e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d65ea:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d65ec:	f851 3b04 	ldr.w	r3, [r1], #4
   d65f0:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d65f2:	4604      	mov	r4, r0
   d65f4:	a801      	add	r0, sp, #4
   d65f6:	f7ff f8c2 	bl	d577e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d65fa:	466a      	mov	r2, sp
   d65fc:	4629      	mov	r1, r5
   d65fe:	4620      	mov	r0, r4
   d6600:	f7ff fd4e 	bl	d60a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6604:	a801      	add	r0, sp, #4
   d6606:	f7fd ff19 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d660a:	4620      	mov	r0, r4
   d660c:	b003      	add	sp, #12
   d660e:	bd30      	pop	{r4, r5, pc}

000d6610 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d6610:	b570      	push	{r4, r5, r6, lr}
   d6612:	b08a      	sub	sp, #40	; 0x28
   d6614:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d6616:	4601      	mov	r1, r0
   d6618:	a804      	add	r0, sp, #16
   d661a:	f7ff ffd1 	bl	d65c0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d661e:	4e14      	ldr	r6, [pc, #80]	; (d6670 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d6620:	a804      	add	r0, sp, #16
   d6622:	f7ff fd79 	bl	d6118 <_ZN5spark18JSONObjectIterator4nextEv>
   d6626:	b1e8      	cbz	r0, d6664 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d6628:	a904      	add	r1, sp, #16
   d662a:	4668      	mov	r0, sp
   d662c:	f7ff ffdc 	bl	d65e8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d6630:	9802      	ldr	r0, [sp, #8]
   d6632:	4631      	mov	r1, r6
   d6634:	f7ff fe78 	bl	d6328 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d6638:	4604      	mov	r4, r0
   d663a:	b110      	cbz	r0, d6642 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d663c:	1e2c      	subs	r4, r5, #0
   d663e:	bf18      	it	ne
   d6640:	2401      	movne	r4, #1
   d6642:	a801      	add	r0, sp, #4
   d6644:	f7fd fefa 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6648:	2c00      	cmp	r4, #0
   d664a:	d0e9      	beq.n	d6620 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d664c:	a904      	add	r1, sp, #16
   d664e:	4668      	mov	r0, sp
   d6650:	f7ff ffa2 	bl	d6598 <_ZNK5spark18JSONObjectIterator5valueEv>
   d6654:	4668      	mov	r0, sp
   d6656:	f7ff fd02 	bl	d605e <_ZNK5spark9JSONValue5toIntEv>
   d665a:	6028      	str	r0, [r5, #0]
   d665c:	a801      	add	r0, sp, #4
   d665e:	f7fd feed 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6662:	e7dd      	b.n	d6620 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d6664:	a805      	add	r0, sp, #20
   d6666:	f7fd fee9 	bl	d443c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d666a:	b00a      	add	sp, #40	; 0x28
   d666c:	bd70      	pop	{r4, r5, r6, pc}
   d666e:	bf00      	nop
   d6670:	000da8dc 	.word	0x000da8dc

000d6674 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6674:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6676:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d6678:	4620      	mov	r0, r4
   d667a:	4912      	ldr	r1, [pc, #72]	; (d66c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d667c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d667e:	f002 f888 	bl	d8792 <strcmp>
   d6682:	b948      	cbnz	r0, d6698 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d6684:	f001 f900 	bl	d7888 <_Z16_fetch_usbserialv>
   d6688:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d668c:	f001 f8ec 	bl	d7868 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6690:	f001 f8fa 	bl	d7888 <_Z16_fetch_usbserialv>
}
   d6694:	b003      	add	sp, #12
   d6696:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d6698:	490b      	ldr	r1, [pc, #44]	; (d66c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d669a:	4620      	mov	r0, r4
   d669c:	f002 f879 	bl	d8792 <strcmp>
   d66a0:	b970      	cbnz	r0, d66c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d66a2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d66a6:	a901      	add	r1, sp, #4
   d66a8:	4628      	mov	r0, r5
        int baud = 9600;
   d66aa:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d66ac:	f7ff ffb0 	bl	d6610 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d66b0:	f001 f862 	bl	d7778 <_Z22__fetch_global_Serial1v>
   d66b4:	9901      	ldr	r1, [sp, #4]
   d66b6:	f001 f859 	bl	d776c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d66ba:	f001 f85d 	bl	d7778 <_Z22__fetch_global_Serial1v>
   d66be:	e7e9      	b.n	d6694 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d66c0:	2000      	movs	r0, #0
   d66c2:	e7e7      	b.n	d6694 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d66c4:	000da8e1 	.word	0x000da8e1
   d66c8:	000da8e8 	.word	0x000da8e8

000d66cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d66ce:	e9d0 5300 	ldrd	r5, r3, [r0]
   d66d2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66d4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d66d6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d66da:	42ae      	cmp	r6, r5
   d66dc:	d005      	beq.n	d66ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d66de:	f105 0008 	add.w	r0, r5, #8
   d66e2:	f7ff fff3 	bl	d66cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d66e6:	3514      	adds	r5, #20
   d66e8:	e7f7      	b.n	d66da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d66ea:	6820      	ldr	r0, [r4, #0]
   d66ec:	f7fe fff8 	bl	d56e0 <free>
}
   d66f0:	4620      	mov	r0, r4
   d66f2:	bd70      	pop	{r4, r5, r6, pc}

000d66f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d66f6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d66fc:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d6700:	42ae      	cmp	r6, r5
   d6702:	d004      	beq.n	d670e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6704:	4628      	mov	r0, r5
   d6706:	f000 fedf 	bl	d74c8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d670a:	3510      	adds	r5, #16
   d670c:	e7f8      	b.n	d6700 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d670e:	6820      	ldr	r0, [r4, #0]
   d6710:	f7fe ffe6 	bl	d56e0 <free>
}
   d6714:	4620      	mov	r0, r4
   d6716:	bd70      	pop	{r4, r5, r6, pc}

000d6718 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d6718:	b510      	push	{r4, lr}
   d671a:	4604      	mov	r4, r0
   d671c:	300c      	adds	r0, #12
   d671e:	f7ff ffd5 	bl	d66cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6722:	4620      	mov	r0, r4
   d6724:	f7ff ffe6 	bl	d66f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6728:	4620      	mov	r0, r4
   d672a:	bd10      	pop	{r4, pc}

000d672c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d672c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d672e:	4b04      	ldr	r3, [pc, #16]	; (d6740 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d6730:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d6732:	f840 3b04 	str.w	r3, [r0], #4
   d6736:	f7ff ffef 	bl	d6718 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d673a:	4620      	mov	r0, r4
   d673c:	bd10      	pop	{r4, pc}
   d673e:	bf00      	nop
   d6740:	000da75c 	.word	0x000da75c

000d6744 <_ZN5spark16StreamLogHandlerD0Ev>:
   d6744:	b510      	push	{r4, lr}
   d6746:	4604      	mov	r4, r0
   d6748:	f7ff fff0 	bl	d672c <_ZN5spark16StreamLogHandlerD1Ev>
   d674c:	4620      	mov	r0, r4
   d674e:	2124      	movs	r1, #36	; 0x24
   d6750:	f001 fabc 	bl	d7ccc <_ZdlPvj>
   d6754:	4620      	mov	r0, r4
   d6756:	bd10      	pop	{r4, pc}

000d6758 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d6758:	b510      	push	{r4, lr}
   d675a:	4b03      	ldr	r3, [pc, #12]	; (d6768 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d675c:	6003      	str	r3, [r0, #0]
   d675e:	4604      	mov	r4, r0
   d6760:	f7ff ffe4 	bl	d672c <_ZN5spark16StreamLogHandlerD1Ev>
   d6764:	4620      	mov	r0, r4
   d6766:	bd10      	pop	{r4, pc}
   d6768:	000da988 	.word	0x000da988

000d676c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d676c:	b510      	push	{r4, lr}
   d676e:	4604      	mov	r4, r0
   d6770:	f7ff fff2 	bl	d6758 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6774:	4620      	mov	r0, r4
   d6776:	2124      	movs	r1, #36	; 0x24
   d6778:	f001 faa8 	bl	d7ccc <_ZdlPvj>
   d677c:	4620      	mov	r0, r4
   d677e:	bd10      	pop	{r4, pc}

000d6780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d6780:	2200      	movs	r2, #0
   d6782:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6786:	b510      	push	{r4, lr}
        capacity_(0) {
   d6788:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d678a:	680c      	ldr	r4, [r1, #0]
   d678c:	6004      	str	r4, [r0, #0]
   d678e:	684c      	ldr	r4, [r1, #4]
   d6790:	6044      	str	r4, [r0, #4]
   d6792:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6794:	600a      	str	r2, [r1, #0]
   d6796:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6798:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d679a:	608a      	str	r2, [r1, #8]
}
   d679c:	bd10      	pop	{r4, pc}

000d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d679e:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d67a0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d67a2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d67a4:	6818      	ldr	r0, [r3, #0]
   d67a6:	f7fe fd57 	bl	d5258 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d67aa:	4620      	mov	r0, r4
   d67ac:	bd10      	pop	{r4, pc}
	...

000d67b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d67b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67b4:	b087      	sub	sp, #28
   d67b6:	4680      	mov	r8, r0
   d67b8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d67ba:	4b1c      	ldr	r3, [pc, #112]	; (d682c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d67bc:	685b      	ldr	r3, [r3, #4]
   d67be:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d67c2:	4689      	mov	r9, r1
   d67c4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d67c6:	b96b      	cbnz	r3, d67e4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d67c8:	f7ff feb8 	bl	d653c <_ZN5spark10LogManager8instanceEv>
   d67cc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d67ce:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d67d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67d4:	9305      	str	r3, [sp, #20]
   d67d6:	f7fe fd37 	bl	d5248 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d67da:	7b23      	ldrb	r3, [r4, #12]
   d67dc:	b12b      	cbz	r3, d67ea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d67de:	a805      	add	r0, sp, #20
   d67e0:	f7ff ffdd 	bl	d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d67e4:	b007      	add	sp, #28
   d67e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d67ea:	2301      	movs	r3, #1
   d67ec:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d67ee:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d67f2:	fa5f f989 	uxtb.w	r9, r9
   d67f6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d67fa:	45aa      	cmp	sl, r5
   d67fc:	d012      	beq.n	d6824 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d67fe:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d6802:	4631      	mov	r1, r6
   d6804:	1d38      	adds	r0, r7, #4
   d6806:	f7ff fe25 	bl	d6454 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d680a:	4581      	cmp	r9, r0
   d680c:	d3f5      	bcc.n	d67fa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d680e:	683b      	ldr	r3, [r7, #0]
   d6810:	9a03      	ldr	r2, [sp, #12]
   d6812:	9200      	str	r2, [sp, #0]
   d6814:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d6818:	464a      	mov	r2, r9
   d681a:	4633      	mov	r3, r6
   d681c:	4641      	mov	r1, r8
   d681e:	4638      	mov	r0, r7
   d6820:	47d8      	blx	fp
   d6822:	e7ea      	b.n	d67fa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d6824:	2300      	movs	r3, #0
   d6826:	7323      	strb	r3, [r4, #12]
   d6828:	e7d9      	b.n	d67de <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d682a:	bf00      	nop
   d682c:	e000ed00 	.word	0xe000ed00

000d6830 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6834:	469b      	mov	fp, r3
   d6836:	4b1a      	ldr	r3, [pc, #104]	; (d68a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d6838:	685b      	ldr	r3, [r3, #4]
   d683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d683e:	4680      	mov	r8, r0
   d6840:	4689      	mov	r9, r1
   d6842:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d6844:	b96b      	cbnz	r3, d6862 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d6846:	f7ff fe79 	bl	d653c <_ZN5spark10LogManager8instanceEv>
   d684a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d684c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d6850:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6852:	9301      	str	r3, [sp, #4]
   d6854:	f7fe fcf8 	bl	d5248 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d6858:	7b23      	ldrb	r3, [r4, #12]
   d685a:	b12b      	cbz	r3, d6868 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d685c:	a801      	add	r0, sp, #4
   d685e:	f7ff ff9e 	bl	d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d6862:	b003      	add	sp, #12
   d6864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d6868:	2301      	movs	r3, #1
   d686a:	7323      	strb	r3, [r4, #12]
   d686c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d6870:	b2f6      	uxtb	r6, r6
   d6872:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6876:	4555      	cmp	r5, sl
   d6878:	d00e      	beq.n	d6898 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d687a:	f855 7b04 	ldr.w	r7, [r5], #4
   d687e:	4659      	mov	r1, fp
   d6880:	1d38      	adds	r0, r7, #4
   d6882:	f7ff fde7 	bl	d6454 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6886:	4286      	cmp	r6, r0
   d6888:	d3f5      	bcc.n	d6876 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d688a:	683b      	ldr	r3, [r7, #0]
   d688c:	464a      	mov	r2, r9
   d688e:	68db      	ldr	r3, [r3, #12]
   d6890:	4641      	mov	r1, r8
   d6892:	4638      	mov	r0, r7
   d6894:	4798      	blx	r3
   d6896:	e7ee      	b.n	d6876 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d6898:	2300      	movs	r3, #0
   d689a:	7323      	strb	r3, [r4, #12]
   d689c:	e7de      	b.n	d685c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d689e:	bf00      	nop
   d68a0:	e000ed00 	.word	0xe000ed00

000d68a4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d68a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d68a8:	4b16      	ldr	r3, [pc, #88]	; (d6904 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d68aa:	685b      	ldr	r3, [r3, #4]
   d68ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d68b0:	4605      	mov	r5, r0
   d68b2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d68b4:	bb1b      	cbnz	r3, d68fe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d68b6:	f7ff fe41 	bl	d653c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d68ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d68be:	4604      	mov	r4, r0
   d68c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d68c2:	9301      	str	r3, [sp, #4]
   d68c4:	f7fe fcc0 	bl	d5248 <os_mutex_recursive_lock>
   d68c8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d68cc:	2446      	movs	r4, #70	; 0x46
   d68ce:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d68d2:	45b0      	cmp	r8, r6
   d68d4:	d109      	bne.n	d68ea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d68d6:	a801      	add	r0, sp, #4
   d68d8:	f7ff ff61 	bl	d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d68dc:	42a5      	cmp	r5, r4
   d68de:	bfb4      	ite	lt
   d68e0:	2000      	movlt	r0, #0
   d68e2:	2001      	movge	r0, #1
}
   d68e4:	b002      	add	sp, #8
   d68e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d68ea:	f856 0b04 	ldr.w	r0, [r6], #4
   d68ee:	4639      	mov	r1, r7
   d68f0:	3004      	adds	r0, #4
   d68f2:	f7ff fdaf 	bl	d6454 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d68f6:	4284      	cmp	r4, r0
   d68f8:	bfa8      	it	ge
   d68fa:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d68fc:	e7e9      	b.n	d68d2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d68fe:	2000      	movs	r0, #0
   d6900:	e7f0      	b.n	d68e4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d6902:	bf00      	nop
   d6904:	e000ed00 	.word	0xe000ed00

000d6908 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6908:	b570      	push	{r4, r5, r6, lr}
   d690a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d690c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6910:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d6912:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d6916:	4282      	cmp	r2, r0
   d6918:	d007      	beq.n	d692a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d691a:	4601      	mov	r1, r0
            if (*p == value) {
   d691c:	681d      	ldr	r5, [r3, #0]
   d691e:	f851 6b04 	ldr.w	r6, [r1], #4
   d6922:	42ae      	cmp	r6, r5
   d6924:	d003      	beq.n	d692e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d6926:	4608      	mov	r0, r1
   d6928:	e7f5      	b.n	d6916 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d692a:	2000      	movs	r0, #0
}
   d692c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d692e:	1a52      	subs	r2, r2, r1
   d6930:	f001 fed1 	bl	d86d6 <memmove>
    --size_;
   d6934:	6863      	ldr	r3, [r4, #4]
   d6936:	3b01      	subs	r3, #1
   d6938:	6063      	str	r3, [r4, #4]
    return true;
   d693a:	2001      	movs	r0, #1
   d693c:	e7f6      	b.n	d692c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d693e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d693e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d6940:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d6944:	4604      	mov	r4, r0
   d6946:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6948:	9101      	str	r1, [sp, #4]
   d694a:	9303      	str	r3, [sp, #12]
   d694c:	f7fe fc7c 	bl	d5248 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6950:	a901      	add	r1, sp, #4
   d6952:	4620      	mov	r0, r4
   d6954:	f7ff ffd8 	bl	d6908 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6958:	b118      	cbz	r0, d6962 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d695a:	6863      	ldr	r3, [r4, #4]
   d695c:	b90b      	cbnz	r3, d6962 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d695e:	f7ff fe15 	bl	d658c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d6962:	a803      	add	r0, sp, #12
   d6964:	f7ff ff1b 	bl	d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d6968:	b004      	add	sp, #16
   d696a:	bd10      	pop	{r4, pc}

000d696c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d696c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d696e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d6972:	2318      	movs	r3, #24
   d6974:	4604      	mov	r4, r0
   d6976:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d697a:	42ae      	cmp	r6, r5
   d697c:	d015      	beq.n	d69aa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d697e:	f105 0110 	add.w	r1, r5, #16
   d6982:	4620      	mov	r0, r4
   d6984:	f7ff ffc0 	bl	d6908 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6988:	6863      	ldr	r3, [r4, #4]
   d698a:	b90b      	cbnz	r3, d6990 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d698c:	f7ff fdfe 	bl	d658c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d6990:	69e0      	ldr	r0, [r4, #28]
   d6992:	6929      	ldr	r1, [r5, #16]
   d6994:	6803      	ldr	r3, [r0, #0]
   d6996:	68db      	ldr	r3, [r3, #12]
   d6998:	4798      	blx	r3
        if (h.stream) {
   d699a:	6969      	ldr	r1, [r5, #20]
   d699c:	b119      	cbz	r1, d69a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d699e:	6a20      	ldr	r0, [r4, #32]
   d69a0:	6803      	ldr	r3, [r0, #0]
   d69a2:	68db      	ldr	r3, [r3, #12]
   d69a4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d69a6:	3518      	adds	r5, #24
   d69a8:	e7e7      	b.n	d697a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d69aa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d69ae:	2618      	movs	r6, #24
   d69b0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d69b4:	42ae      	cmp	r6, r5
   d69b6:	d004      	beq.n	d69c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d69b8:	4628      	mov	r0, r5
   d69ba:	f000 fd85 	bl	d74c8 <_ZN6StringD1Ev>
   d69be:	3518      	adds	r5, #24
   d69c0:	e7f8      	b.n	d69b4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d69c2:	2300      	movs	r3, #0
   d69c4:	6163      	str	r3, [r4, #20]
}
   d69c6:	bd70      	pop	{r4, r5, r6, pc}

000d69c8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d69c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d69ca:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d69cc:	f7ff fdde 	bl	d658c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d69d0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d69d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d69d6:	9301      	str	r3, [sp, #4]
   d69d8:	f7fe fc36 	bl	d5248 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d69dc:	4620      	mov	r0, r4
   d69de:	f7ff ffc5 	bl	d696c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d69e2:	a801      	add	r0, sp, #4
   d69e4:	f7ff fedb 	bl	d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d69e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d69ea:	b108      	cbz	r0, d69f0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d69ec:	f7fe fc24 	bl	d5238 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d69f0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d69f4:	2618      	movs	r6, #24
   d69f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d69fa:	42ae      	cmp	r6, r5
   d69fc:	d004      	beq.n	d6a08 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d69fe:	4628      	mov	r0, r5
   d6a00:	f000 fd62 	bl	d74c8 <_ZN6StringD1Ev>
   d6a04:	3518      	adds	r5, #24
   d6a06:	e7f8      	b.n	d69fa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d6a08:	6920      	ldr	r0, [r4, #16]
   d6a0a:	f7fe fe69 	bl	d56e0 <free>
   d6a0e:	6820      	ldr	r0, [r4, #0]
   d6a10:	f7fe fe66 	bl	d56e0 <free>
}
   d6a14:	4620      	mov	r0, r4
   d6a16:	b002      	add	sp, #8
   d6a18:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a1c <__tcf_2>:
    static LogManager mgr;
   d6a1c:	4801      	ldr	r0, [pc, #4]	; (d6a24 <__tcf_2+0x8>)
   d6a1e:	f7ff bfd3 	b.w	d69c8 <_ZN5spark10LogManagerD1Ev>
   d6a22:	bf00      	nop
   d6a24:	2003e594 	.word	0x2003e594

000d6a28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d6a28:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a2c:	4606      	mov	r6, r0
   d6a2e:	460c      	mov	r4, r1
   d6a30:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6a32:	d927      	bls.n	d6a84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d6a34:	4290      	cmp	r0, r2
   d6a36:	d226      	bcs.n	d6a86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d6a38:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d6a3c:	1a6c      	subs	r4, r5, r1
   d6a3e:	f1a1 0714 	sub.w	r7, r1, #20
   d6a42:	4404      	add	r4, r0
        capacity_(0) {
   d6a44:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d6a46:	42af      	cmp	r7, r5
   d6a48:	d03d      	beq.n	d6ac6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d6a4a:	b1a4      	cbz	r4, d6a76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d6a4c:	682b      	ldr	r3, [r5, #0]
   d6a4e:	6023      	str	r3, [r4, #0]
   d6a50:	88ab      	ldrh	r3, [r5, #4]
   d6a52:	80a3      	strh	r3, [r4, #4]
   d6a54:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d6a58:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d6a5a:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d6a5e:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6a60:	68ab      	ldr	r3, [r5, #8]
   d6a62:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a64:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a66:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6a68:	68ea      	ldr	r2, [r5, #12]
   d6a6a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a6c:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a6e:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6a70:	692a      	ldr	r2, [r5, #16]
   d6a72:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a74:	612b      	str	r3, [r5, #16]
   d6a76:	f105 0008 	add.w	r0, r5, #8
   d6a7a:	f7ff fe27 	bl	d66cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d6a7e:	3d14      	subs	r5, #20
   d6a80:	3c14      	subs	r4, #20
   d6a82:	e7e0      	b.n	d6a46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d6a84:	d01f      	beq.n	d6ac6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d6a86:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d6a88:	42ac      	cmp	r4, r5
   d6a8a:	d01c      	beq.n	d6ac6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d6a8c:	b1a6      	cbz	r6, d6ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d6a8e:	6823      	ldr	r3, [r4, #0]
   d6a90:	6033      	str	r3, [r6, #0]
   d6a92:	88a3      	ldrh	r3, [r4, #4]
   d6a94:	80b3      	strh	r3, [r6, #4]
   d6a96:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d6a9a:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d6a9c:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d6aa0:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6aa2:	68a3      	ldr	r3, [r4, #8]
   d6aa4:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6aa6:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6aa8:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6aaa:	68e2      	ldr	r2, [r4, #12]
   d6aac:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6aae:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ab0:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6ab2:	6922      	ldr	r2, [r4, #16]
   d6ab4:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ab6:	6123      	str	r3, [r4, #16]
   d6ab8:	f104 0008 	add.w	r0, r4, #8
   d6abc:	f7ff fe06 	bl	d66cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d6ac0:	3414      	adds	r4, #20
   d6ac2:	3614      	adds	r6, #20
   d6ac4:	e7e0      	b.n	d6a88 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d6ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ac8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6aca:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d6ace:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6ad0:	4604      	mov	r4, r0
   d6ad2:	460e      	mov	r6, r1
   d6ad4:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6ad6:	db0d      	blt.n	d6af4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d6ad8:	3501      	adds	r5, #1
        if (n > 0) {
   d6ada:	2d00      	cmp	r5, #0
   d6adc:	6800      	ldr	r0, [r0, #0]
   d6ade:	dd04      	ble.n	d6aea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d6ae0:	00a9      	lsls	r1, r5, #2
   d6ae2:	f7fe fe05 	bl	d56f0 <realloc>
            if (!d) {
   d6ae6:	b918      	cbnz	r0, d6af0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d6ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d6aea:	f7fe fdf9 	bl	d56e0 <free>
        T* d = nullptr;
   d6aee:	2000      	movs	r0, #0
        data_ = d;
   d6af0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6af2:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d6af4:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6af6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6af8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d6afc:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6afe:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d6b02:	1d08      	adds	r0, r1, #4
   d6b04:	f001 fde7 	bl	d86d6 <memmove>
    new(p) T(std::move(value));
   d6b08:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6b0c:	6863      	ldr	r3, [r4, #4]
   d6b0e:	3301      	adds	r3, #1
   d6b10:	6063      	str	r3, [r4, #4]
    return true;
   d6b12:	2001      	movs	r0, #1
   d6b14:	e7e8      	b.n	d6ae8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d6b16 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d6b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d6b18:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d6b1c:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d6b1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	460d      	mov	r5, r1
   d6b24:	f7fe fb90 	bl	d5248 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d6b28:	e9d4 3100 	ldrd	r3, r1, [r4]
   d6b2c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d6b30:	4283      	cmp	r3, r0
   d6b32:	461a      	mov	r2, r3
   d6b34:	d00b      	beq.n	d6b4e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d6b36:	6812      	ldr	r2, [r2, #0]
   d6b38:	42aa      	cmp	r2, r5
   d6b3a:	f103 0304 	add.w	r3, r3, #4
   d6b3e:	d1f7      	bne.n	d6b30 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d6b40:	a801      	add	r0, sp, #4
   d6b42:	f7ff fe2c 	bl	d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d6b46:	2500      	movs	r5, #0
}
   d6b48:	4628      	mov	r0, r5
   d6b4a:	b003      	add	sp, #12
   d6b4c:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d6b4e:	462a      	mov	r2, r5
   d6b50:	4620      	mov	r0, r4
   d6b52:	f7ff ffb9 	bl	d6ac8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6b56:	4605      	mov	r5, r0
   d6b58:	2800      	cmp	r0, #0
   d6b5a:	d0f1      	beq.n	d6b40 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d6b5c:	6863      	ldr	r3, [r4, #4]
   d6b5e:	2b01      	cmp	r3, #1
   d6b60:	d101      	bne.n	d6b66 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d6b62:	f7ff fd07 	bl	d6574 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d6b66:	a801      	add	r0, sp, #4
   d6b68:	f7ff fe19 	bl	d679e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6b6c:	e7ec      	b.n	d6b48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d6b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d6b6e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b72:	4604      	mov	r4, r0
   d6b74:	460d      	mov	r5, r1
   d6b76:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6b78:	d914      	bls.n	d6ba4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6b7a:	4290      	cmp	r0, r2
   d6b7c:	d213      	bcs.n	d6ba6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d6b7e:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d6b82:	1a75      	subs	r5, r6, r1
   d6b84:	f1a1 0710 	sub.w	r7, r1, #16
   d6b88:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6b8a:	42b7      	cmp	r7, r6
   d6b8c:	d018      	beq.n	d6bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6b8e:	b11c      	cbz	r4, d6b98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6b90:	4631      	mov	r1, r6
   d6b92:	4620      	mov	r0, r4
   d6b94:	f000 fd14 	bl	d75c0 <_ZN6StringC1EOS_>
                end->~T();
   d6b98:	4630      	mov	r0, r6
   d6b9a:	f000 fc95 	bl	d74c8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d6b9e:	3e10      	subs	r6, #16
   d6ba0:	3c10      	subs	r4, #16
   d6ba2:	e7f2      	b.n	d6b8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d6ba4:	d00c      	beq.n	d6bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6ba6:	42b5      	cmp	r5, r6
   d6ba8:	d00a      	beq.n	d6bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6baa:	b11c      	cbz	r4, d6bb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6bac:	4629      	mov	r1, r5
   d6bae:	4620      	mov	r0, r4
   d6bb0:	f000 fd06 	bl	d75c0 <_ZN6StringC1EOS_>
                p->~T();
   d6bb4:	4628      	mov	r0, r5
   d6bb6:	f000 fc87 	bl	d74c8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d6bba:	3510      	adds	r5, #16
   d6bbc:	3410      	adds	r4, #16
   d6bbe:	e7f2      	b.n	d6ba6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d6bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d6bc2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6bc4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6bc6:	4605      	mov	r5, r0
        if (n > 0) {
   d6bc8:	dd11      	ble.n	d6bee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6bca:	0130      	lsls	r0, r6, #4
   d6bcc:	f7fe fd80 	bl	d56d0 <malloc>
            if (!d) {
   d6bd0:	4604      	mov	r4, r0
   d6bd2:	b158      	cbz	r0, d6bec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6bd4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6bd8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6bdc:	f7ff ffc7 	bl	d6b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d6be0:	6828      	ldr	r0, [r5, #0]
   d6be2:	f7fe fd7d 	bl	d56e0 <free>
        data_ = d;
   d6be6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6be8:	60ae      	str	r6, [r5, #8]
        return true;
   d6bea:	2001      	movs	r0, #1
    }
   d6bec:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6bee:	2400      	movs	r4, #0
   d6bf0:	e7f6      	b.n	d6be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d6bf2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6bf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6bf6:	4691      	mov	r9, r2
   d6bf8:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d6bfa:	2300      	movs	r3, #0
   d6bfc:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d6bfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d6c02:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6c04:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d6c06:	4299      	cmp	r1, r3
        capacity_(0) {
   d6c08:	e9c0 3300 	strd	r3, r3, [r0]
   d6c0c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6c10:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6c14:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6c18:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6c1a:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d6c1c:	dc23      	bgt.n	d6c66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d6c1e:	e9d9 5700 	ldrd	r5, r7, [r9]
   d6c22:	2314      	movs	r3, #20
   d6c24:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d6c28:	42af      	cmp	r7, r5
   d6c2a:	d03b      	beq.n	d6ca4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d6c2c:	4629      	mov	r1, r5
   d6c2e:	a80d      	add	r0, sp, #52	; 0x34
   d6c30:	f000 fcc6 	bl	d75c0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d6c34:	a90d      	add	r1, sp, #52	; 0x34
   d6c36:	a811      	add	r0, sp, #68	; 0x44
   d6c38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d6c3a:	f000 fcc1 	bl	d75c0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c3e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d6c42:	4299      	cmp	r1, r3
   d6c44:	da1b      	bge.n	d6c7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d6c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d6c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d6c4a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6c4e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6c52:	4631      	mov	r1, r6
   d6c54:	f106 0010 	add.w	r0, r6, #16
   d6c58:	f7ff ff89 	bl	d6b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6c5c:	b9ee      	cbnz	r6, d6c9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d6c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6c60:	3301      	adds	r3, #1
   d6c62:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d6c64:	e011      	b.n	d6c8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d6c66:	a80a      	add	r0, sp, #40	; 0x28
   d6c68:	f7ff ffab 	bl	d6bc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6c6c:	2800      	cmp	r0, #0
   d6c6e:	d1d6      	bne.n	d6c1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d6c70:	a80a      	add	r0, sp, #40	; 0x28
   d6c72:	f7ff fd3f 	bl	d66f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6c76:	4620      	mov	r0, r4
   d6c78:	b017      	add	sp, #92	; 0x5c
   d6c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c7e:	3101      	adds	r1, #1
   d6c80:	a80a      	add	r0, sp, #40	; 0x28
   d6c82:	f7ff ff9e 	bl	d6bc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6c86:	2800      	cmp	r0, #0
   d6c88:	d1dd      	bne.n	d6c46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d6c8a:	a811      	add	r0, sp, #68	; 0x44
   d6c8c:	f000 fc1c 	bl	d74c8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d6c90:	a80d      	add	r0, sp, #52	; 0x34
   d6c92:	f000 fc19 	bl	d74c8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d6c96:	3514      	adds	r5, #20
   d6c98:	e7c6      	b.n	d6c28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d6c9a:	a911      	add	r1, sp, #68	; 0x44
   d6c9c:	4630      	mov	r0, r6
   d6c9e:	f000 fc8f 	bl	d75c0 <_ZN6StringC1EOS_>
   d6ca2:	e7dc      	b.n	d6c5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d6ca4:	2600      	movs	r6, #0
   d6ca6:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d6caa:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d6cac:	4637      	mov	r7, r6
   d6cae:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d6cb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d6cb6:	429e      	cmp	r6, r3
   d6cb8:	f280 8097 	bge.w	d6dea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d6cbc:	0133      	lsls	r3, r6, #4
   d6cbe:	58d3      	ldr	r3, [r2, r3]
   d6cc0:	9308      	str	r3, [sp, #32]
        if (!category) {
   d6cc2:	b90b      	cbnz	r3, d6cc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d6cc4:	3601      	adds	r6, #1
   d6cc6:	e7f4      	b.n	d6cb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d6cc8:	fb0a f306 	mul.w	r3, sl, r6
   d6ccc:	9709      	str	r7, [sp, #36]	; 0x24
   d6cce:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6cd0:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d6cd2:	a909      	add	r1, sp, #36	; 0x24
   d6cd4:	a808      	add	r0, sp, #32
   d6cd6:	f7ff fb00 	bl	d62da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6cda:	4683      	mov	fp, r0
   d6cdc:	2800      	cmp	r0, #0
   d6cde:	d0f1      	beq.n	d6cc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6ce0:	4601      	mov	r1, r0
   d6ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d6ce4:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6ce8:	f10d 031f 	add.w	r3, sp, #31
   d6cec:	4628      	mov	r0, r5
   d6cee:	f7ff fb73 	bl	d63d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6cf2:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6cf6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6cf8:	f1b8 0f00 	cmp.w	r8, #0
   d6cfc:	d166      	bne.n	d6dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6cfe:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d6d02:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d6d06:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d6d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6d0e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d6d12:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d6d16:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d1a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d6d1e:	4293      	cmp	r3, r2
   d6d20:	db1a      	blt.n	d6d58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d6d22:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d6d26:	f1bb 0f00 	cmp.w	fp, #0
   d6d2a:	dd4a      	ble.n	d6dc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d6d2c:	fb0a f00b 	mul.w	r0, sl, fp
   d6d30:	f7fe fcce 	bl	d56d0 <malloc>
            if (!d) {
   d6d34:	9004      	str	r0, [sp, #16]
   d6d36:	2800      	cmp	r0, #0
   d6d38:	d045      	beq.n	d6dc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d6d3a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6d3e:	fb0a 1202 	mla	r2, sl, r2, r1
   d6d42:	f7ff fe71 	bl	d6a28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6d46:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d6d48:	6828      	ldr	r0, [r5, #0]
   d6d4a:	9304      	str	r3, [sp, #16]
   d6d4c:	f7fe fcc8 	bl	d56e0 <free>
        data_ = d;
   d6d50:	9b04      	ldr	r3, [sp, #16]
   d6d52:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d6d54:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d6d58:	9b01      	ldr	r3, [sp, #4]
   d6d5a:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d6d5e:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d6d60:	fb0a f303 	mul.w	r3, sl, r3
   d6d64:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d6d68:	f101 0014 	add.w	r0, r1, #20
   d6d6c:	fb0a b202 	mla	r2, sl, r2, fp
   d6d70:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d6d72:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d6d74:	f7ff fe58 	bl	d6a28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6d78:	9904      	ldr	r1, [sp, #16]
   d6d7a:	b1a9      	cbz	r1, d6da8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d6d7c:	9b05      	ldr	r3, [sp, #20]
   d6d7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d6d80:	f84b 2003 	str.w	r2, [fp, r3]
   d6d84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d6d88:	808b      	strh	r3, [r1, #4]
   d6d8a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d6d8e:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d6d90:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d6d94:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6d96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d6d98:	608b      	str	r3, [r1, #8]
   d6d9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d6d9c:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d6d9e:	60cb      	str	r3, [r1, #12]
   d6da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d6da2:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d6da4:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6da6:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d6da8:	686b      	ldr	r3, [r5, #4]
   d6daa:	3301      	adds	r3, #1
   d6dac:	606b      	str	r3, [r5, #4]
   d6dae:	a813      	add	r0, sp, #76	; 0x4c
   d6db0:	f7ff fc8c 	bl	d66cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6db4:	f1b8 0f00 	cmp.w	r8, #0
   d6db8:	d008      	beq.n	d6dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d6dba:	a80d      	add	r0, sp, #52	; 0x34
   d6dbc:	f7ff fc86 	bl	d66cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6dc0:	e756      	b.n	d6c70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d6dc2:	4643      	mov	r3, r8
   d6dc4:	e7c0      	b.n	d6d48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6dc6:	f04f 0801 	mov.w	r8, #1
   d6dca:	e7f0      	b.n	d6dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d6dcc:	9b01      	ldr	r3, [sp, #4]
   d6dce:	682d      	ldr	r5, [r5, #0]
   d6dd0:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d6dd4:	9b08      	ldr	r3, [sp, #32]
   d6dd6:	781b      	ldrb	r3, [r3, #0]
   d6dd8:	b92b      	cbnz	r3, d6de6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d6dda:	f8d9 3000 	ldr.w	r3, [r9]
   d6dde:	9a02      	ldr	r2, [sp, #8]
   d6de0:	4413      	add	r3, r2
   d6de2:	7c1b      	ldrb	r3, [r3, #16]
   d6de4:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d6de6:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d6de8:	e773      	b.n	d6cd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dea:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6dec:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dee:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6df0:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6df2:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6df4:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d6df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d6df8:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dfa:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6dfc:	60a2      	str	r2, [r4, #8]
   d6dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d6e00:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e02:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6e04:	60e2      	str	r2, [r4, #12]
   d6e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d6e08:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e0a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e0c:	6122      	str	r2, [r4, #16]
   d6e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d6e10:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d6e12:	9b03      	ldr	r3, [sp, #12]
   d6e14:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d6e16:	6162      	str	r2, [r4, #20]
   d6e18:	7623      	strb	r3, [r4, #24]
   d6e1a:	e7ce      	b.n	d6dba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d6e1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6e1e:	4605      	mov	r5, r0
   d6e20:	4b09      	ldr	r3, [pc, #36]	; (d6e48 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6e22:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6e26:	4604      	mov	r4, r0
   d6e28:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6e2a:	a801      	add	r0, sp, #4
   d6e2c:	4611      	mov	r1, r2
   d6e2e:	f7fd fd0c 	bl	d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6e32:	aa01      	add	r2, sp, #4
   d6e34:	4631      	mov	r1, r6
   d6e36:	4628      	mov	r0, r5
   d6e38:	f7ff fedb 	bl	d6bf2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6e3c:	a801      	add	r0, sp, #4
   d6e3e:	f7fd fcc3 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6e42:	4620      	mov	r0, r4
   d6e44:	b004      	add	sp, #16
   d6e46:	bd70      	pop	{r4, r5, r6, pc}
   d6e48:	000da75c 	.word	0x000da75c

000d6e4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d6e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e4e:	460f      	mov	r7, r1
   d6e50:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6e52:	4926      	ldr	r1, [pc, #152]	; (d6eec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d6e54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6e56:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d6e58:	4616      	mov	r6, r2
   d6e5a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6e5c:	f001 fc99 	bl	d8792 <strcmp>
   d6e60:	bb00      	cbnz	r0, d6ea4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d6e62:	b1e4      	cbz	r4, d6e9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6e64:	4629      	mov	r1, r5
   d6e66:	4668      	mov	r0, sp
   d6e68:	f7ff fc8a 	bl	d6780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6e6c:	4920      	ldr	r1, [pc, #128]	; (d6ef0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d6e6e:	2024      	movs	r0, #36	; 0x24
   d6e70:	f000 ff2e 	bl	d7cd0 <_ZnwjRKSt9nothrow_t>
   d6e74:	4605      	mov	r5, r0
   d6e76:	b170      	cbz	r0, d6e96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d6e78:	4669      	mov	r1, sp
   d6e7a:	a803      	add	r0, sp, #12
   d6e7c:	f7fd fce5 	bl	d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6e80:	aa03      	add	r2, sp, #12
   d6e82:	4631      	mov	r1, r6
   d6e84:	4628      	mov	r0, r5
   d6e86:	f7ff ffc9 	bl	d6e1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6e8a:	a803      	add	r0, sp, #12
   d6e8c:	f7fd fc9c 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d6e90:	4b18      	ldr	r3, [pc, #96]	; (d6ef4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d6e92:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d6e94:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6e96:	4668      	mov	r0, sp
   d6e98:	f7fd fc96 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e9c:	462c      	mov	r4, r5
}
   d6e9e:	4620      	mov	r0, r4
   d6ea0:	b007      	add	sp, #28
   d6ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6ea4:	4914      	ldr	r1, [pc, #80]	; (d6ef8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d6ea6:	4638      	mov	r0, r7
   d6ea8:	f001 fc73 	bl	d8792 <strcmp>
   d6eac:	b9e0      	cbnz	r0, d6ee8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d6eae:	2c00      	cmp	r4, #0
   d6eb0:	d0f5      	beq.n	d6e9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6eb2:	4629      	mov	r1, r5
   d6eb4:	4668      	mov	r0, sp
   d6eb6:	f7ff fc63 	bl	d6780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6eba:	490d      	ldr	r1, [pc, #52]	; (d6ef0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d6ebc:	2024      	movs	r0, #36	; 0x24
   d6ebe:	f000 ff07 	bl	d7cd0 <_ZnwjRKSt9nothrow_t>
   d6ec2:	4605      	mov	r5, r0
   d6ec4:	2800      	cmp	r0, #0
   d6ec6:	d0e6      	beq.n	d6e96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d6ec8:	4669      	mov	r1, sp
   d6eca:	a803      	add	r0, sp, #12
   d6ecc:	f7fd fcbd 	bl	d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6ed0:	aa03      	add	r2, sp, #12
   d6ed2:	4631      	mov	r1, r6
   d6ed4:	4628      	mov	r0, r5
   d6ed6:	f7ff ffa1 	bl	d6e1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6eda:	a803      	add	r0, sp, #12
   d6edc:	f7fd fc74 	bl	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6ee0:	4b06      	ldr	r3, [pc, #24]	; (d6efc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d6ee2:	602b      	str	r3, [r5, #0]
   d6ee4:	622c      	str	r4, [r5, #32]
}
   d6ee6:	e7d6      	b.n	d6e96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d6ee8:	2400      	movs	r4, #0
   d6eea:	e7d8      	b.n	d6e9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d6eec:	000da8f0 	.word	0x000da8f0
   d6ef0:	000daabc 	.word	0x000daabc
   d6ef4:	000da988 	.word	0x000da988
   d6ef8:	000da8f4 	.word	0x000da8f4
   d6efc:	000da970 	.word	0x000da970

000d6f00 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d6f00:	4b01      	ldr	r3, [pc, #4]	; (d6f08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6f02:	4a02      	ldr	r2, [pc, #8]	; (d6f0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6f04:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6f06:	4770      	bx	lr
   d6f08:	2003e590 	.word	0x2003e590
   d6f0c:	000da905 	.word	0x000da905

000d6f10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f14:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d6f16:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6f1a:	4604      	mov	r4, r0
   d6f1c:	460e      	mov	r6, r1
   d6f1e:	4617      	mov	r7, r2
   d6f20:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d6f22:	f000 fcb1 	bl	d7888 <_Z16_fetch_usbserialv>
   d6f26:	4581      	cmp	r9, r0
   d6f28:	d04c      	beq.n	d6fc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d6f2a:	792b      	ldrb	r3, [r5, #4]
   d6f2c:	0719      	lsls	r1, r3, #28
   d6f2e:	d504      	bpl.n	d6f3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d6f30:	696a      	ldr	r2, [r5, #20]
   d6f32:	4954      	ldr	r1, [pc, #336]	; (d7084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6f34:	4620      	mov	r0, r4
   d6f36:	f7ff fa40 	bl	d63ba <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d6f3a:	f1b8 0f00 	cmp.w	r8, #0
   d6f3e:	d00d      	beq.n	d6f5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d6f40:	215b      	movs	r1, #91	; 0x5b
   d6f42:	4620      	mov	r0, r4
   d6f44:	f7ff fa2d 	bl	d63a2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6f48:	4641      	mov	r1, r8
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	f7ff fa1a 	bl	d6384 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6f50:	6823      	ldr	r3, [r4, #0]
   d6f52:	494d      	ldr	r1, [pc, #308]	; (d7088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d6f54:	68db      	ldr	r3, [r3, #12]
   d6f56:	2202      	movs	r2, #2
   d6f58:	4620      	mov	r0, r4
   d6f5a:	4798      	blx	r3
    if (attr.has_file) {
   d6f5c:	792b      	ldrb	r3, [r5, #4]
   d6f5e:	07da      	lsls	r2, r3, #31
   d6f60:	d523      	bpl.n	d6faa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d6f62:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d6f66:	212f      	movs	r1, #47	; 0x2f
   d6f68:	4640      	mov	r0, r8
   d6f6a:	f001 fc5c 	bl	d8826 <strrchr>
    if (s1) {
   d6f6e:	b108      	cbz	r0, d6f74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d6f70:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d6f74:	4641      	mov	r1, r8
   d6f76:	4620      	mov	r0, r4
   d6f78:	f7ff fa04 	bl	d6384 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6f7c:	792b      	ldrb	r3, [r5, #4]
   d6f7e:	079b      	lsls	r3, r3, #30
   d6f80:	d508      	bpl.n	d6f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d6f82:	213a      	movs	r1, #58	; 0x3a
   d6f84:	4620      	mov	r0, r4
   d6f86:	f7ff fa0c 	bl	d63a2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d6f8a:	68ea      	ldr	r2, [r5, #12]
   d6f8c:	493f      	ldr	r1, [pc, #252]	; (d708c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d6f8e:	4620      	mov	r0, r4
   d6f90:	f7ff fa13 	bl	d63ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d6f94:	792a      	ldrb	r2, [r5, #4]
   d6f96:	6823      	ldr	r3, [r4, #0]
   d6f98:	f012 0f04 	tst.w	r2, #4
   d6f9c:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d6f9e:	bf14      	ite	ne
   d6fa0:	493b      	ldrne	r1, [pc, #236]	; (d7090 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d6fa2:	493c      	ldreq	r1, [pc, #240]	; (d7094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d6fa4:	2202      	movs	r2, #2
            write(": ", 2);
   d6fa6:	4620      	mov	r0, r4
   d6fa8:	4798      	blx	r3
    if (attr.has_function) {
   d6faa:	792b      	ldrb	r3, [r5, #4]
   d6fac:	0758      	lsls	r0, r3, #29
   d6fae:	d51d      	bpl.n	d6fec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6fb0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d6fb2:	460b      	mov	r3, r1
   d6fb4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d6fb6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6fba:	b160      	cbz	r0, d6fd6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d6fbc:	2820      	cmp	r0, #32
   d6fbe:	d108      	bne.n	d6fd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d6fc0:	4619      	mov	r1, r3
   d6fc2:	e7f7      	b.n	d6fb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d6fc4:	4834      	ldr	r0, [pc, #208]	; (d7098 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6fc6:	f000 f966 	bl	d7296 <_ZN5spark12NetworkClass9listeningEv>
   d6fca:	2800      	cmp	r0, #0
   d6fcc:	d0ad      	beq.n	d6f2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d6fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d6fd2:	2828      	cmp	r0, #40	; 0x28
   d6fd4:	d1ee      	bne.n	d6fb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d6fd6:	6823      	ldr	r3, [r4, #0]
   d6fd8:	1a52      	subs	r2, r2, r1
   d6fda:	68db      	ldr	r3, [r3, #12]
   d6fdc:	4620      	mov	r0, r4
   d6fde:	4798      	blx	r3
        write("(): ", 4);
   d6fe0:	6823      	ldr	r3, [r4, #0]
   d6fe2:	492e      	ldr	r1, [pc, #184]	; (d709c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6fe4:	68db      	ldr	r3, [r3, #12]
   d6fe6:	2204      	movs	r2, #4
   d6fe8:	4620      	mov	r0, r4
   d6fea:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d6fec:	2100      	movs	r1, #0
   d6fee:	4638      	mov	r0, r7
   d6ff0:	f7fe fa9a 	bl	d5528 <log_level_name>
   d6ff4:	4601      	mov	r1, r0
    write(s);
   d6ff6:	4620      	mov	r0, r4
   d6ff8:	f7ff f9c4 	bl	d6384 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6ffc:	6823      	ldr	r3, [r4, #0]
   d6ffe:	4925      	ldr	r1, [pc, #148]	; (d7094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7000:	68db      	ldr	r3, [r3, #12]
   d7002:	2202      	movs	r2, #2
   d7004:	4620      	mov	r0, r4
   d7006:	4798      	blx	r3
    if (msg) {
   d7008:	b11e      	cbz	r6, d7012 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d700a:	4631      	mov	r1, r6
   d700c:	4620      	mov	r0, r4
   d700e:	f7ff f9b9 	bl	d6384 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d7012:	792b      	ldrb	r3, [r5, #4]
   d7014:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7018:	d02c      	beq.n	d7074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d701a:	6823      	ldr	r3, [r4, #0]
   d701c:	4920      	ldr	r1, [pc, #128]	; (d70a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d701e:	68db      	ldr	r3, [r3, #12]
   d7020:	2202      	movs	r2, #2
   d7022:	4620      	mov	r0, r4
   d7024:	4798      	blx	r3
        if (attr.has_code) {
   d7026:	792b      	ldrb	r3, [r5, #4]
   d7028:	06d9      	lsls	r1, r3, #27
   d702a:	d50a      	bpl.n	d7042 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d702c:	6823      	ldr	r3, [r4, #0]
   d702e:	491d      	ldr	r1, [pc, #116]	; (d70a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7030:	68db      	ldr	r3, [r3, #12]
   d7032:	2207      	movs	r2, #7
   d7034:	4620      	mov	r0, r4
   d7036:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d7038:	69aa      	ldr	r2, [r5, #24]
   d703a:	491b      	ldr	r1, [pc, #108]	; (d70a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d703c:	4620      	mov	r0, r4
   d703e:	f7ff f9bc 	bl	d63ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d7042:	792b      	ldrb	r3, [r5, #4]
   d7044:	069a      	lsls	r2, r3, #26
   d7046:	d511      	bpl.n	d706c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d7048:	06db      	lsls	r3, r3, #27
   d704a:	d505      	bpl.n	d7058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d704c:	6823      	ldr	r3, [r4, #0]
   d704e:	4910      	ldr	r1, [pc, #64]	; (d7090 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d7050:	68db      	ldr	r3, [r3, #12]
   d7052:	2202      	movs	r2, #2
   d7054:	4620      	mov	r0, r4
   d7056:	4798      	blx	r3
            write("details = ", 10);
   d7058:	6823      	ldr	r3, [r4, #0]
   d705a:	4914      	ldr	r1, [pc, #80]	; (d70ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d705c:	68db      	ldr	r3, [r3, #12]
   d705e:	4620      	mov	r0, r4
   d7060:	220a      	movs	r2, #10
   d7062:	4798      	blx	r3
            write(attr.details);
   d7064:	69e9      	ldr	r1, [r5, #28]
   d7066:	4620      	mov	r0, r4
   d7068:	f7ff f98c 	bl	d6384 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d706c:	215d      	movs	r1, #93	; 0x5d
   d706e:	4620      	mov	r0, r4
   d7070:	f7ff f997 	bl	d63a2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d7074:	6823      	ldr	r3, [r4, #0]
   d7076:	490e      	ldr	r1, [pc, #56]	; (d70b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7078:	68db      	ldr	r3, [r3, #12]
   d707a:	4620      	mov	r0, r4
   d707c:	2202      	movs	r2, #2
}
   d707e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d7082:	4718      	bx	r3
   d7084:	000da909 	.word	0x000da909
   d7088:	000da910 	.word	0x000da910
   d708c:	000da8d0 	.word	0x000da8d0
   d7090:	000da913 	.word	0x000da913
   d7094:	000da918 	.word	0x000da918
   d7098:	2003e5bc 	.word	0x2003e5bc
   d709c:	000da916 	.word	0x000da916
   d70a0:	000da91b 	.word	0x000da91b
   d70a4:	000da91e 	.word	0x000da91e
   d70a8:	000da926 	.word	0x000da926
   d70ac:	000da929 	.word	0x000da929
   d70b0:	000da934 	.word	0x000da934

000d70b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d70b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d70b8:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d70ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d70be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d70c0:	4605      	mov	r5, r0
   d70c2:	460f      	mov	r7, r1
   d70c4:	4690      	mov	r8, r2
   d70c6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d70c8:	f000 fbde 	bl	d7888 <_Z16_fetch_usbserialv>
   d70cc:	4581      	cmp	r9, r0
   d70ce:	d105      	bne.n	d70dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d70d0:	4849      	ldr	r0, [pc, #292]	; (d71f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d70d2:	f000 f8e0 	bl	d7296 <_ZN5spark12NetworkClass9listeningEv>
   d70d6:	2800      	cmp	r0, #0
   d70d8:	f040 808a 	bne.w	d71f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d70dc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d70de:	4a47      	ldr	r2, [pc, #284]	; (d71fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d70e0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d70e2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d70e6:	a801      	add	r0, sp, #4
        strm_(stream) {
   d70e8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d70ea:	f88d 9008 	strb.w	r9, [sp, #8]
   d70ee:	f7ff f83c 	bl	d616a <_ZN5spark10JSONWriter11beginObjectEv>
   d70f2:	4649      	mov	r1, r9
   d70f4:	4640      	mov	r0, r8
   d70f6:	f7fe fa17 	bl	d5528 <log_level_name>
    json.name("l", 1).value(s);
   d70fa:	4941      	ldr	r1, [pc, #260]	; (d7200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d70fc:	4680      	mov	r8, r0
   d70fe:	2201      	movs	r2, #1
   d7100:	a801      	add	r0, sp, #4
   d7102:	f7ff f8bb 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d7106:	4641      	mov	r1, r8
   d7108:	f7ff f92e 	bl	d6368 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d710c:	b13f      	cbz	r7, d711e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d710e:	493d      	ldr	r1, [pc, #244]	; (d7204 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7110:	2201      	movs	r2, #1
   d7112:	a801      	add	r0, sp, #4
   d7114:	f7ff f8b2 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d7118:	4639      	mov	r1, r7
   d711a:	f7ff f925 	bl	d6368 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d711e:	b13e      	cbz	r6, d7130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7120:	4939      	ldr	r1, [pc, #228]	; (d7208 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7122:	2201      	movs	r2, #1
   d7124:	a801      	add	r0, sp, #4
   d7126:	f7ff f8a9 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d712a:	4631      	mov	r1, r6
   d712c:	f7ff f91c 	bl	d6368 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d7130:	7923      	ldrb	r3, [r4, #4]
   d7132:	07df      	lsls	r7, r3, #31
   d7134:	d50e      	bpl.n	d7154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7136:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d7138:	212f      	movs	r1, #47	; 0x2f
   d713a:	4630      	mov	r0, r6
   d713c:	f001 fb73 	bl	d8826 <strrchr>
    if (s1) {
   d7140:	b100      	cbz	r0, d7144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7142:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d7144:	4931      	ldr	r1, [pc, #196]	; (d720c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7146:	2201      	movs	r2, #1
   d7148:	a801      	add	r0, sp, #4
   d714a:	f7ff f897 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d714e:	4631      	mov	r1, r6
   d7150:	f7ff f90a 	bl	d6368 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d7154:	7923      	ldrb	r3, [r4, #4]
   d7156:	079e      	lsls	r6, r3, #30
   d7158:	d507      	bpl.n	d716a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d715a:	492d      	ldr	r1, [pc, #180]	; (d7210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d715c:	2202      	movs	r2, #2
   d715e:	a801      	add	r0, sp, #4
   d7160:	f7ff f88c 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d7164:	68e1      	ldr	r1, [r4, #12]
   d7166:	f7ff f80d 	bl	d6184 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d716a:	7923      	ldrb	r3, [r4, #4]
   d716c:	0758      	lsls	r0, r3, #29
   d716e:	d514      	bpl.n	d719a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7170:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7172:	4633      	mov	r3, r6
   d7174:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d7176:	f813 2b01 	ldrb.w	r2, [r3], #1
   d717a:	b12a      	cbz	r2, d7188 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d717c:	2a20      	cmp	r2, #32
   d717e:	d101      	bne.n	d7184 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7180:	461e      	mov	r6, r3
   d7182:	e7f7      	b.n	d7174 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d7184:	2a28      	cmp	r2, #40	; 0x28
   d7186:	d1f5      	bne.n	d7174 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d7188:	4922      	ldr	r1, [pc, #136]	; (d7214 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d718a:	2202      	movs	r2, #2
   d718c:	a801      	add	r0, sp, #4
   d718e:	f7ff f875 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d7192:	1bba      	subs	r2, r7, r6
   d7194:	4631      	mov	r1, r6
   d7196:	f7ff f881 	bl	d629c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d719a:	7923      	ldrb	r3, [r4, #4]
   d719c:	0719      	lsls	r1, r3, #28
   d719e:	d507      	bpl.n	d71b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d71a0:	491d      	ldr	r1, [pc, #116]	; (d7218 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d71a2:	2201      	movs	r2, #1
   d71a4:	a801      	add	r0, sp, #4
   d71a6:	f7ff f869 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d71aa:	6961      	ldr	r1, [r4, #20]
   d71ac:	f7fe fffc 	bl	d61a8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d71b0:	7923      	ldrb	r3, [r4, #4]
   d71b2:	06da      	lsls	r2, r3, #27
   d71b4:	d508      	bpl.n	d71c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d71b6:	2204      	movs	r2, #4
   d71b8:	4918      	ldr	r1, [pc, #96]	; (d721c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d71ba:	eb0d 0002 	add.w	r0, sp, r2
   d71be:	f7ff f85d 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d71c2:	69a1      	ldr	r1, [r4, #24]
   d71c4:	f7fe ffde 	bl	d6184 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d71c8:	7923      	ldrb	r3, [r4, #4]
   d71ca:	069b      	lsls	r3, r3, #26
   d71cc:	d507      	bpl.n	d71de <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d71ce:	4914      	ldr	r1, [pc, #80]	; (d7220 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d71d0:	2206      	movs	r2, #6
   d71d2:	a801      	add	r0, sp, #4
   d71d4:	f7ff f852 	bl	d627c <_ZN5spark10JSONWriter4nameEPKcj>
   d71d8:	69e1      	ldr	r1, [r4, #28]
   d71da:	f7ff f8c5 	bl	d6368 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d71de:	a801      	add	r0, sp, #4
   d71e0:	f7fe ffad 	bl	d613e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d71e4:	6a28      	ldr	r0, [r5, #32]
   d71e6:	490f      	ldr	r1, [pc, #60]	; (d7224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d71e8:	6803      	ldr	r3, [r0, #0]
   d71ea:	2202      	movs	r2, #2
   d71ec:	68db      	ldr	r3, [r3, #12]
   d71ee:	4798      	blx	r3
}
   d71f0:	b005      	add	sp, #20
   d71f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d71f6:	bf00      	nop
   d71f8:	2003e5bc 	.word	0x2003e5bc
   d71fc:	000da958 	.word	0x000da958
   d7200:	000da8e6 	.word	0x000da8e6
   d7204:	000da937 	.word	0x000da937
   d7208:	000da939 	.word	0x000da939
   d720c:	000da6ea 	.word	0x000da6ea
   d7210:	000da93b 	.word	0x000da93b
   d7214:	000da93e 	.word	0x000da93e
   d7218:	000da709 	.word	0x000da709
   d721c:	000da941 	.word	0x000da941
   d7220:	000da946 	.word	0x000da946
   d7224:	000da934 	.word	0x000da934

000d7228 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7228:	2300      	movs	r3, #0
   d722a:	6840      	ldr	r0, [r0, #4]
   d722c:	461a      	mov	r2, r3
   d722e:	f7fe b9ef 	b.w	d5610 <network_connect>

000d7232 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7232:	6840      	ldr	r0, [r0, #4]
   d7234:	2200      	movs	r2, #0
   d7236:	2102      	movs	r1, #2
   d7238:	f7fe b9fa 	b.w	d5630 <network_disconnect>

000d723c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d723c:	2200      	movs	r2, #0
   d723e:	6840      	ldr	r0, [r0, #4]
   d7240:	4611      	mov	r1, r2
   d7242:	f7fe b9ed 	b.w	d5620 <network_connecting>

000d7246 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7246:	2200      	movs	r2, #0
   d7248:	6840      	ldr	r0, [r0, #4]
   d724a:	4611      	mov	r1, r2
   d724c:	f7fe b9f8 	b.w	d5640 <network_ready>

000d7250 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7250:	2300      	movs	r3, #0
   d7252:	6840      	ldr	r0, [r0, #4]
   d7254:	461a      	mov	r2, r3
   d7256:	4619      	mov	r1, r3
   d7258:	f7fe b9fa 	b.w	d5650 <network_on>

000d725c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d725c:	2300      	movs	r3, #0
   d725e:	6840      	ldr	r0, [r0, #4]
   d7260:	461a      	mov	r2, r3
   d7262:	4619      	mov	r1, r3
   d7264:	f7fe b9fc 	b.w	d5660 <network_off>

000d7268 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7268:	6840      	ldr	r0, [r0, #4]
   d726a:	2100      	movs	r1, #0
   d726c:	f7fe ba20 	b.w	d56b0 <network_is_on>

000d7270 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7270:	6840      	ldr	r0, [r0, #4]
   d7272:	2100      	movs	r1, #0
   d7274:	f7fe ba24 	b.w	d56c0 <network_is_off>

000d7278 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7278:	6840      	ldr	r0, [r0, #4]
   d727a:	2200      	movs	r2, #0
   d727c:	f081 0101 	eor.w	r1, r1, #1
   d7280:	f7fe b9f6 	b.w	d5670 <network_listen>

000d7284 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7284:	6840      	ldr	r0, [r0, #4]
   d7286:	2200      	movs	r2, #0
   d7288:	f7fe ba02 	b.w	d5690 <network_set_listen_timeout>

000d728c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d728c:	2200      	movs	r2, #0
   d728e:	6840      	ldr	r0, [r0, #4]
   d7290:	4611      	mov	r1, r2
   d7292:	f7fe ba05 	b.w	d56a0 <network_get_listen_timeout>

000d7296 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7296:	2200      	movs	r2, #0
   d7298:	6840      	ldr	r0, [r0, #4]
   d729a:	4611      	mov	r1, r2
   d729c:	f7fe b9f0 	b.w	d5680 <network_listening>

000d72a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d72a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d72a4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d72a6:	b095      	sub	sp, #84	; 0x54
   d72a8:	4616      	mov	r6, r2
   d72aa:	460d      	mov	r5, r1
   d72ac:	4607      	mov	r7, r0
    IPAddress addr;
   d72ae:	f7fe fde7 	bl	d5e80 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d72b2:	4621      	mov	r1, r4
   d72b4:	2218      	movs	r2, #24
   d72b6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d72b8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d72ba:	f001 fa26 	bl	d870a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d72be:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d72c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d72c4:	4621      	mov	r1, r4
   d72c6:	466b      	mov	r3, sp
   d72c8:	aa0c      	add	r2, sp, #48	; 0x30
   d72ca:	4630      	mov	r0, r6
   d72cc:	f7fe f86c 	bl	d53a8 <netdb_getaddrinfo>
    if (!r) {
   d72d0:	4604      	mov	r4, r0
   d72d2:	2800      	cmp	r0, #0
   d72d4:	d146      	bne.n	d7364 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d72d6:	4602      	mov	r2, r0
   d72d8:	2101      	movs	r1, #1
   d72da:	6868      	ldr	r0, [r5, #4]
   d72dc:	f7fe f9b0 	bl	d5640 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d72e0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d72e2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d72e4:	4622      	mov	r2, r4
   d72e6:	6868      	ldr	r0, [r5, #4]
   d72e8:	f7fe f9aa 	bl	d5640 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d72ec:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d72ee:	4681      	mov	r9, r0
        bool ok = false;
   d72f0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d72f2:	2e00      	cmp	r6, #0
   d72f4:	d036      	beq.n	d7364 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d72f6:	2900      	cmp	r1, #0
   d72f8:	d134      	bne.n	d7364 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d72fa:	6873      	ldr	r3, [r6, #4]
   d72fc:	2b02      	cmp	r3, #2
   d72fe:	d003      	beq.n	d7308 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7300:	2b0a      	cmp	r3, #10
   d7302:	d00b      	beq.n	d731c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7304:	69f6      	ldr	r6, [r6, #28]
   d7306:	e7f4      	b.n	d72f2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7308:	f1b8 0f00 	cmp.w	r8, #0
   d730c:	d004      	beq.n	d7318 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d730e:	6971      	ldr	r1, [r6, #20]
   d7310:	4638      	mov	r0, r7
   d7312:	3104      	adds	r1, #4
   d7314:	f7fe fde1 	bl	d5eda <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7318:	4641      	mov	r1, r8
   d731a:	e7f3      	b.n	d7304 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d731c:	f1b9 0f00 	cmp.w	r9, #0
   d7320:	d101      	bne.n	d7326 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7322:	4649      	mov	r1, r9
   d7324:	e7ee      	b.n	d7304 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7326:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7328:	2210      	movs	r2, #16
   d732a:	a801      	add	r0, sp, #4
   d732c:	f001 f9ed 	bl	d870a <memset>
                    a.v = 6;
   d7330:	2306      	movs	r3, #6
   d7332:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7336:	ad01      	add	r5, sp, #4
   d7338:	f104 0308 	add.w	r3, r4, #8
   d733c:	3418      	adds	r4, #24
   d733e:	6818      	ldr	r0, [r3, #0]
   d7340:	6859      	ldr	r1, [r3, #4]
   d7342:	462a      	mov	r2, r5
   d7344:	c203      	stmia	r2!, {r0, r1}
   d7346:	3308      	adds	r3, #8
   d7348:	42a3      	cmp	r3, r4
   d734a:	4615      	mov	r5, r2
   d734c:	d1f7      	bne.n	d733e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d734e:	a901      	add	r1, sp, #4
   d7350:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7352:	ad07      	add	r5, sp, #28
   d7354:	f7fe fda2 	bl	d5e9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d735a:	1d3c      	adds	r4, r7, #4
   d735c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d735e:	682b      	ldr	r3, [r5, #0]
   d7360:	7023      	strb	r3, [r4, #0]
   d7362:	e7de      	b.n	d7322 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7364:	9800      	ldr	r0, [sp, #0]
   d7366:	f7fe f817 	bl	d5398 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d736a:	4638      	mov	r0, r7
   d736c:	b015      	add	sp, #84	; 0x54
   d736e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7374 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7374:	4b02      	ldr	r3, [pc, #8]	; (d7380 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7376:	4a03      	ldr	r2, [pc, #12]	; (d7384 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7378:	601a      	str	r2, [r3, #0]
   d737a:	2200      	movs	r2, #0
   d737c:	605a      	str	r2, [r3, #4]

} // spark
   d737e:	4770      	bx	lr
   d7380:	2003e5bc 	.word	0x2003e5bc
   d7384:	000da9d0 	.word	0x000da9d0

000d7388 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d738a:	4606      	mov	r6, r0
   d738c:	460d      	mov	r5, r1
  size_t n = 0;
   d738e:	188f      	adds	r7, r1, r2
   d7390:	2400      	movs	r4, #0
  while (size--) {
   d7392:	42bd      	cmp	r5, r7
   d7394:	d00c      	beq.n	d73b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7396:	6833      	ldr	r3, [r6, #0]
   d7398:	f815 1b01 	ldrb.w	r1, [r5], #1
   d739c:	689b      	ldr	r3, [r3, #8]
   d739e:	4630      	mov	r0, r6
   d73a0:	4798      	blx	r3
     if (chunk>=0)
   d73a2:	1e03      	subs	r3, r0, #0
   d73a4:	db01      	blt.n	d73aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d73a6:	441c      	add	r4, r3
  while (size--) {
   d73a8:	e7f3      	b.n	d7392 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d73aa:	2c00      	cmp	r4, #0
   d73ac:	bf08      	it	eq
   d73ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d73b0:	4620      	mov	r0, r4
   d73b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73b4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d73b4:	b513      	push	{r0, r1, r4, lr}
   d73b6:	4604      	mov	r4, r0
    }
   d73b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d73ba:	b159      	cbz	r1, d73d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d73bc:	9101      	str	r1, [sp, #4]
   d73be:	f001 fa18 	bl	d87f2 <strlen>
   d73c2:	6823      	ldr	r3, [r4, #0]
   d73c4:	9901      	ldr	r1, [sp, #4]
   d73c6:	68db      	ldr	r3, [r3, #12]
   d73c8:	4602      	mov	r2, r0
   d73ca:	4620      	mov	r0, r4
    }
   d73cc:	b002      	add	sp, #8
   d73ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d73d2:	4718      	bx	r3
    }
   d73d4:	b002      	add	sp, #8
   d73d6:	bd10      	pop	{r4, pc}

000d73d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d73d8:	6803      	ldr	r3, [r0, #0]
   d73da:	689b      	ldr	r3, [r3, #8]
   d73dc:	4718      	bx	r3

000d73de <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73de:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d73e0:	210d      	movs	r1, #13
{
   d73e2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d73e4:	f7ff fff8 	bl	d73d8 <_ZN5Print5printEc>
  n += print('\n');
   d73e8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d73ea:	4604      	mov	r4, r0
  n += print('\n');
   d73ec:	4628      	mov	r0, r5
   d73ee:	f7ff fff3 	bl	d73d8 <_ZN5Print5printEc>
  return n;
}
   d73f2:	4420      	add	r0, r4
   d73f4:	bd38      	pop	{r3, r4, r5, pc}

000d73f6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d73f6:	b538      	push	{r3, r4, r5, lr}
   d73f8:	4605      	mov	r5, r0
  return write(str);
   d73fa:	f7ff ffdb 	bl	d73b4 <_ZN5Print5writeEPKc>
   d73fe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7400:	4628      	mov	r0, r5
   d7402:	f7ff ffec 	bl	d73de <_ZN5Print7printlnEv>
  return n;
}
   d7406:	4420      	add	r0, r4
   d7408:	bd38      	pop	{r3, r4, r5, pc}

000d740a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d740a:	b530      	push	{r4, r5, lr}
   d740c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d740e:	2300      	movs	r3, #0
   d7410:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7414:	2a01      	cmp	r2, #1
   d7416:	bf98      	it	ls
   d7418:	220a      	movls	r2, #10
   d741a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d741c:	460d      	mov	r5, r1
   d741e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7422:	fb01 5312 	mls	r3, r1, r2, r5
   d7426:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d742a:	2b09      	cmp	r3, #9
   d742c:	bf94      	ite	ls
   d742e:	3330      	addls	r3, #48	; 0x30
   d7430:	3337      	addhi	r3, #55	; 0x37
   d7432:	b2db      	uxtb	r3, r3
  } while(n);
   d7434:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7436:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d743a:	d9ef      	bls.n	d741c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d743c:	4621      	mov	r1, r4
   d743e:	f7ff ffb9 	bl	d73b4 <_ZN5Print5writeEPKc>
}
   d7442:	b00b      	add	sp, #44	; 0x2c
   d7444:	bd30      	pop	{r4, r5, pc}

000d7446 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d744a:	b086      	sub	sp, #24
   d744c:	af00      	add	r7, sp, #0
   d744e:	4605      	mov	r5, r0
   d7450:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7452:	1d38      	adds	r0, r7, #4
   d7454:	2114      	movs	r1, #20
{
   d7456:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7458:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d745a:	f7fe f959 	bl	d5710 <vsnprintf>

    if (n<bufsize)
   d745e:	2813      	cmp	r0, #19
   d7460:	d80e      	bhi.n	d7480 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7462:	1d39      	adds	r1, r7, #4
   d7464:	4628      	mov	r0, r5
   d7466:	f7ff ffa5 	bl	d73b4 <_ZN5Print5writeEPKc>
   d746a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d746c:	b11e      	cbz	r6, d7476 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d746e:	4628      	mov	r0, r5
   d7470:	f7ff ffb5 	bl	d73de <_ZN5Print7printlnEv>
   d7474:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7476:	4620      	mov	r0, r4
   d7478:	3718      	adds	r7, #24
   d747a:	46bd      	mov	sp, r7
   d747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7480:	f100 0308 	add.w	r3, r0, #8
   d7484:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7488:	46e8      	mov	r8, sp
        char bigger[n+1];
   d748a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d748e:	4622      	mov	r2, r4
   d7490:	1c41      	adds	r1, r0, #1
   d7492:	683b      	ldr	r3, [r7, #0]
   d7494:	4668      	mov	r0, sp
   d7496:	f7fe f93b 	bl	d5710 <vsnprintf>
  return write(str);
   d749a:	4669      	mov	r1, sp
   d749c:	4628      	mov	r0, r5
   d749e:	f7ff ff89 	bl	d73b4 <_ZN5Print5writeEPKc>
   d74a2:	4604      	mov	r4, r0
   d74a4:	46c5      	mov	sp, r8
   d74a6:	e7e1      	b.n	d746c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d74a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d74a8:	4b01      	ldr	r3, [pc, #4]	; (d74b0 <_GLOBAL__sub_I_RGB+0x8>)
   d74aa:	2200      	movs	r2, #0
   d74ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d74ae:	4770      	bx	lr
   d74b0:	2003e5c4 	.word	0x2003e5c4

000d74b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d74b4:	b510      	push	{r4, lr}
   d74b6:	4604      	mov	r4, r0
   d74b8:	4608      	mov	r0, r1
{
    _spi = spi;
   d74ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d74bc:	f7fd ff84 	bl	d53c8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d74c0:	2300      	movs	r3, #0
   d74c2:	6063      	str	r3, [r4, #4]
}
   d74c4:	4620      	mov	r0, r4
   d74c6:	bd10      	pop	{r4, pc}

000d74c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d74c8:	b510      	push	{r4, lr}
   d74ca:	4604      	mov	r4, r0
{
	free(buffer);
   d74cc:	6800      	ldr	r0, [r0, #0]
   d74ce:	f7fe f907 	bl	d56e0 <free>
}
   d74d2:	4620      	mov	r0, r4
   d74d4:	bd10      	pop	{r4, pc}

000d74d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d74d6:	b510      	push	{r4, lr}
   d74d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d74da:	6800      	ldr	r0, [r0, #0]
   d74dc:	b108      	cbz	r0, d74e2 <_ZN6String10invalidateEv+0xc>
   d74de:	f7fe f8ff 	bl	d56e0 <free>
	buffer = NULL;
   d74e2:	2300      	movs	r3, #0
	capacity = len = 0;
   d74e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d74e8:	6023      	str	r3, [r4, #0]
}
   d74ea:	bd10      	pop	{r4, pc}

000d74ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d74ec:	b538      	push	{r3, r4, r5, lr}
   d74ee:	4604      	mov	r4, r0
   d74f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d74f2:	6800      	ldr	r0, [r0, #0]
   d74f4:	3101      	adds	r1, #1
   d74f6:	f7fe f8fb 	bl	d56f0 <realloc>
	if (newbuffer) {
   d74fa:	b110      	cbz	r0, d7502 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d74fc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7500:	2001      	movs	r0, #1
	}
	return 0;
}
   d7502:	bd38      	pop	{r3, r4, r5, pc}

000d7504 <_ZN6String7reserveEj>:
{
   d7504:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7506:	6803      	ldr	r3, [r0, #0]
{
   d7508:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d750a:	b123      	cbz	r3, d7516 <_ZN6String7reserveEj+0x12>
   d750c:	6843      	ldr	r3, [r0, #4]
   d750e:	428b      	cmp	r3, r1
   d7510:	d301      	bcc.n	d7516 <_ZN6String7reserveEj+0x12>
   d7512:	2001      	movs	r0, #1
}
   d7514:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7516:	4620      	mov	r0, r4
   d7518:	f7ff ffe8 	bl	d74ec <_ZN6String12changeBufferEj>
   d751c:	2800      	cmp	r0, #0
   d751e:	d0f9      	beq.n	d7514 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7520:	68a3      	ldr	r3, [r4, #8]
   d7522:	2b00      	cmp	r3, #0
   d7524:	d1f5      	bne.n	d7512 <_ZN6String7reserveEj+0xe>
   d7526:	6822      	ldr	r2, [r4, #0]
   d7528:	7013      	strb	r3, [r2, #0]
   d752a:	e7f2      	b.n	d7512 <_ZN6String7reserveEj+0xe>

000d752c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d752c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d752e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7530:	4611      	mov	r1, r2
   d7532:	9201      	str	r2, [sp, #4]
{
   d7534:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7536:	f7ff ffe5 	bl	d7504 <_ZN6String7reserveEj>
   d753a:	9a01      	ldr	r2, [sp, #4]
   d753c:	b928      	cbnz	r0, d754a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d753e:	4620      	mov	r0, r4
   d7540:	f7ff ffc9 	bl	d74d6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7544:	4620      	mov	r0, r4
   d7546:	b003      	add	sp, #12
   d7548:	bd30      	pop	{r4, r5, pc}
	len = length;
   d754a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d754c:	4629      	mov	r1, r5
   d754e:	6820      	ldr	r0, [r4, #0]
   d7550:	f001 f8b3 	bl	d86ba <memcpy>
	buffer[len] = 0;
   d7554:	6822      	ldr	r2, [r4, #0]
   d7556:	68a3      	ldr	r3, [r4, #8]
   d7558:	2100      	movs	r1, #0
   d755a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d755c:	e7f2      	b.n	d7544 <_ZN6String4copyEPKcj+0x18>

000d755e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d755e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7560:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7562:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7566:	4604      	mov	r4, r0
	len = 0;
   d7568:	6083      	str	r3, [r0, #8]
	flags = 0;
   d756a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d756c:	b141      	cbz	r1, d7580 <_ZN6StringC1EPKc+0x22>
   d756e:	4608      	mov	r0, r1
   d7570:	9101      	str	r1, [sp, #4]
   d7572:	f001 f93e 	bl	d87f2 <strlen>
   d7576:	9901      	ldr	r1, [sp, #4]
   d7578:	4602      	mov	r2, r0
   d757a:	4620      	mov	r0, r4
   d757c:	f7ff ffd6 	bl	d752c <_ZN6String4copyEPKcj>
}
   d7580:	4620      	mov	r0, r4
   d7582:	b002      	add	sp, #8
   d7584:	bd10      	pop	{r4, pc}

000d7586 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7586:	b538      	push	{r3, r4, r5, lr}
   d7588:	4605      	mov	r5, r0
	if (buffer) {
   d758a:	6800      	ldr	r0, [r0, #0]
{
   d758c:	460c      	mov	r4, r1
	if (buffer) {
   d758e:	b168      	cbz	r0, d75ac <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d7590:	686a      	ldr	r2, [r5, #4]
   d7592:	688b      	ldr	r3, [r1, #8]
   d7594:	429a      	cmp	r2, r3
   d7596:	d307      	bcc.n	d75a8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d7598:	6809      	ldr	r1, [r1, #0]
   d759a:	f001 f904 	bl	d87a6 <strcpy>
			len = rhs.len;
   d759e:	68a3      	ldr	r3, [r4, #8]
   d75a0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d75a2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d75a4:	60a3      	str	r3, [r4, #8]
}
   d75a6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d75a8:	f7fe f89a 	bl	d56e0 <free>
	buffer = rhs.buffer;
   d75ac:	6823      	ldr	r3, [r4, #0]
   d75ae:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d75b0:	6863      	ldr	r3, [r4, #4]
   d75b2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d75b4:	68a3      	ldr	r3, [r4, #8]
   d75b6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d75b8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d75ba:	e9c4 3300 	strd	r3, r3, [r4]
   d75be:	e7f1      	b.n	d75a4 <_ZN6String4moveERS_+0x1e>

000d75c0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d75c0:	b510      	push	{r4, lr}
	buffer = NULL;
   d75c2:	2300      	movs	r3, #0
	capacity = 0;
   d75c4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d75c8:	4604      	mov	r4, r0
	len = 0;
   d75ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d75cc:	7303      	strb	r3, [r0, #12]
	move(rval);
   d75ce:	f7ff ffda 	bl	d7586 <_ZN6String4moveERS_>
}
   d75d2:	4620      	mov	r0, r4
   d75d4:	bd10      	pop	{r4, pc}

000d75d6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d75d6:	4288      	cmp	r0, r1
{
   d75d8:	b510      	push	{r4, lr}
   d75da:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d75dc:	d005      	beq.n	d75ea <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d75de:	680b      	ldr	r3, [r1, #0]
   d75e0:	b12b      	cbz	r3, d75ee <_ZN6StringaSERKS_+0x18>
   d75e2:	688a      	ldr	r2, [r1, #8]
   d75e4:	4619      	mov	r1, r3
   d75e6:	f7ff ffa1 	bl	d752c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d75ea:	4620      	mov	r0, r4
   d75ec:	bd10      	pop	{r4, pc}
	else invalidate();
   d75ee:	f7ff ff72 	bl	d74d6 <_ZN6String10invalidateEv>
   d75f2:	e7fa      	b.n	d75ea <_ZN6StringaSERKS_+0x14>

000d75f4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d75f4:	b510      	push	{r4, lr}
	buffer = NULL;
   d75f6:	2300      	movs	r3, #0
String::String(const String &value)
   d75f8:	4604      	mov	r4, r0
	capacity = 0;
   d75fa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d75fe:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7600:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7602:	f7ff ffe8 	bl	d75d6 <_ZN6StringaSERKS_>
}
   d7606:	4620      	mov	r0, r4
   d7608:	bd10      	pop	{r4, pc}

000d760a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d760a:	b513      	push	{r0, r1, r4, lr}
   d760c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d760e:	b159      	cbz	r1, d7628 <_ZN6StringaSEPKc+0x1e>
   d7610:	4608      	mov	r0, r1
   d7612:	9101      	str	r1, [sp, #4]
   d7614:	f001 f8ed 	bl	d87f2 <strlen>
   d7618:	9901      	ldr	r1, [sp, #4]
   d761a:	4602      	mov	r2, r0
   d761c:	4620      	mov	r0, r4
   d761e:	f7ff ff85 	bl	d752c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7622:	4620      	mov	r0, r4
   d7624:	b002      	add	sp, #8
   d7626:	bd10      	pop	{r4, pc}
	else invalidate();
   d7628:	f7ff ff55 	bl	d74d6 <_ZN6String10invalidateEv>
   d762c:	e7f9      	b.n	d7622 <_ZN6StringaSEPKc+0x18>

000d762e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d762e:	b510      	push	{r4, lr}
   d7630:	4604      	mov	r4, r0
   d7632:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d7634:	2300      	movs	r3, #0
	capacity = 0;
   d7636:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d763a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d763c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d763e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d7640:	a901      	add	r1, sp, #4
   d7642:	f000 f9c1 	bl	d79c8 <itoa>
	*this = buf;
   d7646:	a901      	add	r1, sp, #4
   d7648:	4620      	mov	r0, r4
   d764a:	f7ff ffde 	bl	d760a <_ZN6StringaSEPKc>
}
   d764e:	4620      	mov	r0, r4
   d7650:	b00a      	add	sp, #40	; 0x28
   d7652:	bd10      	pop	{r4, pc}

000d7654 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7654:	4b05      	ldr	r3, [pc, #20]	; (d766c <_GLOBAL__sub_I_System+0x18>)
   d7656:	2202      	movs	r2, #2
   d7658:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d765a:	4b05      	ldr	r3, [pc, #20]	; (d7670 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d765c:	4a05      	ldr	r2, [pc, #20]	; (d7674 <_GLOBAL__sub_I_System+0x20>)
   d765e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d7660:	2000      	movs	r0, #0
   d7662:	6018      	str	r0, [r3, #0]
   d7664:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d7666:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7668:	f7fd bf6e 	b.w	d5548 <set_system_mode>
   d766c:	2003e5e0 	.word	0x2003e5e0
   d7670:	2003e5d4 	.word	0x2003e5d4
   d7674:	ffff0000 	.word	0xffff0000

000d7678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7678:	4b02      	ldr	r3, [pc, #8]	; (d7684 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d767a:	681a      	ldr	r2, [r3, #0]
   d767c:	4b02      	ldr	r3, [pc, #8]	; (d7688 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d767e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7680:	4770      	bx	lr
   d7682:	bf00      	nop
   d7684:	2003e1ec 	.word	0x2003e1ec
   d7688:	2003e5e4 	.word	0x2003e5e4

000d768c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d768e:	b287      	uxth	r7, r0
{
   d7690:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d7692:	4638      	mov	r0, r7
{
   d7694:	460d      	mov	r5, r1
   d7696:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d7698:	f000 fa48 	bl	d7b2c <pinAvailable>
   d769c:	b160      	cbz	r0, d76b8 <tone+0x2c>
   d769e:	2102      	movs	r1, #2
   d76a0:	4638      	mov	r0, r7
   d76a2:	f7fd fe09 	bl	d52b8 <HAL_Validate_Pin_Function>
   d76a6:	2802      	cmp	r0, #2
   d76a8:	d106      	bne.n	d76b8 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d76aa:	4632      	mov	r2, r6
   d76ac:	4629      	mov	r1, r5
   d76ae:	4620      	mov	r0, r4
    }
}
   d76b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   d76b4:	f7fd be80 	b.w	d53b8 <HAL_Tone_Start>
}
   d76b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76ba <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d76ba:	4770      	bx	lr

000d76bc <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d76bc:	7441      	strb	r1, [r0, #17]
}
   d76be:	4770      	bx	lr

000d76c0 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d76c0:	4770      	bx	lr

000d76c2 <_ZN11USARTSerial17availableForWriteEv>:
{
   d76c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d76c4:	7c00      	ldrb	r0, [r0, #16]
   d76c6:	f7fd fecf 	bl	d5468 <hal_usart_available_data_for_write>
}
   d76ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d76ce:	bd08      	pop	{r3, pc}

000d76d0 <_ZN11USARTSerial9availableEv>:
{
   d76d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d76d2:	7c00      	ldrb	r0, [r0, #16]
   d76d4:	f7fd fea0 	bl	d5418 <hal_usart_available>
}
   d76d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d76dc:	bd08      	pop	{r3, pc}

000d76de <_ZN11USARTSerial4peekEv>:
{
   d76de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d76e0:	7c00      	ldrb	r0, [r0, #16]
   d76e2:	f7fd fea9 	bl	d5438 <hal_usart_peek>
}
   d76e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d76ea:	bd08      	pop	{r3, pc}

000d76ec <_ZN11USARTSerial4readEv>:
{
   d76ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d76ee:	7c00      	ldrb	r0, [r0, #16]
   d76f0:	f7fd fe9a 	bl	d5428 <hal_usart_read>
}
   d76f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d76f8:	bd08      	pop	{r3, pc}

000d76fa <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d76fa:	7c00      	ldrb	r0, [r0, #16]
   d76fc:	f7fd bea4 	b.w	d5448 <hal_usart_flush>

000d7700 <_ZN11USARTSerial5writeEh>:
{
   d7700:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7702:	7c45      	ldrb	r5, [r0, #17]
{
   d7704:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7706:	b12d      	cbz	r5, d7714 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d7708:	7c20      	ldrb	r0, [r4, #16]
}
   d770a:	b003      	add	sp, #12
   d770c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7710:	f7fd be7a 	b.w	d5408 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7714:	7c00      	ldrb	r0, [r0, #16]
   d7716:	9101      	str	r1, [sp, #4]
   d7718:	f7fd fea6 	bl	d5468 <hal_usart_available_data_for_write>
   d771c:	2800      	cmp	r0, #0
   d771e:	9901      	ldr	r1, [sp, #4]
   d7720:	dcf2      	bgt.n	d7708 <_ZN11USARTSerial5writeEh+0x8>
}
   d7722:	4628      	mov	r0, r5
   d7724:	b003      	add	sp, #12
   d7726:	bd30      	pop	{r4, r5, pc}

000d7728 <_ZN11USARTSerialD0Ev>:
   d7728:	b510      	push	{r4, lr}
   d772a:	2114      	movs	r1, #20
   d772c:	4604      	mov	r4, r0
   d772e:	f000 facd 	bl	d7ccc <_ZdlPvj>
   d7732:	4620      	mov	r0, r4
   d7734:	bd10      	pop	{r4, pc}
	...

000d7738 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7738:	b510      	push	{r4, lr}
   d773a:	f04f 0c00 	mov.w	ip, #0
   d773e:	4604      	mov	r4, r0
   d7740:	4608      	mov	r0, r1
   d7742:	4611      	mov	r1, r2
   d7744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7748:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d774c:	4a04      	ldr	r2, [pc, #16]	; (d7760 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d774e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7750:	2201      	movs	r2, #1
  _serial = serial;
   d7752:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7754:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7756:	461a      	mov	r2, r3
   d7758:	f7fd fe46 	bl	d53e8 <hal_usart_init>
}
   d775c:	4620      	mov	r0, r4
   d775e:	bd10      	pop	{r4, pc}
   d7760:	000daa28 	.word	0x000daa28

000d7764 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d7764:	7c00      	ldrb	r0, [r0, #16]
   d7766:	2300      	movs	r3, #0
   d7768:	f7fd be86 	b.w	d5478 <hal_usart_begin_config>

000d776c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d776c:	2200      	movs	r2, #0
   d776e:	f7ff bff9 	b.w	d7764 <_ZN11USARTSerial5beginEmm>

000d7772 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d7772:	7c00      	ldrb	r0, [r0, #16]
   d7774:	f7fd be40 	b.w	d53f8 <hal_usart_end>

000d7778 <_Z22__fetch_global_Serial1v>:
{
   d7778:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d777a:	4c0d      	ldr	r4, [pc, #52]	; (d77b0 <_Z22__fetch_global_Serial1v+0x38>)
   d777c:	7821      	ldrb	r1, [r4, #0]
   d777e:	f3bf 8f5b 	dmb	ish
   d7782:	f011 0101 	ands.w	r1, r1, #1
   d7786:	d110      	bne.n	d77aa <_Z22__fetch_global_Serial1v+0x32>
   d7788:	4620      	mov	r0, r4
   d778a:	9101      	str	r1, [sp, #4]
   d778c:	f7fc fc94 	bl	d40b8 <__cxa_guard_acquire>
   d7790:	9901      	ldr	r1, [sp, #4]
   d7792:	b150      	cbz	r0, d77aa <_Z22__fetch_global_Serial1v+0x32>
   d7794:	4b07      	ldr	r3, [pc, #28]	; (d77b4 <_Z22__fetch_global_Serial1v+0x3c>)
   d7796:	4a08      	ldr	r2, [pc, #32]	; (d77b8 <_Z22__fetch_global_Serial1v+0x40>)
   d7798:	4808      	ldr	r0, [pc, #32]	; (d77bc <_Z22__fetch_global_Serial1v+0x44>)
   d779a:	f7ff ffcd 	bl	d7738 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d779e:	4620      	mov	r0, r4
   d77a0:	f7fc fc8f 	bl	d40c2 <__cxa_guard_release>
   d77a4:	4806      	ldr	r0, [pc, #24]	; (d77c0 <_Z22__fetch_global_Serial1v+0x48>)
   d77a6:	f000 ff7f 	bl	d86a8 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d77aa:	4804      	ldr	r0, [pc, #16]	; (d77bc <_Z22__fetch_global_Serial1v+0x44>)
   d77ac:	b002      	add	sp, #8
   d77ae:	bd10      	pop	{r4, pc}
   d77b0:	2003e5e8 	.word	0x2003e5e8
   d77b4:	2003e670 	.word	0x2003e670
   d77b8:	2003e5ec 	.word	0x2003e5ec
   d77bc:	2003e6f4 	.word	0x2003e6f4
   d77c0:	000d76c1 	.word	0x000d76c1

000d77c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d77c4:	7441      	strb	r1, [r0, #17]
}
   d77c6:	4770      	bx	lr

000d77c8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77c8:	4770      	bx	lr

000d77ca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d77ca:	4770      	bx	lr

000d77cc <_ZN9USBSerial4readEv>:
{
   d77cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d77ce:	2100      	movs	r1, #0
   d77d0:	7c00      	ldrb	r0, [r0, #16]
   d77d2:	f7fd fe81 	bl	d54d8 <HAL_USB_USART_Receive_Data>
}
   d77d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d77da:	bd08      	pop	{r3, pc}

000d77dc <_ZN9USBSerial4peekEv>:
{
   d77dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d77de:	2101      	movs	r1, #1
   d77e0:	7c00      	ldrb	r0, [r0, #16]
   d77e2:	f7fd fe79 	bl	d54d8 <HAL_USB_USART_Receive_Data>
}
   d77e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d77ea:	bd08      	pop	{r3, pc}

000d77ec <_ZN9USBSerial17availableForWriteEv>:
{
   d77ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d77ee:	7c00      	ldrb	r0, [r0, #16]
   d77f0:	f7fd fe6a 	bl	d54c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d77f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d77f8:	bd08      	pop	{r3, pc}

000d77fa <_ZN9USBSerial9availableEv>:
{
   d77fa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d77fc:	7c00      	ldrb	r0, [r0, #16]
   d77fe:	f7fd fe5b 	bl	d54b8 <HAL_USB_USART_Available_Data>
}
   d7802:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7806:	bd08      	pop	{r3, pc}

000d7808 <_ZN9USBSerial5writeEh>:
{
   d7808:	b513      	push	{r0, r1, r4, lr}
   d780a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d780c:	7c00      	ldrb	r0, [r0, #16]
{
   d780e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7810:	f7fd fe5a 	bl	d54c8 <HAL_USB_USART_Available_Data_For_Write>
   d7814:	2800      	cmp	r0, #0
   d7816:	9901      	ldr	r1, [sp, #4]
   d7818:	dc01      	bgt.n	d781e <_ZN9USBSerial5writeEh+0x16>
   d781a:	7c60      	ldrb	r0, [r4, #17]
   d781c:	b120      	cbz	r0, d7828 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d781e:	7c20      	ldrb	r0, [r4, #16]
   d7820:	f7fd fe62 	bl	d54e8 <HAL_USB_USART_Send_Data>
   d7824:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7828:	b002      	add	sp, #8
   d782a:	bd10      	pop	{r4, pc}

000d782c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d782c:	7c00      	ldrb	r0, [r0, #16]
   d782e:	f7fd be63 	b.w	d54f8 <HAL_USB_USART_Flush_Data>

000d7832 <_ZN9USBSerialD0Ev>:
   d7832:	b510      	push	{r4, lr}
   d7834:	2114      	movs	r1, #20
   d7836:	4604      	mov	r4, r0
   d7838:	f000 fa48 	bl	d7ccc <_ZdlPvj>
   d783c:	4620      	mov	r0, r4
   d783e:	bd10      	pop	{r4, pc}

000d7840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7840:	b510      	push	{r4, lr}
   d7842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7846:	4604      	mov	r4, r0
   d7848:	4608      	mov	r0, r1
   d784a:	2100      	movs	r1, #0
   d784c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7850:	4b04      	ldr	r3, [pc, #16]	; (d7864 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7852:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7854:	2301      	movs	r3, #1
  _serial = serial;
   d7856:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7858:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d785a:	4611      	mov	r1, r2
   d785c:	f7fd fe14 	bl	d5488 <HAL_USB_USART_Init>
}
   d7860:	4620      	mov	r0, r4
   d7862:	bd10      	pop	{r4, pc}
   d7864:	000daa58 	.word	0x000daa58

000d7868 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7868:	7c00      	ldrb	r0, [r0, #16]
   d786a:	2200      	movs	r2, #0
   d786c:	f7fd be14 	b.w	d5498 <HAL_USB_USART_Begin>

000d7870 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d7870:	7c00      	ldrb	r0, [r0, #16]
   d7872:	f7fd be19 	b.w	d54a8 <HAL_USB_USART_End>

000d7876 <_Z19acquireSerialBufferv>:
{
   d7876:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7878:	2214      	movs	r2, #20
{
   d787a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d787c:	2100      	movs	r1, #0
   d787e:	f000 ff44 	bl	d870a <memset>
}
   d7882:	4620      	mov	r0, r4
   d7884:	bd10      	pop	{r4, pc}
	...

000d7888 <_Z16_fetch_usbserialv>:
{
   d7888:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d788a:	4c0f      	ldr	r4, [pc, #60]	; (d78c8 <_Z16_fetch_usbserialv+0x40>)
{
   d788c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d788e:	a803      	add	r0, sp, #12
   d7890:	f7ff fff1 	bl	d7876 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7894:	7821      	ldrb	r1, [r4, #0]
   d7896:	f3bf 8f5b 	dmb	ish
   d789a:	f011 0101 	ands.w	r1, r1, #1
   d789e:	d10f      	bne.n	d78c0 <_Z16_fetch_usbserialv+0x38>
   d78a0:	4620      	mov	r0, r4
   d78a2:	9101      	str	r1, [sp, #4]
   d78a4:	f7fc fc08 	bl	d40b8 <__cxa_guard_acquire>
   d78a8:	9901      	ldr	r1, [sp, #4]
   d78aa:	b148      	cbz	r0, d78c0 <_Z16_fetch_usbserialv+0x38>
   d78ac:	aa03      	add	r2, sp, #12
   d78ae:	4807      	ldr	r0, [pc, #28]	; (d78cc <_Z16_fetch_usbserialv+0x44>)
   d78b0:	f7ff ffc6 	bl	d7840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d78b4:	4620      	mov	r0, r4
   d78b6:	f7fc fc04 	bl	d40c2 <__cxa_guard_release>
   d78ba:	4805      	ldr	r0, [pc, #20]	; (d78d0 <_Z16_fetch_usbserialv+0x48>)
   d78bc:	f000 fef4 	bl	d86a8 <atexit>
	return _usbserial;
}
   d78c0:	4802      	ldr	r0, [pc, #8]	; (d78cc <_Z16_fetch_usbserialv+0x44>)
   d78c2:	b008      	add	sp, #32
   d78c4:	bd10      	pop	{r4, pc}
   d78c6:	bf00      	nop
   d78c8:	2003e708 	.word	0x2003e708
   d78cc:	2003e70c 	.word	0x2003e70c
   d78d0:	000d77c9 	.word	0x000d77c9

000d78d4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d78d4:	2200      	movs	r2, #0
   d78d6:	6840      	ldr	r0, [r0, #4]
   d78d8:	4611      	mov	r1, r2
   d78da:	f7fd beb1 	b.w	d5640 <network_ready>

000d78de <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d78de:	2200      	movs	r2, #0
   d78e0:	6840      	ldr	r0, [r0, #4]
   d78e2:	4611      	mov	r1, r2
   d78e4:	f7fd becc 	b.w	d5680 <network_listening>

000d78e8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d78e8:	2200      	movs	r2, #0
   d78ea:	6840      	ldr	r0, [r0, #4]
   d78ec:	4611      	mov	r1, r2
   d78ee:	f7fd bed7 	b.w	d56a0 <network_get_listen_timeout>

000d78f2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d78f2:	6840      	ldr	r0, [r0, #4]
   d78f4:	2200      	movs	r2, #0
   d78f6:	f7fd becb 	b.w	d5690 <network_set_listen_timeout>

000d78fa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d78fa:	6840      	ldr	r0, [r0, #4]
   d78fc:	2200      	movs	r2, #0
   d78fe:	f081 0101 	eor.w	r1, r1, #1
   d7902:	f7fd beb5 	b.w	d5670 <network_listen>

000d7906 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7906:	2300      	movs	r3, #0
   d7908:	6840      	ldr	r0, [r0, #4]
   d790a:	461a      	mov	r2, r3
   d790c:	4619      	mov	r1, r3
   d790e:	f7fd bea7 	b.w	d5660 <network_off>

000d7912 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7912:	2300      	movs	r3, #0
   d7914:	6840      	ldr	r0, [r0, #4]
   d7916:	461a      	mov	r2, r3
   d7918:	4619      	mov	r1, r3
   d791a:	f7fd be99 	b.w	d5650 <network_on>

000d791e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d791e:	2200      	movs	r2, #0
   d7920:	6840      	ldr	r0, [r0, #4]
   d7922:	4611      	mov	r1, r2
   d7924:	f7fd be7c 	b.w	d5620 <network_connecting>

000d7928 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7928:	6840      	ldr	r0, [r0, #4]
   d792a:	2200      	movs	r2, #0
   d792c:	2102      	movs	r1, #2
   d792e:	f7fd be7f 	b.w	d5630 <network_disconnect>

000d7932 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7932:	2300      	movs	r3, #0
   d7934:	6840      	ldr	r0, [r0, #4]
   d7936:	461a      	mov	r2, r3
   d7938:	f7fd be6a 	b.w	d5610 <network_connect>

000d793c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d793c:	4b02      	ldr	r3, [pc, #8]	; (d7948 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d793e:	2204      	movs	r2, #4
   d7940:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7942:	4a02      	ldr	r2, [pc, #8]	; (d794c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7944:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7946:	4770      	bx	lr
   d7948:	2003e720 	.word	0x2003e720
   d794c:	000daa88 	.word	0x000daa88

000d7950 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7950:	b510      	push	{r4, lr}
   d7952:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7954:	f000 ff4d 	bl	d87f2 <strlen>
   d7958:	3801      	subs	r0, #1
   d795a:	1823      	adds	r3, r4, r0
   d795c:	4620      	mov	r0, r4
	while(i<j){
   d795e:	4283      	cmp	r3, r0
   d7960:	d906      	bls.n	d7970 <_Z11str_reversePc+0x20>
		c = *i;
   d7962:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7964:	7819      	ldrb	r1, [r3, #0]
   d7966:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d796a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d796e:	e7f6      	b.n	d795e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d7970:	bd10      	pop	{r4, pc}

000d7972 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7972:	b570      	push	{r4, r5, r6, lr}
   d7974:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7976:	1e91      	subs	r1, r2, #2
   d7978:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d797a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d797c:	d822      	bhi.n	d79c4 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d797e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d7980:	b16d      	cbz	r5, d799e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7982:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d7986:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d798a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d798c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d798e:	bf94      	ite	ls
   d7990:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7992:	3157      	addhi	r1, #87	; 0x57
   d7994:	b2c9      	uxtb	r1, r1
   d7996:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d799a:	4635      	mov	r5, r6
	while(a){
   d799c:	e7f0      	b.n	d7980 <ultoa+0xe>
   d799e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d79a0:	4423      	add	r3, r4
            *ptr++ = '0';
   d79a2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d79a4:	4293      	cmp	r3, r2
   d79a6:	d902      	bls.n	d79ae <ultoa+0x3c>
            *ptr++ = '0';
   d79a8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d79ac:	e7fa      	b.n	d79a4 <ultoa+0x32>
   d79ae:	1a1a      	subs	r2, r3, r0
   d79b0:	4283      	cmp	r3, r0
   d79b2:	bf38      	it	cc
   d79b4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d79b6:	2300      	movs	r3, #0
   d79b8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d79ba:	4620      	mov	r0, r4
   d79bc:	f7ff ffc8 	bl	d7950 <_Z11str_reversePc>
	return buffer;
   d79c0:	4620      	mov	r0, r4
}
   d79c2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d79c4:	2000      	movs	r0, #0
   d79c6:	e7fc      	b.n	d79c2 <ultoa+0x50>

000d79c8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d79c8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d79ca:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d79cc:	460c      	mov	r4, r1
   d79ce:	4615      	mov	r5, r2
	if(a<0){
   d79d0:	da0e      	bge.n	d79f0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d79d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d79d6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d79da:	bf14      	ite	ne
   d79dc:	4258      	negne	r0, r3
   d79de:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d79e0:	2301      	movs	r3, #1
		*buffer = '-';
   d79e2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d79e4:	462a      	mov	r2, r5
   d79e6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d79e8:	f7ff ffc3 	bl	d7972 <ultoa>
	}
	return buffer;
}
   d79ec:	4620      	mov	r0, r4
   d79ee:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d79f0:	2301      	movs	r3, #1
   d79f2:	e7f9      	b.n	d79e8 <itoa+0x20>

000d79f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d79f4:	4b01      	ldr	r3, [pc, #4]	; (d79fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d79f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d79f8:	4770      	bx	lr
   d79fa:	bf00      	nop
   d79fc:	2003e1f0 	.word	0x2003e1f0

000d7a00 <serialEventRun>:
{
   d7a00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7a02:	4b0b      	ldr	r3, [pc, #44]	; (d7a30 <serialEventRun+0x30>)
   d7a04:	b143      	cbz	r3, d7a18 <serialEventRun+0x18>
   d7a06:	f7ff ff3f 	bl	d7888 <_Z16_fetch_usbserialv>
   d7a0a:	6803      	ldr	r3, [r0, #0]
   d7a0c:	691b      	ldr	r3, [r3, #16]
   d7a0e:	4798      	blx	r3
   d7a10:	2800      	cmp	r0, #0
   d7a12:	dd01      	ble.n	d7a18 <serialEventRun+0x18>
        serialEvent();
   d7a14:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7a18:	4b06      	ldr	r3, [pc, #24]	; (d7a34 <serialEventRun+0x34>)
   d7a1a:	b143      	cbz	r3, d7a2e <serialEventRun+0x2e>
   d7a1c:	f7ff feac 	bl	d7778 <_Z22__fetch_global_Serial1v>
   d7a20:	6803      	ldr	r3, [r0, #0]
   d7a22:	691b      	ldr	r3, [r3, #16]
   d7a24:	4798      	blx	r3
   d7a26:	2800      	cmp	r0, #0
   d7a28:	dd01      	ble.n	d7a2e <serialEventRun+0x2e>
        serialEvent1();
   d7a2a:	f3af 8000 	nop.w
}
   d7a2e:	bd08      	pop	{r3, pc}
	...

000d7a38 <_post_loop>:
{
   d7a38:	b508      	push	{r3, lr}
	serialEventRun();
   d7a3a:	f7ff ffe1 	bl	d7a00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a3e:	f7fd fc2b 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a42:	4b01      	ldr	r3, [pc, #4]	; (d7a48 <_post_loop+0x10>)
   d7a44:	6018      	str	r0, [r3, #0]
}
   d7a46:	bd08      	pop	{r3, pc}
   d7a48:	2003e73c 	.word	0x2003e73c

000d7a4c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a4c:	4805      	ldr	r0, [pc, #20]	; (d7a64 <_Z33system_initialize_user_backup_ramv+0x18>)
   d7a4e:	4a06      	ldr	r2, [pc, #24]	; (d7a68 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d7a50:	4906      	ldr	r1, [pc, #24]	; (d7a6c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d7a52:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a54:	1a12      	subs	r2, r2, r0
   d7a56:	f000 fe30 	bl	d86ba <memcpy>
    __backup_sram_signature = signature;
   d7a5a:	4b05      	ldr	r3, [pc, #20]	; (d7a70 <_Z33system_initialize_user_backup_ramv+0x24>)
   d7a5c:	4a05      	ldr	r2, [pc, #20]	; (d7a74 <_Z33system_initialize_user_backup_ramv+0x28>)
   d7a5e:	601a      	str	r2, [r3, #0]
}
   d7a60:	bd08      	pop	{r3, pc}
   d7a62:	bf00      	nop
   d7a64:	2003f400 	.word	0x2003f400
   d7a68:	2003f404 	.word	0x2003f404
   d7a6c:	000dad60 	.word	0x000dad60
   d7a70:	2003f400 	.word	0x2003f400
   d7a74:	9a271c1e 	.word	0x9a271c1e

000d7a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7a78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a7a:	2300      	movs	r3, #0
   d7a7c:	9300      	str	r3, [sp, #0]
   d7a7e:	461a      	mov	r2, r3
   d7a80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a84:	f7fd fd92 	bl	d55ac <system_ctrl_set_result>
}
   d7a88:	b003      	add	sp, #12
   d7a8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7a90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7a92:	8843      	ldrh	r3, [r0, #2]
   d7a94:	2b0a      	cmp	r3, #10
   d7a96:	d008      	beq.n	d7aaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7a98:	2b50      	cmp	r3, #80	; 0x50
   d7a9a:	d10b      	bne.n	d7ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7a9c:	4b09      	ldr	r3, [pc, #36]	; (d7ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7a9e:	681b      	ldr	r3, [r3, #0]
   d7aa0:	b14b      	cbz	r3, d7ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7aa2:	b003      	add	sp, #12
   d7aa4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7aa8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7aaa:	f7ff ffe5 	bl	d7a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7aae:	b003      	add	sp, #12
   d7ab0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ab4:	2300      	movs	r3, #0
   d7ab6:	9300      	str	r3, [sp, #0]
   d7ab8:	461a      	mov	r2, r3
   d7aba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7abe:	f7fd fd75 	bl	d55ac <system_ctrl_set_result>
}
   d7ac2:	e7f4      	b.n	d7aae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7ac4:	2003e72c 	.word	0x2003e72c

000d7ac8 <module_user_init_hook>:
{
   d7ac8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7aca:	4812      	ldr	r0, [pc, #72]	; (d7b14 <module_user_init_hook+0x4c>)
   d7acc:	2100      	movs	r1, #0
   d7ace:	f7fd fe37 	bl	d5740 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d7ad2:	4b11      	ldr	r3, [pc, #68]	; (d7b18 <module_user_init_hook+0x50>)
   d7ad4:	681a      	ldr	r2, [r3, #0]
   d7ad6:	4b11      	ldr	r3, [pc, #68]	; (d7b1c <module_user_init_hook+0x54>)
   d7ad8:	429a      	cmp	r2, r3
   d7ada:	4b11      	ldr	r3, [pc, #68]	; (d7b20 <module_user_init_hook+0x58>)
   d7adc:	bf0c      	ite	eq
   d7ade:	2201      	moveq	r2, #1
   d7ae0:	2200      	movne	r2, #0
   d7ae2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ae4:	d001      	beq.n	d7aea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d7ae6:	f7ff ffb1 	bl	d7a4c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7aea:	f7fd fbbd 	bl	d5268 <HAL_RNG_GetRandomNumber>
   d7aee:	4604      	mov	r4, r0
    srand(seed);
   d7af0:	f000 fe14 	bl	d871c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7af4:	4b0b      	ldr	r3, [pc, #44]	; (d7b24 <module_user_init_hook+0x5c>)
   d7af6:	b113      	cbz	r3, d7afe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d7af8:	4620      	mov	r0, r4
   d7afa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7afe:	2100      	movs	r1, #0
   d7b00:	4808      	ldr	r0, [pc, #32]	; (d7b24 <module_user_init_hook+0x5c>)
   d7b02:	f7fd fd7d 	bl	d5600 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7b0a:	4807      	ldr	r0, [pc, #28]	; (d7b28 <module_user_init_hook+0x60>)
   d7b0c:	2100      	movs	r1, #0
   d7b0e:	f7fd bd43 	b.w	d5598 <system_ctrl_set_app_request_handler>
   d7b12:	bf00      	nop
   d7b14:	000d79f5 	.word	0x000d79f5
   d7b18:	2003f400 	.word	0x2003f400
   d7b1c:	9a271c1e 	.word	0x9a271c1e
   d7b20:	2003e728 	.word	0x2003e728
   d7b24:	00000000 	.word	0x00000000
   d7b28:	000d7a91 	.word	0x000d7a91

000d7b2c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7b2c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7b2e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7b30:	d902      	bls.n	d7b38 <pinAvailable+0xc>
    return false;
   d7b32:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7b34:	b002      	add	sp, #8
   d7b36:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7b38:	f1a0 030b 	sub.w	r3, r0, #11
   d7b3c:	2b02      	cmp	r3, #2
   d7b3e:	d81a      	bhi.n	d7b76 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7b40:	4c17      	ldr	r4, [pc, #92]	; (d7ba0 <pinAvailable+0x74>)
   d7b42:	7821      	ldrb	r1, [r4, #0]
   d7b44:	f3bf 8f5b 	dmb	ish
   d7b48:	f011 0101 	ands.w	r1, r1, #1
   d7b4c:	d10b      	bne.n	d7b66 <pinAvailable+0x3a>
   d7b4e:	4620      	mov	r0, r4
   d7b50:	9101      	str	r1, [sp, #4]
   d7b52:	f7fc fab1 	bl	d40b8 <__cxa_guard_acquire>
   d7b56:	9901      	ldr	r1, [sp, #4]
   d7b58:	b128      	cbz	r0, d7b66 <pinAvailable+0x3a>
   d7b5a:	4812      	ldr	r0, [pc, #72]	; (d7ba4 <pinAvailable+0x78>)
   d7b5c:	f7ff fcaa 	bl	d74b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7b60:	4620      	mov	r0, r4
   d7b62:	f7fc faae 	bl	d40c2 <__cxa_guard_release>
   d7b66:	4b0f      	ldr	r3, [pc, #60]	; (d7ba4 <pinAvailable+0x78>)
   d7b68:	7818      	ldrb	r0, [r3, #0]
   d7b6a:	f7fd fc35 	bl	d53d8 <hal_spi_is_enabled>
   d7b6e:	2800      	cmp	r0, #0
   d7b70:	d1df      	bne.n	d7b32 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7b72:	2001      	movs	r0, #1
   d7b74:	e7de      	b.n	d7b34 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7b76:	2801      	cmp	r0, #1
   d7b78:	d809      	bhi.n	d7b8e <pinAvailable+0x62>
   d7b7a:	f000 f883 	bl	d7c84 <_Z19__fetch_global_Wirev>
   d7b7e:	2100      	movs	r1, #0
   d7b80:	7c00      	ldrb	r0, [r0, #16]
   d7b82:	f7fd fbf1 	bl	d5368 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7b86:	f080 0001 	eor.w	r0, r0, #1
   d7b8a:	b2c0      	uxtb	r0, r0
   d7b8c:	e7d2      	b.n	d7b34 <pinAvailable+0x8>
   d7b8e:	3809      	subs	r0, #9
   d7b90:	2801      	cmp	r0, #1
   d7b92:	d8ee      	bhi.n	d7b72 <pinAvailable+0x46>
   d7b94:	f7ff fdf0 	bl	d7778 <_Z22__fetch_global_Serial1v>
   d7b98:	7c00      	ldrb	r0, [r0, #16]
   d7b9a:	f7fd fc5d 	bl	d5458 <hal_usart_is_enabled>
   d7b9e:	e7f2      	b.n	d7b86 <pinAvailable+0x5a>
   d7ba0:	2003e730 	.word	0x2003e730
   d7ba4:	2003e734 	.word	0x2003e734

000d7ba8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ba8:	2823      	cmp	r0, #35	; 0x23
{
   d7baa:	b538      	push	{r3, r4, r5, lr}
   d7bac:	4604      	mov	r4, r0
   d7bae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7bb0:	d80a      	bhi.n	d7bc8 <pinMode+0x20>
   d7bb2:	29ff      	cmp	r1, #255	; 0xff
   d7bb4:	d008      	beq.n	d7bc8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7bb6:	f7ff ffb9 	bl	d7b2c <pinAvailable>
   d7bba:	b128      	cbz	r0, d7bc8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7bbc:	4629      	mov	r1, r5
   d7bbe:	4620      	mov	r0, r4
}
   d7bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7bc4:	f7fd bb80 	b.w	d52c8 <HAL_Pin_Mode>
}
   d7bc8:	bd38      	pop	{r3, r4, r5, pc}

000d7bca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7bca:	b538      	push	{r3, r4, r5, lr}
   d7bcc:	4604      	mov	r4, r0
   d7bce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bd0:	f7fd fb82 	bl	d52d8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7bd4:	28ff      	cmp	r0, #255	; 0xff
   d7bd6:	d010      	beq.n	d7bfa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7bd8:	2806      	cmp	r0, #6
   d7bda:	d804      	bhi.n	d7be6 <digitalWrite+0x1c>
   d7bdc:	234d      	movs	r3, #77	; 0x4d
   d7bde:	fa23 f000 	lsr.w	r0, r3, r0
   d7be2:	07c3      	lsls	r3, r0, #31
   d7be4:	d409      	bmi.n	d7bfa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7be6:	4620      	mov	r0, r4
   d7be8:	f7ff ffa0 	bl	d7b2c <pinAvailable>
   d7bec:	b128      	cbz	r0, d7bfa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bee:	4629      	mov	r1, r5
   d7bf0:	4620      	mov	r0, r4
}
   d7bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7bf6:	f7fd bb77 	b.w	d52e8 <HAL_GPIO_Write>
}
   d7bfa:	bd38      	pop	{r3, r4, r5, pc}

000d7bfc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7bfc:	b510      	push	{r4, lr}
   d7bfe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c00:	f7fd fb6a 	bl	d52d8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7c04:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7c06:	b2db      	uxtb	r3, r3
   d7c08:	2b01      	cmp	r3, #1
   d7c0a:	d908      	bls.n	d7c1e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7c0c:	4620      	mov	r0, r4
   d7c0e:	f7ff ff8d 	bl	d7b2c <pinAvailable>
   d7c12:	b120      	cbz	r0, d7c1e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c14:	4620      	mov	r0, r4
}
   d7c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7c1a:	f7fd bb6d 	b.w	d52f8 <HAL_GPIO_Read>
}
   d7c1e:	2000      	movs	r0, #0
   d7c20:	bd10      	pop	{r4, pc}

000d7c22 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7c22:	280d      	cmp	r0, #13
{
   d7c24:	b510      	push	{r4, lr}
   d7c26:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7c28:	bf9c      	itt	ls
   d7c2a:	340e      	addls	r4, #14
   d7c2c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7c2e:	4620      	mov	r0, r4
   d7c30:	f7ff ff7c 	bl	d7b2c <pinAvailable>
   d7c34:	b150      	cbz	r0, d7c4c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7c36:	2103      	movs	r1, #3
   d7c38:	4620      	mov	r0, r4
   d7c3a:	f7fd fb3d 	bl	d52b8 <HAL_Validate_Pin_Function>
   d7c3e:	2803      	cmp	r0, #3
   d7c40:	d104      	bne.n	d7c4c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7c42:	4620      	mov	r0, r4
}
   d7c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7c48:	f7fd bb5e 	b.w	d5308 <hal_adc_read>
}
   d7c4c:	2000      	movs	r0, #0
   d7c4e:	bd10      	pop	{r4, pc}

000d7c50 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c50:	4770      	bx	lr
	...

000d7c54 <_Z17acquireWireBufferv>:
{
   d7c54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7c56:	2300      	movs	r3, #0
   d7c58:	2520      	movs	r5, #32
   d7c5a:	8043      	strh	r3, [r0, #2]
   d7c5c:	2314      	movs	r3, #20
{
   d7c5e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7c60:	8003      	strh	r3, [r0, #0]
   d7c62:	6085      	str	r5, [r0, #8]
   d7c64:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c66:	4906      	ldr	r1, [pc, #24]	; (d7c80 <_Z17acquireWireBufferv+0x2c>)
   d7c68:	4628      	mov	r0, r5
   d7c6a:	f000 f833 	bl	d7cd4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c6e:	4904      	ldr	r1, [pc, #16]	; (d7c80 <_Z17acquireWireBufferv+0x2c>)
	};
   d7c70:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c72:	4628      	mov	r0, r5
   d7c74:	f000 f82e 	bl	d7cd4 <_ZnajRKSt9nothrow_t>
	};
   d7c78:	60e0      	str	r0, [r4, #12]
}
   d7c7a:	4620      	mov	r0, r4
   d7c7c:	bd38      	pop	{r3, r4, r5, pc}
   d7c7e:	bf00      	nop
   d7c80:	000daabc 	.word	0x000daabc

000d7c84 <_Z19__fetch_global_Wirev>:
{
   d7c84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c86:	4d0e      	ldr	r5, [pc, #56]	; (d7cc0 <_Z19__fetch_global_Wirev+0x3c>)
   d7c88:	7829      	ldrb	r1, [r5, #0]
   d7c8a:	f3bf 8f5b 	dmb	ish
   d7c8e:	f011 0401 	ands.w	r4, r1, #1
{
   d7c92:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c94:	d111      	bne.n	d7cba <_Z19__fetch_global_Wirev+0x36>
   d7c96:	4628      	mov	r0, r5
   d7c98:	f7fc fa0e 	bl	d40b8 <__cxa_guard_acquire>
   d7c9c:	b168      	cbz	r0, d7cba <_Z19__fetch_global_Wirev+0x36>
   d7c9e:	a801      	add	r0, sp, #4
   d7ca0:	f7ff ffd8 	bl	d7c54 <_Z17acquireWireBufferv>
   d7ca4:	aa01      	add	r2, sp, #4
   d7ca6:	4621      	mov	r1, r4
   d7ca8:	4806      	ldr	r0, [pc, #24]	; (d7cc4 <_Z19__fetch_global_Wirev+0x40>)
   d7caa:	f7fe f89d 	bl	d5de8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7cae:	4628      	mov	r0, r5
   d7cb0:	f7fc fa07 	bl	d40c2 <__cxa_guard_release>
   d7cb4:	4804      	ldr	r0, [pc, #16]	; (d7cc8 <_Z19__fetch_global_Wirev+0x44>)
   d7cb6:	f000 fcf7 	bl	d86a8 <atexit>
	return wire;
}
   d7cba:	4802      	ldr	r0, [pc, #8]	; (d7cc4 <_Z19__fetch_global_Wirev+0x40>)
   d7cbc:	b007      	add	sp, #28
   d7cbe:	bd30      	pop	{r4, r5, pc}
   d7cc0:	2003e740 	.word	0x2003e740
   d7cc4:	2003e744 	.word	0x2003e744
   d7cc8:	000d7c51 	.word	0x000d7c51

000d7ccc <_ZdlPvj>:
   d7ccc:	f7fc b9e7 	b.w	d409e <_ZdlPv>

000d7cd0 <_ZnwjRKSt9nothrow_t>:
   d7cd0:	f7fc b9e1 	b.w	d4096 <_Znwj>

000d7cd4 <_ZnajRKSt9nothrow_t>:
   d7cd4:	f7fc b9e1 	b.w	d409a <_Znaj>

000d7cd8 <_ZSt25__throw_bad_function_callv>:
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	f7fd fd21 	bl	d5720 <abort>
	...

000d7ce0 <__aeabi_drsub>:
   d7ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7ce4:	e002      	b.n	d7cec <__adddf3>
   d7ce6:	bf00      	nop

000d7ce8 <__aeabi_dsub>:
   d7ce8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7cec <__adddf3>:
   d7cec:	b530      	push	{r4, r5, lr}
   d7cee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7cf2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7cf6:	ea94 0f05 	teq	r4, r5
   d7cfa:	bf08      	it	eq
   d7cfc:	ea90 0f02 	teqeq	r0, r2
   d7d00:	bf1f      	itttt	ne
   d7d02:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7d06:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7d0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7d0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d12:	f000 80e2 	beq.w	d7eda <__adddf3+0x1ee>
   d7d16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7d1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7d1e:	bfb8      	it	lt
   d7d20:	426d      	neglt	r5, r5
   d7d22:	dd0c      	ble.n	d7d3e <__adddf3+0x52>
   d7d24:	442c      	add	r4, r5
   d7d26:	ea80 0202 	eor.w	r2, r0, r2
   d7d2a:	ea81 0303 	eor.w	r3, r1, r3
   d7d2e:	ea82 0000 	eor.w	r0, r2, r0
   d7d32:	ea83 0101 	eor.w	r1, r3, r1
   d7d36:	ea80 0202 	eor.w	r2, r0, r2
   d7d3a:	ea81 0303 	eor.w	r3, r1, r3
   d7d3e:	2d36      	cmp	r5, #54	; 0x36
   d7d40:	bf88      	it	hi
   d7d42:	bd30      	pophi	{r4, r5, pc}
   d7d44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7d48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7d4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7d50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7d54:	d002      	beq.n	d7d5c <__adddf3+0x70>
   d7d56:	4240      	negs	r0, r0
   d7d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7d60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7d64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7d68:	d002      	beq.n	d7d70 <__adddf3+0x84>
   d7d6a:	4252      	negs	r2, r2
   d7d6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d70:	ea94 0f05 	teq	r4, r5
   d7d74:	f000 80a7 	beq.w	d7ec6 <__adddf3+0x1da>
   d7d78:	f1a4 0401 	sub.w	r4, r4, #1
   d7d7c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7d80:	db0d      	blt.n	d7d9e <__adddf3+0xb2>
   d7d82:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7d86:	fa22 f205 	lsr.w	r2, r2, r5
   d7d8a:	1880      	adds	r0, r0, r2
   d7d8c:	f141 0100 	adc.w	r1, r1, #0
   d7d90:	fa03 f20e 	lsl.w	r2, r3, lr
   d7d94:	1880      	adds	r0, r0, r2
   d7d96:	fa43 f305 	asr.w	r3, r3, r5
   d7d9a:	4159      	adcs	r1, r3
   d7d9c:	e00e      	b.n	d7dbc <__adddf3+0xd0>
   d7d9e:	f1a5 0520 	sub.w	r5, r5, #32
   d7da2:	f10e 0e20 	add.w	lr, lr, #32
   d7da6:	2a01      	cmp	r2, #1
   d7da8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7dac:	bf28      	it	cs
   d7dae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7db2:	fa43 f305 	asr.w	r3, r3, r5
   d7db6:	18c0      	adds	r0, r0, r3
   d7db8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7dc0:	d507      	bpl.n	d7dd2 <__adddf3+0xe6>
   d7dc2:	f04f 0e00 	mov.w	lr, #0
   d7dc6:	f1dc 0c00 	rsbs	ip, ip, #0
   d7dca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7dce:	eb6e 0101 	sbc.w	r1, lr, r1
   d7dd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7dd6:	d31b      	bcc.n	d7e10 <__adddf3+0x124>
   d7dd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7ddc:	d30c      	bcc.n	d7df8 <__adddf3+0x10c>
   d7dde:	0849      	lsrs	r1, r1, #1
   d7de0:	ea5f 0030 	movs.w	r0, r0, rrx
   d7de4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7de8:	f104 0401 	add.w	r4, r4, #1
   d7dec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7df0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7df4:	f080 809a 	bcs.w	d7f2c <__adddf3+0x240>
   d7df8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7dfc:	bf08      	it	eq
   d7dfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7e02:	f150 0000 	adcs.w	r0, r0, #0
   d7e06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7e0a:	ea41 0105 	orr.w	r1, r1, r5
   d7e0e:	bd30      	pop	{r4, r5, pc}
   d7e10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7e14:	4140      	adcs	r0, r0
   d7e16:	eb41 0101 	adc.w	r1, r1, r1
   d7e1a:	3c01      	subs	r4, #1
   d7e1c:	bf28      	it	cs
   d7e1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7e22:	d2e9      	bcs.n	d7df8 <__adddf3+0x10c>
   d7e24:	f091 0f00 	teq	r1, #0
   d7e28:	bf04      	itt	eq
   d7e2a:	4601      	moveq	r1, r0
   d7e2c:	2000      	moveq	r0, #0
   d7e2e:	fab1 f381 	clz	r3, r1
   d7e32:	bf08      	it	eq
   d7e34:	3320      	addeq	r3, #32
   d7e36:	f1a3 030b 	sub.w	r3, r3, #11
   d7e3a:	f1b3 0220 	subs.w	r2, r3, #32
   d7e3e:	da0c      	bge.n	d7e5a <__adddf3+0x16e>
   d7e40:	320c      	adds	r2, #12
   d7e42:	dd08      	ble.n	d7e56 <__adddf3+0x16a>
   d7e44:	f102 0c14 	add.w	ip, r2, #20
   d7e48:	f1c2 020c 	rsb	r2, r2, #12
   d7e4c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7e50:	fa21 f102 	lsr.w	r1, r1, r2
   d7e54:	e00c      	b.n	d7e70 <__adddf3+0x184>
   d7e56:	f102 0214 	add.w	r2, r2, #20
   d7e5a:	bfd8      	it	le
   d7e5c:	f1c2 0c20 	rsble	ip, r2, #32
   d7e60:	fa01 f102 	lsl.w	r1, r1, r2
   d7e64:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7e68:	bfdc      	itt	le
   d7e6a:	ea41 010c 	orrle.w	r1, r1, ip
   d7e6e:	4090      	lslle	r0, r2
   d7e70:	1ae4      	subs	r4, r4, r3
   d7e72:	bfa2      	ittt	ge
   d7e74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7e78:	4329      	orrge	r1, r5
   d7e7a:	bd30      	popge	{r4, r5, pc}
   d7e7c:	ea6f 0404 	mvn.w	r4, r4
   d7e80:	3c1f      	subs	r4, #31
   d7e82:	da1c      	bge.n	d7ebe <__adddf3+0x1d2>
   d7e84:	340c      	adds	r4, #12
   d7e86:	dc0e      	bgt.n	d7ea6 <__adddf3+0x1ba>
   d7e88:	f104 0414 	add.w	r4, r4, #20
   d7e8c:	f1c4 0220 	rsb	r2, r4, #32
   d7e90:	fa20 f004 	lsr.w	r0, r0, r4
   d7e94:	fa01 f302 	lsl.w	r3, r1, r2
   d7e98:	ea40 0003 	orr.w	r0, r0, r3
   d7e9c:	fa21 f304 	lsr.w	r3, r1, r4
   d7ea0:	ea45 0103 	orr.w	r1, r5, r3
   d7ea4:	bd30      	pop	{r4, r5, pc}
   d7ea6:	f1c4 040c 	rsb	r4, r4, #12
   d7eaa:	f1c4 0220 	rsb	r2, r4, #32
   d7eae:	fa20 f002 	lsr.w	r0, r0, r2
   d7eb2:	fa01 f304 	lsl.w	r3, r1, r4
   d7eb6:	ea40 0003 	orr.w	r0, r0, r3
   d7eba:	4629      	mov	r1, r5
   d7ebc:	bd30      	pop	{r4, r5, pc}
   d7ebe:	fa21 f004 	lsr.w	r0, r1, r4
   d7ec2:	4629      	mov	r1, r5
   d7ec4:	bd30      	pop	{r4, r5, pc}
   d7ec6:	f094 0f00 	teq	r4, #0
   d7eca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7ece:	bf06      	itte	eq
   d7ed0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7ed4:	3401      	addeq	r4, #1
   d7ed6:	3d01      	subne	r5, #1
   d7ed8:	e74e      	b.n	d7d78 <__adddf3+0x8c>
   d7eda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7ede:	bf18      	it	ne
   d7ee0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ee4:	d029      	beq.n	d7f3a <__adddf3+0x24e>
   d7ee6:	ea94 0f05 	teq	r4, r5
   d7eea:	bf08      	it	eq
   d7eec:	ea90 0f02 	teqeq	r0, r2
   d7ef0:	d005      	beq.n	d7efe <__adddf3+0x212>
   d7ef2:	ea54 0c00 	orrs.w	ip, r4, r0
   d7ef6:	bf04      	itt	eq
   d7ef8:	4619      	moveq	r1, r3
   d7efa:	4610      	moveq	r0, r2
   d7efc:	bd30      	pop	{r4, r5, pc}
   d7efe:	ea91 0f03 	teq	r1, r3
   d7f02:	bf1e      	ittt	ne
   d7f04:	2100      	movne	r1, #0
   d7f06:	2000      	movne	r0, #0
   d7f08:	bd30      	popne	{r4, r5, pc}
   d7f0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7f0e:	d105      	bne.n	d7f1c <__adddf3+0x230>
   d7f10:	0040      	lsls	r0, r0, #1
   d7f12:	4149      	adcs	r1, r1
   d7f14:	bf28      	it	cs
   d7f16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7f1a:	bd30      	pop	{r4, r5, pc}
   d7f1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7f20:	bf3c      	itt	cc
   d7f22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7f26:	bd30      	popcc	{r4, r5, pc}
   d7f28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7f30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7f34:	f04f 0000 	mov.w	r0, #0
   d7f38:	bd30      	pop	{r4, r5, pc}
   d7f3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7f3e:	bf1a      	itte	ne
   d7f40:	4619      	movne	r1, r3
   d7f42:	4610      	movne	r0, r2
   d7f44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7f48:	bf1c      	itt	ne
   d7f4a:	460b      	movne	r3, r1
   d7f4c:	4602      	movne	r2, r0
   d7f4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7f52:	bf06      	itte	eq
   d7f54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7f58:	ea91 0f03 	teqeq	r1, r3
   d7f5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7f60:	bd30      	pop	{r4, r5, pc}
   d7f62:	bf00      	nop

000d7f64 <__aeabi_ui2d>:
   d7f64:	f090 0f00 	teq	r0, #0
   d7f68:	bf04      	itt	eq
   d7f6a:	2100      	moveq	r1, #0
   d7f6c:	4770      	bxeq	lr
   d7f6e:	b530      	push	{r4, r5, lr}
   d7f70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f78:	f04f 0500 	mov.w	r5, #0
   d7f7c:	f04f 0100 	mov.w	r1, #0
   d7f80:	e750      	b.n	d7e24 <__adddf3+0x138>
   d7f82:	bf00      	nop

000d7f84 <__aeabi_i2d>:
   d7f84:	f090 0f00 	teq	r0, #0
   d7f88:	bf04      	itt	eq
   d7f8a:	2100      	moveq	r1, #0
   d7f8c:	4770      	bxeq	lr
   d7f8e:	b530      	push	{r4, r5, lr}
   d7f90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7f9c:	bf48      	it	mi
   d7f9e:	4240      	negmi	r0, r0
   d7fa0:	f04f 0100 	mov.w	r1, #0
   d7fa4:	e73e      	b.n	d7e24 <__adddf3+0x138>
   d7fa6:	bf00      	nop

000d7fa8 <__aeabi_f2d>:
   d7fa8:	0042      	lsls	r2, r0, #1
   d7faa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7fae:	ea4f 0131 	mov.w	r1, r1, rrx
   d7fb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7fb6:	bf1f      	itttt	ne
   d7fb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7fbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7fc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7fc4:	4770      	bxne	lr
   d7fc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7fca:	bf08      	it	eq
   d7fcc:	4770      	bxeq	lr
   d7fce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d7fd2:	bf04      	itt	eq
   d7fd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7fd8:	4770      	bxeq	lr
   d7fda:	b530      	push	{r4, r5, lr}
   d7fdc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7fe8:	e71c      	b.n	d7e24 <__adddf3+0x138>
   d7fea:	bf00      	nop

000d7fec <__aeabi_ul2d>:
   d7fec:	ea50 0201 	orrs.w	r2, r0, r1
   d7ff0:	bf08      	it	eq
   d7ff2:	4770      	bxeq	lr
   d7ff4:	b530      	push	{r4, r5, lr}
   d7ff6:	f04f 0500 	mov.w	r5, #0
   d7ffa:	e00a      	b.n	d8012 <__aeabi_l2d+0x16>

000d7ffc <__aeabi_l2d>:
   d7ffc:	ea50 0201 	orrs.w	r2, r0, r1
   d8000:	bf08      	it	eq
   d8002:	4770      	bxeq	lr
   d8004:	b530      	push	{r4, r5, lr}
   d8006:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d800a:	d502      	bpl.n	d8012 <__aeabi_l2d+0x16>
   d800c:	4240      	negs	r0, r0
   d800e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8012:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8016:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d801a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d801e:	f43f aed8 	beq.w	d7dd2 <__adddf3+0xe6>
   d8022:	f04f 0203 	mov.w	r2, #3
   d8026:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d802a:	bf18      	it	ne
   d802c:	3203      	addne	r2, #3
   d802e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8032:	bf18      	it	ne
   d8034:	3203      	addne	r2, #3
   d8036:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d803a:	f1c2 0320 	rsb	r3, r2, #32
   d803e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8042:	fa20 f002 	lsr.w	r0, r0, r2
   d8046:	fa01 fe03 	lsl.w	lr, r1, r3
   d804a:	ea40 000e 	orr.w	r0, r0, lr
   d804e:	fa21 f102 	lsr.w	r1, r1, r2
   d8052:	4414      	add	r4, r2
   d8054:	e6bd      	b.n	d7dd2 <__adddf3+0xe6>
   d8056:	bf00      	nop

000d8058 <__aeabi_dmul>:
   d8058:	b570      	push	{r4, r5, r6, lr}
   d805a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d805e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8062:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8066:	bf1d      	ittte	ne
   d8068:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d806c:	ea94 0f0c 	teqne	r4, ip
   d8070:	ea95 0f0c 	teqne	r5, ip
   d8074:	f000 f8de 	bleq	d8234 <__aeabi_dmul+0x1dc>
   d8078:	442c      	add	r4, r5
   d807a:	ea81 0603 	eor.w	r6, r1, r3
   d807e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8082:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8086:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d808a:	bf18      	it	ne
   d808c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8090:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8098:	d038      	beq.n	d810c <__aeabi_dmul+0xb4>
   d809a:	fba0 ce02 	umull	ip, lr, r0, r2
   d809e:	f04f 0500 	mov.w	r5, #0
   d80a2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d80a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d80aa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d80ae:	f04f 0600 	mov.w	r6, #0
   d80b2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d80b6:	f09c 0f00 	teq	ip, #0
   d80ba:	bf18      	it	ne
   d80bc:	f04e 0e01 	orrne.w	lr, lr, #1
   d80c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d80c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d80c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d80cc:	d204      	bcs.n	d80d8 <__aeabi_dmul+0x80>
   d80ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d80d2:	416d      	adcs	r5, r5
   d80d4:	eb46 0606 	adc.w	r6, r6, r6
   d80d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d80dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d80e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d80e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d80e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d80ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d80f0:	bf88      	it	hi
   d80f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d80f6:	d81e      	bhi.n	d8136 <__aeabi_dmul+0xde>
   d80f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d80fc:	bf08      	it	eq
   d80fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8102:	f150 0000 	adcs.w	r0, r0, #0
   d8106:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d810a:	bd70      	pop	{r4, r5, r6, pc}
   d810c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8110:	ea46 0101 	orr.w	r1, r6, r1
   d8114:	ea40 0002 	orr.w	r0, r0, r2
   d8118:	ea81 0103 	eor.w	r1, r1, r3
   d811c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8120:	bfc2      	ittt	gt
   d8122:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8126:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d812a:	bd70      	popgt	{r4, r5, r6, pc}
   d812c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8130:	f04f 0e00 	mov.w	lr, #0
   d8134:	3c01      	subs	r4, #1
   d8136:	f300 80ab 	bgt.w	d8290 <__aeabi_dmul+0x238>
   d813a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d813e:	bfde      	ittt	le
   d8140:	2000      	movle	r0, #0
   d8142:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8146:	bd70      	pople	{r4, r5, r6, pc}
   d8148:	f1c4 0400 	rsb	r4, r4, #0
   d814c:	3c20      	subs	r4, #32
   d814e:	da35      	bge.n	d81bc <__aeabi_dmul+0x164>
   d8150:	340c      	adds	r4, #12
   d8152:	dc1b      	bgt.n	d818c <__aeabi_dmul+0x134>
   d8154:	f104 0414 	add.w	r4, r4, #20
   d8158:	f1c4 0520 	rsb	r5, r4, #32
   d815c:	fa00 f305 	lsl.w	r3, r0, r5
   d8160:	fa20 f004 	lsr.w	r0, r0, r4
   d8164:	fa01 f205 	lsl.w	r2, r1, r5
   d8168:	ea40 0002 	orr.w	r0, r0, r2
   d816c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8170:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8174:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8178:	fa21 f604 	lsr.w	r6, r1, r4
   d817c:	eb42 0106 	adc.w	r1, r2, r6
   d8180:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8184:	bf08      	it	eq
   d8186:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d818a:	bd70      	pop	{r4, r5, r6, pc}
   d818c:	f1c4 040c 	rsb	r4, r4, #12
   d8190:	f1c4 0520 	rsb	r5, r4, #32
   d8194:	fa00 f304 	lsl.w	r3, r0, r4
   d8198:	fa20 f005 	lsr.w	r0, r0, r5
   d819c:	fa01 f204 	lsl.w	r2, r1, r4
   d81a0:	ea40 0002 	orr.w	r0, r0, r2
   d81a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d81a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d81ac:	f141 0100 	adc.w	r1, r1, #0
   d81b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d81b4:	bf08      	it	eq
   d81b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d81ba:	bd70      	pop	{r4, r5, r6, pc}
   d81bc:	f1c4 0520 	rsb	r5, r4, #32
   d81c0:	fa00 f205 	lsl.w	r2, r0, r5
   d81c4:	ea4e 0e02 	orr.w	lr, lr, r2
   d81c8:	fa20 f304 	lsr.w	r3, r0, r4
   d81cc:	fa01 f205 	lsl.w	r2, r1, r5
   d81d0:	ea43 0302 	orr.w	r3, r3, r2
   d81d4:	fa21 f004 	lsr.w	r0, r1, r4
   d81d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d81dc:	fa21 f204 	lsr.w	r2, r1, r4
   d81e0:	ea20 0002 	bic.w	r0, r0, r2
   d81e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d81e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d81ec:	bf08      	it	eq
   d81ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d81f2:	bd70      	pop	{r4, r5, r6, pc}
   d81f4:	f094 0f00 	teq	r4, #0
   d81f8:	d10f      	bne.n	d821a <__aeabi_dmul+0x1c2>
   d81fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d81fe:	0040      	lsls	r0, r0, #1
   d8200:	eb41 0101 	adc.w	r1, r1, r1
   d8204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8208:	bf08      	it	eq
   d820a:	3c01      	subeq	r4, #1
   d820c:	d0f7      	beq.n	d81fe <__aeabi_dmul+0x1a6>
   d820e:	ea41 0106 	orr.w	r1, r1, r6
   d8212:	f095 0f00 	teq	r5, #0
   d8216:	bf18      	it	ne
   d8218:	4770      	bxne	lr
   d821a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d821e:	0052      	lsls	r2, r2, #1
   d8220:	eb43 0303 	adc.w	r3, r3, r3
   d8224:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8228:	bf08      	it	eq
   d822a:	3d01      	subeq	r5, #1
   d822c:	d0f7      	beq.n	d821e <__aeabi_dmul+0x1c6>
   d822e:	ea43 0306 	orr.w	r3, r3, r6
   d8232:	4770      	bx	lr
   d8234:	ea94 0f0c 	teq	r4, ip
   d8238:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d823c:	bf18      	it	ne
   d823e:	ea95 0f0c 	teqne	r5, ip
   d8242:	d00c      	beq.n	d825e <__aeabi_dmul+0x206>
   d8244:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8248:	bf18      	it	ne
   d824a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d824e:	d1d1      	bne.n	d81f4 <__aeabi_dmul+0x19c>
   d8250:	ea81 0103 	eor.w	r1, r1, r3
   d8254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8258:	f04f 0000 	mov.w	r0, #0
   d825c:	bd70      	pop	{r4, r5, r6, pc}
   d825e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8262:	bf06      	itte	eq
   d8264:	4610      	moveq	r0, r2
   d8266:	4619      	moveq	r1, r3
   d8268:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d826c:	d019      	beq.n	d82a2 <__aeabi_dmul+0x24a>
   d826e:	ea94 0f0c 	teq	r4, ip
   d8272:	d102      	bne.n	d827a <__aeabi_dmul+0x222>
   d8274:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8278:	d113      	bne.n	d82a2 <__aeabi_dmul+0x24a>
   d827a:	ea95 0f0c 	teq	r5, ip
   d827e:	d105      	bne.n	d828c <__aeabi_dmul+0x234>
   d8280:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8284:	bf1c      	itt	ne
   d8286:	4610      	movne	r0, r2
   d8288:	4619      	movne	r1, r3
   d828a:	d10a      	bne.n	d82a2 <__aeabi_dmul+0x24a>
   d828c:	ea81 0103 	eor.w	r1, r1, r3
   d8290:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8294:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8298:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d829c:	f04f 0000 	mov.w	r0, #0
   d82a0:	bd70      	pop	{r4, r5, r6, pc}
   d82a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d82a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d82aa:	bd70      	pop	{r4, r5, r6, pc}

000d82ac <__aeabi_ddiv>:
   d82ac:	b570      	push	{r4, r5, r6, lr}
   d82ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d82b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d82b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d82ba:	bf1d      	ittte	ne
   d82bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d82c0:	ea94 0f0c 	teqne	r4, ip
   d82c4:	ea95 0f0c 	teqne	r5, ip
   d82c8:	f000 f8a7 	bleq	d841a <__aeabi_ddiv+0x16e>
   d82cc:	eba4 0405 	sub.w	r4, r4, r5
   d82d0:	ea81 0e03 	eor.w	lr, r1, r3
   d82d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d82d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d82dc:	f000 8088 	beq.w	d83f0 <__aeabi_ddiv+0x144>
   d82e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d82e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d82e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d82ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d82f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d82f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d82f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d82fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8300:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8304:	429d      	cmp	r5, r3
   d8306:	bf08      	it	eq
   d8308:	4296      	cmpeq	r6, r2
   d830a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d830e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8312:	d202      	bcs.n	d831a <__aeabi_ddiv+0x6e>
   d8314:	085b      	lsrs	r3, r3, #1
   d8316:	ea4f 0232 	mov.w	r2, r2, rrx
   d831a:	1ab6      	subs	r6, r6, r2
   d831c:	eb65 0503 	sbc.w	r5, r5, r3
   d8320:	085b      	lsrs	r3, r3, #1
   d8322:	ea4f 0232 	mov.w	r2, r2, rrx
   d8326:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d832a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d832e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8332:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8336:	bf22      	ittt	cs
   d8338:	1ab6      	subcs	r6, r6, r2
   d833a:	4675      	movcs	r5, lr
   d833c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8340:	085b      	lsrs	r3, r3, #1
   d8342:	ea4f 0232 	mov.w	r2, r2, rrx
   d8346:	ebb6 0e02 	subs.w	lr, r6, r2
   d834a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d834e:	bf22      	ittt	cs
   d8350:	1ab6      	subcs	r6, r6, r2
   d8352:	4675      	movcs	r5, lr
   d8354:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8358:	085b      	lsrs	r3, r3, #1
   d835a:	ea4f 0232 	mov.w	r2, r2, rrx
   d835e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8362:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8366:	bf22      	ittt	cs
   d8368:	1ab6      	subcs	r6, r6, r2
   d836a:	4675      	movcs	r5, lr
   d836c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8370:	085b      	lsrs	r3, r3, #1
   d8372:	ea4f 0232 	mov.w	r2, r2, rrx
   d8376:	ebb6 0e02 	subs.w	lr, r6, r2
   d837a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d837e:	bf22      	ittt	cs
   d8380:	1ab6      	subcs	r6, r6, r2
   d8382:	4675      	movcs	r5, lr
   d8384:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8388:	ea55 0e06 	orrs.w	lr, r5, r6
   d838c:	d018      	beq.n	d83c0 <__aeabi_ddiv+0x114>
   d838e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8392:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8396:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d839a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d839e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d83a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d83a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d83aa:	d1c0      	bne.n	d832e <__aeabi_ddiv+0x82>
   d83ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d83b0:	d10b      	bne.n	d83ca <__aeabi_ddiv+0x11e>
   d83b2:	ea41 0100 	orr.w	r1, r1, r0
   d83b6:	f04f 0000 	mov.w	r0, #0
   d83ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d83be:	e7b6      	b.n	d832e <__aeabi_ddiv+0x82>
   d83c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d83c4:	bf04      	itt	eq
   d83c6:	4301      	orreq	r1, r0
   d83c8:	2000      	moveq	r0, #0
   d83ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d83ce:	bf88      	it	hi
   d83d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d83d4:	f63f aeaf 	bhi.w	d8136 <__aeabi_dmul+0xde>
   d83d8:	ebb5 0c03 	subs.w	ip, r5, r3
   d83dc:	bf04      	itt	eq
   d83de:	ebb6 0c02 	subseq.w	ip, r6, r2
   d83e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d83e6:	f150 0000 	adcs.w	r0, r0, #0
   d83ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d83ee:	bd70      	pop	{r4, r5, r6, pc}
   d83f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d83f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d83f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d83fc:	bfc2      	ittt	gt
   d83fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8406:	bd70      	popgt	{r4, r5, r6, pc}
   d8408:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d840c:	f04f 0e00 	mov.w	lr, #0
   d8410:	3c01      	subs	r4, #1
   d8412:	e690      	b.n	d8136 <__aeabi_dmul+0xde>
   d8414:	ea45 0e06 	orr.w	lr, r5, r6
   d8418:	e68d      	b.n	d8136 <__aeabi_dmul+0xde>
   d841a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d841e:	ea94 0f0c 	teq	r4, ip
   d8422:	bf08      	it	eq
   d8424:	ea95 0f0c 	teqeq	r5, ip
   d8428:	f43f af3b 	beq.w	d82a2 <__aeabi_dmul+0x24a>
   d842c:	ea94 0f0c 	teq	r4, ip
   d8430:	d10a      	bne.n	d8448 <__aeabi_ddiv+0x19c>
   d8432:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8436:	f47f af34 	bne.w	d82a2 <__aeabi_dmul+0x24a>
   d843a:	ea95 0f0c 	teq	r5, ip
   d843e:	f47f af25 	bne.w	d828c <__aeabi_dmul+0x234>
   d8442:	4610      	mov	r0, r2
   d8444:	4619      	mov	r1, r3
   d8446:	e72c      	b.n	d82a2 <__aeabi_dmul+0x24a>
   d8448:	ea95 0f0c 	teq	r5, ip
   d844c:	d106      	bne.n	d845c <__aeabi_ddiv+0x1b0>
   d844e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8452:	f43f aefd 	beq.w	d8250 <__aeabi_dmul+0x1f8>
   d8456:	4610      	mov	r0, r2
   d8458:	4619      	mov	r1, r3
   d845a:	e722      	b.n	d82a2 <__aeabi_dmul+0x24a>
   d845c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8460:	bf18      	it	ne
   d8462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8466:	f47f aec5 	bne.w	d81f4 <__aeabi_dmul+0x19c>
   d846a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d846e:	f47f af0d 	bne.w	d828c <__aeabi_dmul+0x234>
   d8472:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8476:	f47f aeeb 	bne.w	d8250 <__aeabi_dmul+0x1f8>
   d847a:	e712      	b.n	d82a2 <__aeabi_dmul+0x24a>

000d847c <__gedf2>:
   d847c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8480:	e006      	b.n	d8490 <__cmpdf2+0x4>
   d8482:	bf00      	nop

000d8484 <__ledf2>:
   d8484:	f04f 0c01 	mov.w	ip, #1
   d8488:	e002      	b.n	d8490 <__cmpdf2+0x4>
   d848a:	bf00      	nop

000d848c <__cmpdf2>:
   d848c:	f04f 0c01 	mov.w	ip, #1
   d8490:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d849c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d84a0:	bf18      	it	ne
   d84a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d84a6:	d01b      	beq.n	d84e0 <__cmpdf2+0x54>
   d84a8:	b001      	add	sp, #4
   d84aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d84ae:	bf0c      	ite	eq
   d84b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d84b4:	ea91 0f03 	teqne	r1, r3
   d84b8:	bf02      	ittt	eq
   d84ba:	ea90 0f02 	teqeq	r0, r2
   d84be:	2000      	moveq	r0, #0
   d84c0:	4770      	bxeq	lr
   d84c2:	f110 0f00 	cmn.w	r0, #0
   d84c6:	ea91 0f03 	teq	r1, r3
   d84ca:	bf58      	it	pl
   d84cc:	4299      	cmppl	r1, r3
   d84ce:	bf08      	it	eq
   d84d0:	4290      	cmpeq	r0, r2
   d84d2:	bf2c      	ite	cs
   d84d4:	17d8      	asrcs	r0, r3, #31
   d84d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d84da:	f040 0001 	orr.w	r0, r0, #1
   d84de:	4770      	bx	lr
   d84e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d84e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d84e8:	d102      	bne.n	d84f0 <__cmpdf2+0x64>
   d84ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d84ee:	d107      	bne.n	d8500 <__cmpdf2+0x74>
   d84f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d84f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d84f8:	d1d6      	bne.n	d84a8 <__cmpdf2+0x1c>
   d84fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d84fe:	d0d3      	beq.n	d84a8 <__cmpdf2+0x1c>
   d8500:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8504:	4770      	bx	lr
   d8506:	bf00      	nop

000d8508 <__aeabi_cdrcmple>:
   d8508:	4684      	mov	ip, r0
   d850a:	4610      	mov	r0, r2
   d850c:	4662      	mov	r2, ip
   d850e:	468c      	mov	ip, r1
   d8510:	4619      	mov	r1, r3
   d8512:	4663      	mov	r3, ip
   d8514:	e000      	b.n	d8518 <__aeabi_cdcmpeq>
   d8516:	bf00      	nop

000d8518 <__aeabi_cdcmpeq>:
   d8518:	b501      	push	{r0, lr}
   d851a:	f7ff ffb7 	bl	d848c <__cmpdf2>
   d851e:	2800      	cmp	r0, #0
   d8520:	bf48      	it	mi
   d8522:	f110 0f00 	cmnmi.w	r0, #0
   d8526:	bd01      	pop	{r0, pc}

000d8528 <__aeabi_dcmpeq>:
   d8528:	f84d ed08 	str.w	lr, [sp, #-8]!
   d852c:	f7ff fff4 	bl	d8518 <__aeabi_cdcmpeq>
   d8530:	bf0c      	ite	eq
   d8532:	2001      	moveq	r0, #1
   d8534:	2000      	movne	r0, #0
   d8536:	f85d fb08 	ldr.w	pc, [sp], #8
   d853a:	bf00      	nop

000d853c <__aeabi_dcmplt>:
   d853c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8540:	f7ff ffea 	bl	d8518 <__aeabi_cdcmpeq>
   d8544:	bf34      	ite	cc
   d8546:	2001      	movcc	r0, #1
   d8548:	2000      	movcs	r0, #0
   d854a:	f85d fb08 	ldr.w	pc, [sp], #8
   d854e:	bf00      	nop

000d8550 <__aeabi_dcmple>:
   d8550:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8554:	f7ff ffe0 	bl	d8518 <__aeabi_cdcmpeq>
   d8558:	bf94      	ite	ls
   d855a:	2001      	movls	r0, #1
   d855c:	2000      	movhi	r0, #0
   d855e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8562:	bf00      	nop

000d8564 <__aeabi_dcmpge>:
   d8564:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8568:	f7ff ffce 	bl	d8508 <__aeabi_cdrcmple>
   d856c:	bf94      	ite	ls
   d856e:	2001      	movls	r0, #1
   d8570:	2000      	movhi	r0, #0
   d8572:	f85d fb08 	ldr.w	pc, [sp], #8
   d8576:	bf00      	nop

000d8578 <__aeabi_dcmpgt>:
   d8578:	f84d ed08 	str.w	lr, [sp, #-8]!
   d857c:	f7ff ffc4 	bl	d8508 <__aeabi_cdrcmple>
   d8580:	bf34      	ite	cc
   d8582:	2001      	movcc	r0, #1
   d8584:	2000      	movcs	r0, #0
   d8586:	f85d fb08 	ldr.w	pc, [sp], #8
   d858a:	bf00      	nop

000d858c <__aeabi_d2uiz>:
   d858c:	004a      	lsls	r2, r1, #1
   d858e:	d211      	bcs.n	d85b4 <__aeabi_d2uiz+0x28>
   d8590:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8594:	d211      	bcs.n	d85ba <__aeabi_d2uiz+0x2e>
   d8596:	d50d      	bpl.n	d85b4 <__aeabi_d2uiz+0x28>
   d8598:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d859c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d85a0:	d40e      	bmi.n	d85c0 <__aeabi_d2uiz+0x34>
   d85a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d85a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d85aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d85ae:	fa23 f002 	lsr.w	r0, r3, r2
   d85b2:	4770      	bx	lr
   d85b4:	f04f 0000 	mov.w	r0, #0
   d85b8:	4770      	bx	lr
   d85ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d85be:	d102      	bne.n	d85c6 <__aeabi_d2uiz+0x3a>
   d85c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d85c4:	4770      	bx	lr
   d85c6:	f04f 0000 	mov.w	r0, #0
   d85ca:	4770      	bx	lr

000d85cc <__aeabi_d2f>:
   d85cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d85d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d85d4:	bf24      	itt	cs
   d85d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d85da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d85de:	d90d      	bls.n	d85fc <__aeabi_d2f+0x30>
   d85e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d85e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d85e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d85ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d85f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d85f4:	bf08      	it	eq
   d85f6:	f020 0001 	biceq.w	r0, r0, #1
   d85fa:	4770      	bx	lr
   d85fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8600:	d121      	bne.n	d8646 <__aeabi_d2f+0x7a>
   d8602:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8606:	bfbc      	itt	lt
   d8608:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d860c:	4770      	bxlt	lr
   d860e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8612:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8616:	f1c2 0218 	rsb	r2, r2, #24
   d861a:	f1c2 0c20 	rsb	ip, r2, #32
   d861e:	fa10 f30c 	lsls.w	r3, r0, ip
   d8622:	fa20 f002 	lsr.w	r0, r0, r2
   d8626:	bf18      	it	ne
   d8628:	f040 0001 	orrne.w	r0, r0, #1
   d862c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8630:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8634:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8638:	ea40 000c 	orr.w	r0, r0, ip
   d863c:	fa23 f302 	lsr.w	r3, r3, r2
   d8640:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8644:	e7cc      	b.n	d85e0 <__aeabi_d2f+0x14>
   d8646:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d864a:	d107      	bne.n	d865c <__aeabi_d2f+0x90>
   d864c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8650:	bf1e      	ittt	ne
   d8652:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8656:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d865a:	4770      	bxne	lr
   d865c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8660:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8664:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8668:	4770      	bx	lr
   d866a:	bf00      	nop

000d866c <__aeabi_d2ulz>:
   d866c:	b5d0      	push	{r4, r6, r7, lr}
   d866e:	4b0c      	ldr	r3, [pc, #48]	; (d86a0 <__aeabi_d2ulz+0x34>)
   d8670:	2200      	movs	r2, #0
   d8672:	4606      	mov	r6, r0
   d8674:	460f      	mov	r7, r1
   d8676:	f7ff fcef 	bl	d8058 <__aeabi_dmul>
   d867a:	f7ff ff87 	bl	d858c <__aeabi_d2uiz>
   d867e:	4604      	mov	r4, r0
   d8680:	f7ff fc70 	bl	d7f64 <__aeabi_ui2d>
   d8684:	4b07      	ldr	r3, [pc, #28]	; (d86a4 <__aeabi_d2ulz+0x38>)
   d8686:	2200      	movs	r2, #0
   d8688:	f7ff fce6 	bl	d8058 <__aeabi_dmul>
   d868c:	4602      	mov	r2, r0
   d868e:	460b      	mov	r3, r1
   d8690:	4630      	mov	r0, r6
   d8692:	4639      	mov	r1, r7
   d8694:	f7ff fb28 	bl	d7ce8 <__aeabi_dsub>
   d8698:	f7ff ff78 	bl	d858c <__aeabi_d2uiz>
   d869c:	4621      	mov	r1, r4
   d869e:	bdd0      	pop	{r4, r6, r7, pc}
   d86a0:	3df00000 	.word	0x3df00000
   d86a4:	41f00000 	.word	0x41f00000

000d86a8 <atexit>:
   d86a8:	2300      	movs	r3, #0
   d86aa:	4601      	mov	r1, r0
   d86ac:	461a      	mov	r2, r3
   d86ae:	4618      	mov	r0, r3
   d86b0:	f000 bfb0 	b.w	d9614 <__register_exitproc>

000d86b4 <atof>:
   d86b4:	2100      	movs	r1, #0
   d86b6:	f000 bef1 	b.w	d949c <strtod>

000d86ba <memcpy>:
   d86ba:	440a      	add	r2, r1
   d86bc:	4291      	cmp	r1, r2
   d86be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d86c2:	d100      	bne.n	d86c6 <memcpy+0xc>
   d86c4:	4770      	bx	lr
   d86c6:	b510      	push	{r4, lr}
   d86c8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86cc:	f803 4f01 	strb.w	r4, [r3, #1]!
   d86d0:	4291      	cmp	r1, r2
   d86d2:	d1f9      	bne.n	d86c8 <memcpy+0xe>
   d86d4:	bd10      	pop	{r4, pc}

000d86d6 <memmove>:
   d86d6:	4288      	cmp	r0, r1
   d86d8:	b510      	push	{r4, lr}
   d86da:	eb01 0402 	add.w	r4, r1, r2
   d86de:	d902      	bls.n	d86e6 <memmove+0x10>
   d86e0:	4284      	cmp	r4, r0
   d86e2:	4623      	mov	r3, r4
   d86e4:	d807      	bhi.n	d86f6 <memmove+0x20>
   d86e6:	1e43      	subs	r3, r0, #1
   d86e8:	42a1      	cmp	r1, r4
   d86ea:	d008      	beq.n	d86fe <memmove+0x28>
   d86ec:	f811 2b01 	ldrb.w	r2, [r1], #1
   d86f0:	f803 2f01 	strb.w	r2, [r3, #1]!
   d86f4:	e7f8      	b.n	d86e8 <memmove+0x12>
   d86f6:	4402      	add	r2, r0
   d86f8:	4601      	mov	r1, r0
   d86fa:	428a      	cmp	r2, r1
   d86fc:	d100      	bne.n	d8700 <memmove+0x2a>
   d86fe:	bd10      	pop	{r4, pc}
   d8700:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8704:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8708:	e7f7      	b.n	d86fa <memmove+0x24>

000d870a <memset>:
   d870a:	4402      	add	r2, r0
   d870c:	4603      	mov	r3, r0
   d870e:	4293      	cmp	r3, r2
   d8710:	d100      	bne.n	d8714 <memset+0xa>
   d8712:	4770      	bx	lr
   d8714:	f803 1b01 	strb.w	r1, [r3], #1
   d8718:	e7f9      	b.n	d870e <memset+0x4>
	...

000d871c <srand>:
   d871c:	b538      	push	{r3, r4, r5, lr}
   d871e:	4b0d      	ldr	r3, [pc, #52]	; (d8754 <srand+0x38>)
   d8720:	681d      	ldr	r5, [r3, #0]
   d8722:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8724:	4604      	mov	r4, r0
   d8726:	b97b      	cbnz	r3, d8748 <srand+0x2c>
   d8728:	2018      	movs	r0, #24
   d872a:	f7fc ffd1 	bl	d56d0 <malloc>
   d872e:	4a0a      	ldr	r2, [pc, #40]	; (d8758 <srand+0x3c>)
   d8730:	4b0a      	ldr	r3, [pc, #40]	; (d875c <srand+0x40>)
   d8732:	63a8      	str	r0, [r5, #56]	; 0x38
   d8734:	e9c0 2300 	strd	r2, r3, [r0]
   d8738:	4b09      	ldr	r3, [pc, #36]	; (d8760 <srand+0x44>)
   d873a:	6083      	str	r3, [r0, #8]
   d873c:	230b      	movs	r3, #11
   d873e:	8183      	strh	r3, [r0, #12]
   d8740:	2201      	movs	r2, #1
   d8742:	2300      	movs	r3, #0
   d8744:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8748:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d874a:	2200      	movs	r2, #0
   d874c:	611c      	str	r4, [r3, #16]
   d874e:	615a      	str	r2, [r3, #20]
   d8750:	bd38      	pop	{r3, r4, r5, pc}
   d8752:	bf00      	nop
   d8754:	2003e1f0 	.word	0x2003e1f0
   d8758:	abcd330e 	.word	0xabcd330e
   d875c:	e66d1234 	.word	0xe66d1234
   d8760:	0005deec 	.word	0x0005deec

000d8764 <strchr>:
   d8764:	b2c9      	uxtb	r1, r1
   d8766:	4603      	mov	r3, r0
   d8768:	f810 2b01 	ldrb.w	r2, [r0], #1
   d876c:	b11a      	cbz	r2, d8776 <strchr+0x12>
   d876e:	428a      	cmp	r2, r1
   d8770:	d1f9      	bne.n	d8766 <strchr+0x2>
   d8772:	4618      	mov	r0, r3
   d8774:	4770      	bx	lr
   d8776:	2900      	cmp	r1, #0
   d8778:	bf18      	it	ne
   d877a:	2300      	movne	r3, #0
   d877c:	e7f9      	b.n	d8772 <strchr+0xe>

000d877e <strchrnul>:
   d877e:	b510      	push	{r4, lr}
   d8780:	4604      	mov	r4, r0
   d8782:	f7ff ffef 	bl	d8764 <strchr>
   d8786:	b918      	cbnz	r0, d8790 <strchrnul+0x12>
   d8788:	4620      	mov	r0, r4
   d878a:	f000 f832 	bl	d87f2 <strlen>
   d878e:	4420      	add	r0, r4
   d8790:	bd10      	pop	{r4, pc}

000d8792 <strcmp>:
   d8792:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8796:	f811 3b01 	ldrb.w	r3, [r1], #1
   d879a:	2a01      	cmp	r2, #1
   d879c:	bf28      	it	cs
   d879e:	429a      	cmpcs	r2, r3
   d87a0:	d0f7      	beq.n	d8792 <strcmp>
   d87a2:	1ad0      	subs	r0, r2, r3
   d87a4:	4770      	bx	lr

000d87a6 <strcpy>:
   d87a6:	4603      	mov	r3, r0
   d87a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   d87ac:	f803 2b01 	strb.w	r2, [r3], #1
   d87b0:	2a00      	cmp	r2, #0
   d87b2:	d1f9      	bne.n	d87a8 <strcpy+0x2>
   d87b4:	4770      	bx	lr
	...

000d87b8 <strdup>:
   d87b8:	4b02      	ldr	r3, [pc, #8]	; (d87c4 <strdup+0xc>)
   d87ba:	4601      	mov	r1, r0
   d87bc:	6818      	ldr	r0, [r3, #0]
   d87be:	f000 b803 	b.w	d87c8 <_strdup_r>
   d87c2:	bf00      	nop
   d87c4:	2003e1f0 	.word	0x2003e1f0

000d87c8 <_strdup_r>:
   d87c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d87ca:	4604      	mov	r4, r0
   d87cc:	4608      	mov	r0, r1
   d87ce:	460d      	mov	r5, r1
   d87d0:	f000 f80f 	bl	d87f2 <strlen>
   d87d4:	1c42      	adds	r2, r0, #1
   d87d6:	4611      	mov	r1, r2
   d87d8:	4620      	mov	r0, r4
   d87da:	9201      	str	r2, [sp, #4]
   d87dc:	f7fc ffa8 	bl	d5730 <_malloc_r>
   d87e0:	4604      	mov	r4, r0
   d87e2:	b118      	cbz	r0, d87ec <_strdup_r+0x24>
   d87e4:	9a01      	ldr	r2, [sp, #4]
   d87e6:	4629      	mov	r1, r5
   d87e8:	f7ff ff67 	bl	d86ba <memcpy>
   d87ec:	4620      	mov	r0, r4
   d87ee:	b003      	add	sp, #12
   d87f0:	bd30      	pop	{r4, r5, pc}

000d87f2 <strlen>:
   d87f2:	4603      	mov	r3, r0
   d87f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d87f8:	2a00      	cmp	r2, #0
   d87fa:	d1fb      	bne.n	d87f4 <strlen+0x2>
   d87fc:	1a18      	subs	r0, r3, r0
   d87fe:	3801      	subs	r0, #1
   d8800:	4770      	bx	lr

000d8802 <strncmp>:
   d8802:	b510      	push	{r4, lr}
   d8804:	b16a      	cbz	r2, d8822 <strncmp+0x20>
   d8806:	3901      	subs	r1, #1
   d8808:	1884      	adds	r4, r0, r2
   d880a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d880e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8812:	4293      	cmp	r3, r2
   d8814:	d103      	bne.n	d881e <strncmp+0x1c>
   d8816:	42a0      	cmp	r0, r4
   d8818:	d001      	beq.n	d881e <strncmp+0x1c>
   d881a:	2b00      	cmp	r3, #0
   d881c:	d1f5      	bne.n	d880a <strncmp+0x8>
   d881e:	1a98      	subs	r0, r3, r2
   d8820:	bd10      	pop	{r4, pc}
   d8822:	4610      	mov	r0, r2
   d8824:	e7fc      	b.n	d8820 <strncmp+0x1e>

000d8826 <strrchr>:
   d8826:	b538      	push	{r3, r4, r5, lr}
   d8828:	4603      	mov	r3, r0
   d882a:	460c      	mov	r4, r1
   d882c:	b969      	cbnz	r1, d884a <strrchr+0x24>
   d882e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8832:	f7ff bf97 	b.w	d8764 <strchr>
   d8836:	1c43      	adds	r3, r0, #1
   d8838:	4605      	mov	r5, r0
   d883a:	4621      	mov	r1, r4
   d883c:	4618      	mov	r0, r3
   d883e:	f7ff ff91 	bl	d8764 <strchr>
   d8842:	2800      	cmp	r0, #0
   d8844:	d1f7      	bne.n	d8836 <strrchr+0x10>
   d8846:	4628      	mov	r0, r5
   d8848:	bd38      	pop	{r3, r4, r5, pc}
   d884a:	2500      	movs	r5, #0
   d884c:	e7f5      	b.n	d883a <strrchr+0x14>

000d884e <sulp>:
   d884e:	b570      	push	{r4, r5, r6, lr}
   d8850:	4604      	mov	r4, r0
   d8852:	460d      	mov	r5, r1
   d8854:	ec45 4b10 	vmov	d0, r4, r5
   d8858:	4616      	mov	r6, r2
   d885a:	f001 fdad 	bl	da3b8 <__ulp>
   d885e:	ec51 0b10 	vmov	r0, r1, d0
   d8862:	b17e      	cbz	r6, d8884 <sulp+0x36>
   d8864:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8868:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d886c:	2b00      	cmp	r3, #0
   d886e:	dd09      	ble.n	d8884 <sulp+0x36>
   d8870:	051b      	lsls	r3, r3, #20
   d8872:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8876:	2400      	movs	r4, #0
   d8878:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d887c:	4622      	mov	r2, r4
   d887e:	462b      	mov	r3, r5
   d8880:	f7ff fbea 	bl	d8058 <__aeabi_dmul>
   d8884:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8888 <_strtod_l>:
   d8888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d888c:	b0a3      	sub	sp, #140	; 0x8c
   d888e:	461f      	mov	r7, r3
   d8890:	2300      	movs	r3, #0
   d8892:	931e      	str	r3, [sp, #120]	; 0x78
   d8894:	4ba4      	ldr	r3, [pc, #656]	; (d8b28 <_strtod_l+0x2a0>)
   d8896:	9219      	str	r2, [sp, #100]	; 0x64
   d8898:	681b      	ldr	r3, [r3, #0]
   d889a:	9307      	str	r3, [sp, #28]
   d889c:	4604      	mov	r4, r0
   d889e:	4618      	mov	r0, r3
   d88a0:	4688      	mov	r8, r1
   d88a2:	f7ff ffa6 	bl	d87f2 <strlen>
   d88a6:	f04f 0a00 	mov.w	sl, #0
   d88aa:	4605      	mov	r5, r0
   d88ac:	f04f 0b00 	mov.w	fp, #0
   d88b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d88b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d88b6:	781a      	ldrb	r2, [r3, #0]
   d88b8:	2a2b      	cmp	r2, #43	; 0x2b
   d88ba:	d04c      	beq.n	d8956 <_strtod_l+0xce>
   d88bc:	d839      	bhi.n	d8932 <_strtod_l+0xaa>
   d88be:	2a0d      	cmp	r2, #13
   d88c0:	d832      	bhi.n	d8928 <_strtod_l+0xa0>
   d88c2:	2a08      	cmp	r2, #8
   d88c4:	d832      	bhi.n	d892c <_strtod_l+0xa4>
   d88c6:	2a00      	cmp	r2, #0
   d88c8:	d03c      	beq.n	d8944 <_strtod_l+0xbc>
   d88ca:	2300      	movs	r3, #0
   d88cc:	930e      	str	r3, [sp, #56]	; 0x38
   d88ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d88d0:	7833      	ldrb	r3, [r6, #0]
   d88d2:	2b30      	cmp	r3, #48	; 0x30
   d88d4:	f040 80b4 	bne.w	d8a40 <_strtod_l+0x1b8>
   d88d8:	7873      	ldrb	r3, [r6, #1]
   d88da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d88de:	2b58      	cmp	r3, #88	; 0x58
   d88e0:	d16c      	bne.n	d89bc <_strtod_l+0x134>
   d88e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d88e4:	9301      	str	r3, [sp, #4]
   d88e6:	ab1e      	add	r3, sp, #120	; 0x78
   d88e8:	9702      	str	r7, [sp, #8]
   d88ea:	9300      	str	r3, [sp, #0]
   d88ec:	4a8f      	ldr	r2, [pc, #572]	; (d8b2c <_strtod_l+0x2a4>)
   d88ee:	ab1f      	add	r3, sp, #124	; 0x7c
   d88f0:	a91d      	add	r1, sp, #116	; 0x74
   d88f2:	4620      	mov	r0, r4
   d88f4:	f000 ff58 	bl	d97a8 <__gethex>
   d88f8:	f010 0707 	ands.w	r7, r0, #7
   d88fc:	4605      	mov	r5, r0
   d88fe:	d005      	beq.n	d890c <_strtod_l+0x84>
   d8900:	2f06      	cmp	r7, #6
   d8902:	d12a      	bne.n	d895a <_strtod_l+0xd2>
   d8904:	3601      	adds	r6, #1
   d8906:	2300      	movs	r3, #0
   d8908:	961d      	str	r6, [sp, #116]	; 0x74
   d890a:	930e      	str	r3, [sp, #56]	; 0x38
   d890c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d890e:	2b00      	cmp	r3, #0
   d8910:	f040 8596 	bne.w	d9440 <_strtod_l+0xbb8>
   d8914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8916:	b1db      	cbz	r3, d8950 <_strtod_l+0xc8>
   d8918:	4652      	mov	r2, sl
   d891a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d891e:	ec43 2b10 	vmov	d0, r2, r3
   d8922:	b023      	add	sp, #140	; 0x8c
   d8924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8928:	2a20      	cmp	r2, #32
   d892a:	d1ce      	bne.n	d88ca <_strtod_l+0x42>
   d892c:	3301      	adds	r3, #1
   d892e:	931d      	str	r3, [sp, #116]	; 0x74
   d8930:	e7c0      	b.n	d88b4 <_strtod_l+0x2c>
   d8932:	2a2d      	cmp	r2, #45	; 0x2d
   d8934:	d1c9      	bne.n	d88ca <_strtod_l+0x42>
   d8936:	2201      	movs	r2, #1
   d8938:	920e      	str	r2, [sp, #56]	; 0x38
   d893a:	1c5a      	adds	r2, r3, #1
   d893c:	921d      	str	r2, [sp, #116]	; 0x74
   d893e:	785b      	ldrb	r3, [r3, #1]
   d8940:	2b00      	cmp	r3, #0
   d8942:	d1c4      	bne.n	d88ce <_strtod_l+0x46>
   d8944:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8946:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d894a:	2b00      	cmp	r3, #0
   d894c:	f040 8576 	bne.w	d943c <_strtod_l+0xbb4>
   d8950:	4652      	mov	r2, sl
   d8952:	465b      	mov	r3, fp
   d8954:	e7e3      	b.n	d891e <_strtod_l+0x96>
   d8956:	2200      	movs	r2, #0
   d8958:	e7ee      	b.n	d8938 <_strtod_l+0xb0>
   d895a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d895c:	b13a      	cbz	r2, d896e <_strtod_l+0xe6>
   d895e:	2135      	movs	r1, #53	; 0x35
   d8960:	a820      	add	r0, sp, #128	; 0x80
   d8962:	f001 fe28 	bl	da5b6 <__copybits>
   d8966:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8968:	4620      	mov	r0, r4
   d896a:	f001 fa5c 	bl	d9e26 <_Bfree>
   d896e:	3f01      	subs	r7, #1
   d8970:	2f05      	cmp	r7, #5
   d8972:	d807      	bhi.n	d8984 <_strtod_l+0xfc>
   d8974:	e8df f007 	tbb	[pc, r7]
   d8978:	1d180b0e 	.word	0x1d180b0e
   d897c:	030e      	.short	0x030e
   d897e:	f04f 0b00 	mov.w	fp, #0
   d8982:	46da      	mov	sl, fp
   d8984:	0728      	lsls	r0, r5, #28
   d8986:	d5c1      	bpl.n	d890c <_strtod_l+0x84>
   d8988:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d898c:	e7be      	b.n	d890c <_strtod_l+0x84>
   d898e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d8992:	e7f7      	b.n	d8984 <_strtod_l+0xfc>
   d8994:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8998:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d899a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d899e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d89a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d89a6:	e7ed      	b.n	d8984 <_strtod_l+0xfc>
   d89a8:	f8df b184 	ldr.w	fp, [pc, #388]	; d8b30 <_strtod_l+0x2a8>
   d89ac:	f04f 0a00 	mov.w	sl, #0
   d89b0:	e7e8      	b.n	d8984 <_strtod_l+0xfc>
   d89b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d89b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d89ba:	e7e3      	b.n	d8984 <_strtod_l+0xfc>
   d89bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d89be:	1c5a      	adds	r2, r3, #1
   d89c0:	921d      	str	r2, [sp, #116]	; 0x74
   d89c2:	785b      	ldrb	r3, [r3, #1]
   d89c4:	2b30      	cmp	r3, #48	; 0x30
   d89c6:	d0f9      	beq.n	d89bc <_strtod_l+0x134>
   d89c8:	2b00      	cmp	r3, #0
   d89ca:	d09f      	beq.n	d890c <_strtod_l+0x84>
   d89cc:	2301      	movs	r3, #1
   d89ce:	f04f 0900 	mov.w	r9, #0
   d89d2:	9304      	str	r3, [sp, #16]
   d89d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d89d6:	930a      	str	r3, [sp, #40]	; 0x28
   d89d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d89dc:	464f      	mov	r7, r9
   d89de:	220a      	movs	r2, #10
   d89e0:	981d      	ldr	r0, [sp, #116]	; 0x74
   d89e2:	7806      	ldrb	r6, [r0, #0]
   d89e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d89e8:	b2d9      	uxtb	r1, r3
   d89ea:	2909      	cmp	r1, #9
   d89ec:	d92a      	bls.n	d8a44 <_strtod_l+0x1bc>
   d89ee:	9907      	ldr	r1, [sp, #28]
   d89f0:	462a      	mov	r2, r5
   d89f2:	f7ff ff06 	bl	d8802 <strncmp>
   d89f6:	b398      	cbz	r0, d8a60 <_strtod_l+0x1d8>
   d89f8:	2000      	movs	r0, #0
   d89fa:	4633      	mov	r3, r6
   d89fc:	463d      	mov	r5, r7
   d89fe:	9007      	str	r0, [sp, #28]
   d8a00:	4602      	mov	r2, r0
   d8a02:	2b65      	cmp	r3, #101	; 0x65
   d8a04:	d001      	beq.n	d8a0a <_strtod_l+0x182>
   d8a06:	2b45      	cmp	r3, #69	; 0x45
   d8a08:	d118      	bne.n	d8a3c <_strtod_l+0x1b4>
   d8a0a:	b91d      	cbnz	r5, d8a14 <_strtod_l+0x18c>
   d8a0c:	9b04      	ldr	r3, [sp, #16]
   d8a0e:	4303      	orrs	r3, r0
   d8a10:	d098      	beq.n	d8944 <_strtod_l+0xbc>
   d8a12:	2500      	movs	r5, #0
   d8a14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d8a18:	f108 0301 	add.w	r3, r8, #1
   d8a1c:	931d      	str	r3, [sp, #116]	; 0x74
   d8a1e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d8a22:	2b2b      	cmp	r3, #43	; 0x2b
   d8a24:	d075      	beq.n	d8b12 <_strtod_l+0x28a>
   d8a26:	2b2d      	cmp	r3, #45	; 0x2d
   d8a28:	d07b      	beq.n	d8b22 <_strtod_l+0x29a>
   d8a2a:	f04f 0c00 	mov.w	ip, #0
   d8a2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8a32:	2909      	cmp	r1, #9
   d8a34:	f240 8082 	bls.w	d8b3c <_strtod_l+0x2b4>
   d8a38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8a3c:	2600      	movs	r6, #0
   d8a3e:	e09d      	b.n	d8b7c <_strtod_l+0x2f4>
   d8a40:	2300      	movs	r3, #0
   d8a42:	e7c4      	b.n	d89ce <_strtod_l+0x146>
   d8a44:	2f08      	cmp	r7, #8
   d8a46:	bfd8      	it	le
   d8a48:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d8a4a:	f100 0001 	add.w	r0, r0, #1
   d8a4e:	bfda      	itte	le
   d8a50:	fb02 3301 	mlale	r3, r2, r1, r3
   d8a54:	9309      	strle	r3, [sp, #36]	; 0x24
   d8a56:	fb02 3909 	mlagt	r9, r2, r9, r3
   d8a5a:	3701      	adds	r7, #1
   d8a5c:	901d      	str	r0, [sp, #116]	; 0x74
   d8a5e:	e7bf      	b.n	d89e0 <_strtod_l+0x158>
   d8a60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8a62:	195a      	adds	r2, r3, r5
   d8a64:	921d      	str	r2, [sp, #116]	; 0x74
   d8a66:	5d5b      	ldrb	r3, [r3, r5]
   d8a68:	2f00      	cmp	r7, #0
   d8a6a:	d037      	beq.n	d8adc <_strtod_l+0x254>
   d8a6c:	9007      	str	r0, [sp, #28]
   d8a6e:	463d      	mov	r5, r7
   d8a70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d8a74:	2a09      	cmp	r2, #9
   d8a76:	d912      	bls.n	d8a9e <_strtod_l+0x216>
   d8a78:	2201      	movs	r2, #1
   d8a7a:	e7c2      	b.n	d8a02 <_strtod_l+0x17a>
   d8a7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8a7e:	1c5a      	adds	r2, r3, #1
   d8a80:	921d      	str	r2, [sp, #116]	; 0x74
   d8a82:	785b      	ldrb	r3, [r3, #1]
   d8a84:	3001      	adds	r0, #1
   d8a86:	2b30      	cmp	r3, #48	; 0x30
   d8a88:	d0f8      	beq.n	d8a7c <_strtod_l+0x1f4>
   d8a8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8a8e:	2a08      	cmp	r2, #8
   d8a90:	f200 84db 	bhi.w	d944a <_strtod_l+0xbc2>
   d8a94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d8a96:	9007      	str	r0, [sp, #28]
   d8a98:	2000      	movs	r0, #0
   d8a9a:	920a      	str	r2, [sp, #40]	; 0x28
   d8a9c:	4605      	mov	r5, r0
   d8a9e:	3b30      	subs	r3, #48	; 0x30
   d8aa0:	f100 0201 	add.w	r2, r0, #1
   d8aa4:	d014      	beq.n	d8ad0 <_strtod_l+0x248>
   d8aa6:	9907      	ldr	r1, [sp, #28]
   d8aa8:	4411      	add	r1, r2
   d8aaa:	9107      	str	r1, [sp, #28]
   d8aac:	462a      	mov	r2, r5
   d8aae:	eb00 0e05 	add.w	lr, r0, r5
   d8ab2:	210a      	movs	r1, #10
   d8ab4:	4572      	cmp	r2, lr
   d8ab6:	d113      	bne.n	d8ae0 <_strtod_l+0x258>
   d8ab8:	182a      	adds	r2, r5, r0
   d8aba:	2a08      	cmp	r2, #8
   d8abc:	f105 0501 	add.w	r5, r5, #1
   d8ac0:	4405      	add	r5, r0
   d8ac2:	dc1c      	bgt.n	d8afe <_strtod_l+0x276>
   d8ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8ac6:	220a      	movs	r2, #10
   d8ac8:	fb02 3301 	mla	r3, r2, r1, r3
   d8acc:	9309      	str	r3, [sp, #36]	; 0x24
   d8ace:	2200      	movs	r2, #0
   d8ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8ad2:	1c59      	adds	r1, r3, #1
   d8ad4:	911d      	str	r1, [sp, #116]	; 0x74
   d8ad6:	785b      	ldrb	r3, [r3, #1]
   d8ad8:	4610      	mov	r0, r2
   d8ada:	e7c9      	b.n	d8a70 <_strtod_l+0x1e8>
   d8adc:	4638      	mov	r0, r7
   d8ade:	e7d2      	b.n	d8a86 <_strtod_l+0x1fe>
   d8ae0:	2a08      	cmp	r2, #8
   d8ae2:	dc04      	bgt.n	d8aee <_strtod_l+0x266>
   d8ae4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d8ae6:	434e      	muls	r6, r1
   d8ae8:	9609      	str	r6, [sp, #36]	; 0x24
   d8aea:	3201      	adds	r2, #1
   d8aec:	e7e2      	b.n	d8ab4 <_strtod_l+0x22c>
   d8aee:	f102 0c01 	add.w	ip, r2, #1
   d8af2:	f1bc 0f10 	cmp.w	ip, #16
   d8af6:	bfd8      	it	le
   d8af8:	fb01 f909 	mulle.w	r9, r1, r9
   d8afc:	e7f5      	b.n	d8aea <_strtod_l+0x262>
   d8afe:	2d10      	cmp	r5, #16
   d8b00:	bfdc      	itt	le
   d8b02:	220a      	movle	r2, #10
   d8b04:	fb02 3909 	mlale	r9, r2, r9, r3
   d8b08:	e7e1      	b.n	d8ace <_strtod_l+0x246>
   d8b0a:	2300      	movs	r3, #0
   d8b0c:	9307      	str	r3, [sp, #28]
   d8b0e:	2201      	movs	r2, #1
   d8b10:	e77c      	b.n	d8a0c <_strtod_l+0x184>
   d8b12:	f04f 0c00 	mov.w	ip, #0
   d8b16:	f108 0302 	add.w	r3, r8, #2
   d8b1a:	931d      	str	r3, [sp, #116]	; 0x74
   d8b1c:	f898 3002 	ldrb.w	r3, [r8, #2]
   d8b20:	e785      	b.n	d8a2e <_strtod_l+0x1a6>
   d8b22:	f04f 0c01 	mov.w	ip, #1
   d8b26:	e7f6      	b.n	d8b16 <_strtod_l+0x28e>
   d8b28:	000dac24 	.word	0x000dac24
   d8b2c:	000daacc 	.word	0x000daacc
   d8b30:	7ff00000 	.word	0x7ff00000
   d8b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8b36:	1c59      	adds	r1, r3, #1
   d8b38:	911d      	str	r1, [sp, #116]	; 0x74
   d8b3a:	785b      	ldrb	r3, [r3, #1]
   d8b3c:	2b30      	cmp	r3, #48	; 0x30
   d8b3e:	d0f9      	beq.n	d8b34 <_strtod_l+0x2ac>
   d8b40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d8b44:	2908      	cmp	r1, #8
   d8b46:	f63f af79 	bhi.w	d8a3c <_strtod_l+0x1b4>
   d8b4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8b4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8b50:	9308      	str	r3, [sp, #32]
   d8b52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8b54:	1c59      	adds	r1, r3, #1
   d8b56:	911d      	str	r1, [sp, #116]	; 0x74
   d8b58:	785b      	ldrb	r3, [r3, #1]
   d8b5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8b5e:	2e09      	cmp	r6, #9
   d8b60:	d937      	bls.n	d8bd2 <_strtod_l+0x34a>
   d8b62:	9e08      	ldr	r6, [sp, #32]
   d8b64:	1b89      	subs	r1, r1, r6
   d8b66:	2908      	cmp	r1, #8
   d8b68:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d8b6c:	dc02      	bgt.n	d8b74 <_strtod_l+0x2ec>
   d8b6e:	4576      	cmp	r6, lr
   d8b70:	bfa8      	it	ge
   d8b72:	4676      	movge	r6, lr
   d8b74:	f1bc 0f00 	cmp.w	ip, #0
   d8b78:	d000      	beq.n	d8b7c <_strtod_l+0x2f4>
   d8b7a:	4276      	negs	r6, r6
   d8b7c:	2d00      	cmp	r5, #0
   d8b7e:	d14f      	bne.n	d8c20 <_strtod_l+0x398>
   d8b80:	9904      	ldr	r1, [sp, #16]
   d8b82:	4301      	orrs	r1, r0
   d8b84:	f47f aec2 	bne.w	d890c <_strtod_l+0x84>
   d8b88:	2a00      	cmp	r2, #0
   d8b8a:	f47f aedb 	bne.w	d8944 <_strtod_l+0xbc>
   d8b8e:	2b69      	cmp	r3, #105	; 0x69
   d8b90:	d027      	beq.n	d8be2 <_strtod_l+0x35a>
   d8b92:	dc24      	bgt.n	d8bde <_strtod_l+0x356>
   d8b94:	2b49      	cmp	r3, #73	; 0x49
   d8b96:	d024      	beq.n	d8be2 <_strtod_l+0x35a>
   d8b98:	2b4e      	cmp	r3, #78	; 0x4e
   d8b9a:	f47f aed3 	bne.w	d8944 <_strtod_l+0xbc>
   d8b9e:	499e      	ldr	r1, [pc, #632]	; (d8e18 <_strtod_l+0x590>)
   d8ba0:	a81d      	add	r0, sp, #116	; 0x74
   d8ba2:	f001 f847 	bl	d9c34 <__match>
   d8ba6:	2800      	cmp	r0, #0
   d8ba8:	f43f aecc 	beq.w	d8944 <_strtod_l+0xbc>
   d8bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8bae:	781b      	ldrb	r3, [r3, #0]
   d8bb0:	2b28      	cmp	r3, #40	; 0x28
   d8bb2:	d12d      	bne.n	d8c10 <_strtod_l+0x388>
   d8bb4:	4999      	ldr	r1, [pc, #612]	; (d8e1c <_strtod_l+0x594>)
   d8bb6:	aa20      	add	r2, sp, #128	; 0x80
   d8bb8:	a81d      	add	r0, sp, #116	; 0x74
   d8bba:	f001 f84f 	bl	d9c5c <__hexnan>
   d8bbe:	2805      	cmp	r0, #5
   d8bc0:	d126      	bne.n	d8c10 <_strtod_l+0x388>
   d8bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d8bc4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d8bc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8bcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8bd0:	e69c      	b.n	d890c <_strtod_l+0x84>
   d8bd2:	210a      	movs	r1, #10
   d8bd4:	fb01 3e0e 	mla	lr, r1, lr, r3
   d8bd8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8bdc:	e7b9      	b.n	d8b52 <_strtod_l+0x2ca>
   d8bde:	2b6e      	cmp	r3, #110	; 0x6e
   d8be0:	e7db      	b.n	d8b9a <_strtod_l+0x312>
   d8be2:	498f      	ldr	r1, [pc, #572]	; (d8e20 <_strtod_l+0x598>)
   d8be4:	a81d      	add	r0, sp, #116	; 0x74
   d8be6:	f001 f825 	bl	d9c34 <__match>
   d8bea:	2800      	cmp	r0, #0
   d8bec:	f43f aeaa 	beq.w	d8944 <_strtod_l+0xbc>
   d8bf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8bf2:	498c      	ldr	r1, [pc, #560]	; (d8e24 <_strtod_l+0x59c>)
   d8bf4:	3b01      	subs	r3, #1
   d8bf6:	a81d      	add	r0, sp, #116	; 0x74
   d8bf8:	931d      	str	r3, [sp, #116]	; 0x74
   d8bfa:	f001 f81b 	bl	d9c34 <__match>
   d8bfe:	b910      	cbnz	r0, d8c06 <_strtod_l+0x37e>
   d8c00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8c02:	3301      	adds	r3, #1
   d8c04:	931d      	str	r3, [sp, #116]	; 0x74
   d8c06:	f8df b22c 	ldr.w	fp, [pc, #556]	; d8e34 <_strtod_l+0x5ac>
   d8c0a:	f04f 0a00 	mov.w	sl, #0
   d8c0e:	e67d      	b.n	d890c <_strtod_l+0x84>
   d8c10:	4885      	ldr	r0, [pc, #532]	; (d8e28 <_strtod_l+0x5a0>)
   d8c12:	f001 fd25 	bl	da660 <nan>
   d8c16:	ed8d 0b04 	vstr	d0, [sp, #16]
   d8c1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d8c1e:	e675      	b.n	d890c <_strtod_l+0x84>
   d8c20:	9b07      	ldr	r3, [sp, #28]
   d8c22:	9809      	ldr	r0, [sp, #36]	; 0x24
   d8c24:	1af3      	subs	r3, r6, r3
   d8c26:	2f00      	cmp	r7, #0
   d8c28:	bf08      	it	eq
   d8c2a:	462f      	moveq	r7, r5
   d8c2c:	2d10      	cmp	r5, #16
   d8c2e:	9308      	str	r3, [sp, #32]
   d8c30:	46a8      	mov	r8, r5
   d8c32:	bfa8      	it	ge
   d8c34:	f04f 0810 	movge.w	r8, #16
   d8c38:	f7ff f994 	bl	d7f64 <__aeabi_ui2d>
   d8c3c:	2d09      	cmp	r5, #9
   d8c3e:	4682      	mov	sl, r0
   d8c40:	468b      	mov	fp, r1
   d8c42:	dd13      	ble.n	d8c6c <_strtod_l+0x3e4>
   d8c44:	4b79      	ldr	r3, [pc, #484]	; (d8e2c <_strtod_l+0x5a4>)
   d8c46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d8c4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8c4e:	f7ff fa03 	bl	d8058 <__aeabi_dmul>
   d8c52:	4682      	mov	sl, r0
   d8c54:	4648      	mov	r0, r9
   d8c56:	468b      	mov	fp, r1
   d8c58:	f7ff f984 	bl	d7f64 <__aeabi_ui2d>
   d8c5c:	4602      	mov	r2, r0
   d8c5e:	460b      	mov	r3, r1
   d8c60:	4650      	mov	r0, sl
   d8c62:	4659      	mov	r1, fp
   d8c64:	f7ff f842 	bl	d7cec <__adddf3>
   d8c68:	4682      	mov	sl, r0
   d8c6a:	468b      	mov	fp, r1
   d8c6c:	2d0f      	cmp	r5, #15
   d8c6e:	dc38      	bgt.n	d8ce2 <_strtod_l+0x45a>
   d8c70:	9b08      	ldr	r3, [sp, #32]
   d8c72:	2b00      	cmp	r3, #0
   d8c74:	f43f ae4a 	beq.w	d890c <_strtod_l+0x84>
   d8c78:	dd24      	ble.n	d8cc4 <_strtod_l+0x43c>
   d8c7a:	2b16      	cmp	r3, #22
   d8c7c:	dc0b      	bgt.n	d8c96 <_strtod_l+0x40e>
   d8c7e:	4d6b      	ldr	r5, [pc, #428]	; (d8e2c <_strtod_l+0x5a4>)
   d8c80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d8c84:	e9d5 0100 	ldrd	r0, r1, [r5]
   d8c88:	4652      	mov	r2, sl
   d8c8a:	465b      	mov	r3, fp
   d8c8c:	f7ff f9e4 	bl	d8058 <__aeabi_dmul>
   d8c90:	4682      	mov	sl, r0
   d8c92:	468b      	mov	fp, r1
   d8c94:	e63a      	b.n	d890c <_strtod_l+0x84>
   d8c96:	9a08      	ldr	r2, [sp, #32]
   d8c98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8c9c:	4293      	cmp	r3, r2
   d8c9e:	db20      	blt.n	d8ce2 <_strtod_l+0x45a>
   d8ca0:	4c62      	ldr	r4, [pc, #392]	; (d8e2c <_strtod_l+0x5a4>)
   d8ca2:	f1c5 050f 	rsb	r5, r5, #15
   d8ca6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8caa:	4652      	mov	r2, sl
   d8cac:	465b      	mov	r3, fp
   d8cae:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8cb2:	f7ff f9d1 	bl	d8058 <__aeabi_dmul>
   d8cb6:	9b08      	ldr	r3, [sp, #32]
   d8cb8:	1b5d      	subs	r5, r3, r5
   d8cba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8cbe:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8cc2:	e7e3      	b.n	d8c8c <_strtod_l+0x404>
   d8cc4:	9b08      	ldr	r3, [sp, #32]
   d8cc6:	3316      	adds	r3, #22
   d8cc8:	db0b      	blt.n	d8ce2 <_strtod_l+0x45a>
   d8cca:	9b07      	ldr	r3, [sp, #28]
   d8ccc:	4a57      	ldr	r2, [pc, #348]	; (d8e2c <_strtod_l+0x5a4>)
   d8cce:	1b9e      	subs	r6, r3, r6
   d8cd0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d8cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8cd8:	4650      	mov	r0, sl
   d8cda:	4659      	mov	r1, fp
   d8cdc:	f7ff fae6 	bl	d82ac <__aeabi_ddiv>
   d8ce0:	e7d6      	b.n	d8c90 <_strtod_l+0x408>
   d8ce2:	9b08      	ldr	r3, [sp, #32]
   d8ce4:	eba5 0808 	sub.w	r8, r5, r8
   d8ce8:	4498      	add	r8, r3
   d8cea:	f1b8 0f00 	cmp.w	r8, #0
   d8cee:	dd71      	ble.n	d8dd4 <_strtod_l+0x54c>
   d8cf0:	f018 030f 	ands.w	r3, r8, #15
   d8cf4:	d00a      	beq.n	d8d0c <_strtod_l+0x484>
   d8cf6:	494d      	ldr	r1, [pc, #308]	; (d8e2c <_strtod_l+0x5a4>)
   d8cf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d8cfc:	4652      	mov	r2, sl
   d8cfe:	465b      	mov	r3, fp
   d8d00:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8d04:	f7ff f9a8 	bl	d8058 <__aeabi_dmul>
   d8d08:	4682      	mov	sl, r0
   d8d0a:	468b      	mov	fp, r1
   d8d0c:	f038 080f 	bics.w	r8, r8, #15
   d8d10:	d04d      	beq.n	d8dae <_strtod_l+0x526>
   d8d12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d8d16:	dd22      	ble.n	d8d5e <_strtod_l+0x4d6>
   d8d18:	2500      	movs	r5, #0
   d8d1a:	462e      	mov	r6, r5
   d8d1c:	9509      	str	r5, [sp, #36]	; 0x24
   d8d1e:	9507      	str	r5, [sp, #28]
   d8d20:	2322      	movs	r3, #34	; 0x22
   d8d22:	f8df b110 	ldr.w	fp, [pc, #272]	; d8e34 <_strtod_l+0x5ac>
   d8d26:	6023      	str	r3, [r4, #0]
   d8d28:	f04f 0a00 	mov.w	sl, #0
   d8d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8d2e:	2b00      	cmp	r3, #0
   d8d30:	f43f adec 	beq.w	d890c <_strtod_l+0x84>
   d8d34:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8d36:	4620      	mov	r0, r4
   d8d38:	f001 f875 	bl	d9e26 <_Bfree>
   d8d3c:	9907      	ldr	r1, [sp, #28]
   d8d3e:	4620      	mov	r0, r4
   d8d40:	f001 f871 	bl	d9e26 <_Bfree>
   d8d44:	4631      	mov	r1, r6
   d8d46:	4620      	mov	r0, r4
   d8d48:	f001 f86d 	bl	d9e26 <_Bfree>
   d8d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8d4e:	4620      	mov	r0, r4
   d8d50:	f001 f869 	bl	d9e26 <_Bfree>
   d8d54:	4629      	mov	r1, r5
   d8d56:	4620      	mov	r0, r4
   d8d58:	f001 f865 	bl	d9e26 <_Bfree>
   d8d5c:	e5d6      	b.n	d890c <_strtod_l+0x84>
   d8d5e:	2300      	movs	r3, #0
   d8d60:	ea4f 1828 	mov.w	r8, r8, asr #4
   d8d64:	4650      	mov	r0, sl
   d8d66:	4659      	mov	r1, fp
   d8d68:	4699      	mov	r9, r3
   d8d6a:	f1b8 0f01 	cmp.w	r8, #1
   d8d6e:	dc21      	bgt.n	d8db4 <_strtod_l+0x52c>
   d8d70:	b10b      	cbz	r3, d8d76 <_strtod_l+0x4ee>
   d8d72:	4682      	mov	sl, r0
   d8d74:	468b      	mov	fp, r1
   d8d76:	4b2e      	ldr	r3, [pc, #184]	; (d8e30 <_strtod_l+0x5a8>)
   d8d78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8d7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d8d80:	4652      	mov	r2, sl
   d8d82:	465b      	mov	r3, fp
   d8d84:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8d88:	f7ff f966 	bl	d8058 <__aeabi_dmul>
   d8d8c:	4b29      	ldr	r3, [pc, #164]	; (d8e34 <_strtod_l+0x5ac>)
   d8d8e:	460a      	mov	r2, r1
   d8d90:	400b      	ands	r3, r1
   d8d92:	4929      	ldr	r1, [pc, #164]	; (d8e38 <_strtod_l+0x5b0>)
   d8d94:	428b      	cmp	r3, r1
   d8d96:	4682      	mov	sl, r0
   d8d98:	d8be      	bhi.n	d8d18 <_strtod_l+0x490>
   d8d9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8d9e:	428b      	cmp	r3, r1
   d8da0:	bf86      	itte	hi
   d8da2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d8e3c <_strtod_l+0x5b4>
   d8da6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d8daa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8dae:	2300      	movs	r3, #0
   d8db0:	9304      	str	r3, [sp, #16]
   d8db2:	e081      	b.n	d8eb8 <_strtod_l+0x630>
   d8db4:	f018 0f01 	tst.w	r8, #1
   d8db8:	d007      	beq.n	d8dca <_strtod_l+0x542>
   d8dba:	4b1d      	ldr	r3, [pc, #116]	; (d8e30 <_strtod_l+0x5a8>)
   d8dbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d8dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dc4:	f7ff f948 	bl	d8058 <__aeabi_dmul>
   d8dc8:	2301      	movs	r3, #1
   d8dca:	f109 0901 	add.w	r9, r9, #1
   d8dce:	ea4f 0868 	mov.w	r8, r8, asr #1
   d8dd2:	e7ca      	b.n	d8d6a <_strtod_l+0x4e2>
   d8dd4:	d0eb      	beq.n	d8dae <_strtod_l+0x526>
   d8dd6:	f1c8 0800 	rsb	r8, r8, #0
   d8dda:	f018 020f 	ands.w	r2, r8, #15
   d8dde:	d00a      	beq.n	d8df6 <_strtod_l+0x56e>
   d8de0:	4b12      	ldr	r3, [pc, #72]	; (d8e2c <_strtod_l+0x5a4>)
   d8de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8de6:	4650      	mov	r0, sl
   d8de8:	4659      	mov	r1, fp
   d8dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dee:	f7ff fa5d 	bl	d82ac <__aeabi_ddiv>
   d8df2:	4682      	mov	sl, r0
   d8df4:	468b      	mov	fp, r1
   d8df6:	ea5f 1828 	movs.w	r8, r8, asr #4
   d8dfa:	d0d8      	beq.n	d8dae <_strtod_l+0x526>
   d8dfc:	f1b8 0f1f 	cmp.w	r8, #31
   d8e00:	dd1e      	ble.n	d8e40 <_strtod_l+0x5b8>
   d8e02:	2500      	movs	r5, #0
   d8e04:	462e      	mov	r6, r5
   d8e06:	9509      	str	r5, [sp, #36]	; 0x24
   d8e08:	9507      	str	r5, [sp, #28]
   d8e0a:	2322      	movs	r3, #34	; 0x22
   d8e0c:	f04f 0a00 	mov.w	sl, #0
   d8e10:	f04f 0b00 	mov.w	fp, #0
   d8e14:	6023      	str	r3, [r4, #0]
   d8e16:	e789      	b.n	d8d2c <_strtod_l+0x4a4>
   d8e18:	000daac6 	.word	0x000daac6
   d8e1c:	000daae0 	.word	0x000daae0
   d8e20:	000daabd 	.word	0x000daabd
   d8e24:	000daac0 	.word	0x000daac0
   d8e28:	000da936 	.word	0x000da936
   d8e2c:	000dac60 	.word	0x000dac60
   d8e30:	000dac38 	.word	0x000dac38
   d8e34:	7ff00000 	.word	0x7ff00000
   d8e38:	7ca00000 	.word	0x7ca00000
   d8e3c:	7fefffff 	.word	0x7fefffff
   d8e40:	f018 0310 	ands.w	r3, r8, #16
   d8e44:	bf18      	it	ne
   d8e46:	236a      	movne	r3, #106	; 0x6a
   d8e48:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9200 <_strtod_l+0x978>
   d8e4c:	9304      	str	r3, [sp, #16]
   d8e4e:	4650      	mov	r0, sl
   d8e50:	4659      	mov	r1, fp
   d8e52:	2300      	movs	r3, #0
   d8e54:	f018 0f01 	tst.w	r8, #1
   d8e58:	d004      	beq.n	d8e64 <_strtod_l+0x5dc>
   d8e5a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8e5e:	f7ff f8fb 	bl	d8058 <__aeabi_dmul>
   d8e62:	2301      	movs	r3, #1
   d8e64:	ea5f 0868 	movs.w	r8, r8, asr #1
   d8e68:	f109 0908 	add.w	r9, r9, #8
   d8e6c:	d1f2      	bne.n	d8e54 <_strtod_l+0x5cc>
   d8e6e:	b10b      	cbz	r3, d8e74 <_strtod_l+0x5ec>
   d8e70:	4682      	mov	sl, r0
   d8e72:	468b      	mov	fp, r1
   d8e74:	9b04      	ldr	r3, [sp, #16]
   d8e76:	b1bb      	cbz	r3, d8ea8 <_strtod_l+0x620>
   d8e78:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8e7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8e80:	2b00      	cmp	r3, #0
   d8e82:	4659      	mov	r1, fp
   d8e84:	dd10      	ble.n	d8ea8 <_strtod_l+0x620>
   d8e86:	2b1f      	cmp	r3, #31
   d8e88:	f340 8128 	ble.w	d90dc <_strtod_l+0x854>
   d8e8c:	2b34      	cmp	r3, #52	; 0x34
   d8e8e:	bfde      	ittt	le
   d8e90:	3b20      	suble	r3, #32
   d8e92:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d8e96:	fa02 f303 	lslle.w	r3, r2, r3
   d8e9a:	f04f 0a00 	mov.w	sl, #0
   d8e9e:	bfcc      	ite	gt
   d8ea0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8ea4:	ea03 0b01 	andle.w	fp, r3, r1
   d8ea8:	2200      	movs	r2, #0
   d8eaa:	2300      	movs	r3, #0
   d8eac:	4650      	mov	r0, sl
   d8eae:	4659      	mov	r1, fp
   d8eb0:	f7ff fb3a 	bl	d8528 <__aeabi_dcmpeq>
   d8eb4:	2800      	cmp	r0, #0
   d8eb6:	d1a4      	bne.n	d8e02 <_strtod_l+0x57a>
   d8eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8eba:	9300      	str	r3, [sp, #0]
   d8ebc:	990a      	ldr	r1, [sp, #40]	; 0x28
   d8ebe:	462b      	mov	r3, r5
   d8ec0:	463a      	mov	r2, r7
   d8ec2:	4620      	mov	r0, r4
   d8ec4:	f001 f804 	bl	d9ed0 <__s2b>
   d8ec8:	9009      	str	r0, [sp, #36]	; 0x24
   d8eca:	2800      	cmp	r0, #0
   d8ecc:	f43f af24 	beq.w	d8d18 <_strtod_l+0x490>
   d8ed0:	9b07      	ldr	r3, [sp, #28]
   d8ed2:	1b9e      	subs	r6, r3, r6
   d8ed4:	9b08      	ldr	r3, [sp, #32]
   d8ed6:	2b00      	cmp	r3, #0
   d8ed8:	bfb4      	ite	lt
   d8eda:	4633      	movlt	r3, r6
   d8edc:	2300      	movge	r3, #0
   d8ede:	9310      	str	r3, [sp, #64]	; 0x40
   d8ee0:	9b08      	ldr	r3, [sp, #32]
   d8ee2:	2500      	movs	r5, #0
   d8ee4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d8ee8:	9318      	str	r3, [sp, #96]	; 0x60
   d8eea:	462e      	mov	r6, r5
   d8eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8eee:	4620      	mov	r0, r4
   d8ef0:	6859      	ldr	r1, [r3, #4]
   d8ef2:	f000 ff64 	bl	d9dbe <_Balloc>
   d8ef6:	9007      	str	r0, [sp, #28]
   d8ef8:	2800      	cmp	r0, #0
   d8efa:	f43f af11 	beq.w	d8d20 <_strtod_l+0x498>
   d8efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8f00:	691a      	ldr	r2, [r3, #16]
   d8f02:	3202      	adds	r2, #2
   d8f04:	f103 010c 	add.w	r1, r3, #12
   d8f08:	0092      	lsls	r2, r2, #2
   d8f0a:	300c      	adds	r0, #12
   d8f0c:	f7ff fbd5 	bl	d86ba <memcpy>
   d8f10:	ec4b ab10 	vmov	d0, sl, fp
   d8f14:	aa20      	add	r2, sp, #128	; 0x80
   d8f16:	a91f      	add	r1, sp, #124	; 0x7c
   d8f18:	4620      	mov	r0, r4
   d8f1a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d8f1e:	f001 fac7 	bl	da4b0 <__d2b>
   d8f22:	901e      	str	r0, [sp, #120]	; 0x78
   d8f24:	2800      	cmp	r0, #0
   d8f26:	f43f aefb 	beq.w	d8d20 <_strtod_l+0x498>
   d8f2a:	2101      	movs	r1, #1
   d8f2c:	4620      	mov	r0, r4
   d8f2e:	f001 f85d 	bl	d9fec <__i2b>
   d8f32:	4606      	mov	r6, r0
   d8f34:	2800      	cmp	r0, #0
   d8f36:	f43f aef3 	beq.w	d8d20 <_strtod_l+0x498>
   d8f3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d8f3c:	9904      	ldr	r1, [sp, #16]
   d8f3e:	2b00      	cmp	r3, #0
   d8f40:	bfab      	itete	ge
   d8f42:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d8f44:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d8f46:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d8f48:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d8f4c:	bfac      	ite	ge
   d8f4e:	eb03 0902 	addge.w	r9, r3, r2
   d8f52:	1ad7      	sublt	r7, r2, r3
   d8f54:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d8f56:	eba3 0801 	sub.w	r8, r3, r1
   d8f5a:	4490      	add	r8, r2
   d8f5c:	4ba3      	ldr	r3, [pc, #652]	; (d91ec <_strtod_l+0x964>)
   d8f5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d8f62:	4598      	cmp	r8, r3
   d8f64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d8f68:	f280 80cc 	bge.w	d9104 <_strtod_l+0x87c>
   d8f6c:	eba3 0308 	sub.w	r3, r3, r8
   d8f70:	2b1f      	cmp	r3, #31
   d8f72:	eba2 0203 	sub.w	r2, r2, r3
   d8f76:	f04f 0101 	mov.w	r1, #1
   d8f7a:	f300 80b6 	bgt.w	d90ea <_strtod_l+0x862>
   d8f7e:	fa01 f303 	lsl.w	r3, r1, r3
   d8f82:	9311      	str	r3, [sp, #68]	; 0x44
   d8f84:	2300      	movs	r3, #0
   d8f86:	930c      	str	r3, [sp, #48]	; 0x30
   d8f88:	eb09 0802 	add.w	r8, r9, r2
   d8f8c:	9b04      	ldr	r3, [sp, #16]
   d8f8e:	45c1      	cmp	r9, r8
   d8f90:	4417      	add	r7, r2
   d8f92:	441f      	add	r7, r3
   d8f94:	464b      	mov	r3, r9
   d8f96:	bfa8      	it	ge
   d8f98:	4643      	movge	r3, r8
   d8f9a:	42bb      	cmp	r3, r7
   d8f9c:	bfa8      	it	ge
   d8f9e:	463b      	movge	r3, r7
   d8fa0:	2b00      	cmp	r3, #0
   d8fa2:	bfc2      	ittt	gt
   d8fa4:	eba8 0803 	subgt.w	r8, r8, r3
   d8fa8:	1aff      	subgt	r7, r7, r3
   d8faa:	eba9 0903 	subgt.w	r9, r9, r3
   d8fae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8fb0:	2b00      	cmp	r3, #0
   d8fb2:	dd17      	ble.n	d8fe4 <_strtod_l+0x75c>
   d8fb4:	4631      	mov	r1, r6
   d8fb6:	461a      	mov	r2, r3
   d8fb8:	4620      	mov	r0, r4
   d8fba:	f001 f8bd 	bl	da138 <__pow5mult>
   d8fbe:	4606      	mov	r6, r0
   d8fc0:	2800      	cmp	r0, #0
   d8fc2:	f43f aead 	beq.w	d8d20 <_strtod_l+0x498>
   d8fc6:	4601      	mov	r1, r0
   d8fc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8fca:	4620      	mov	r0, r4
   d8fcc:	f001 f817 	bl	d9ffe <__multiply>
   d8fd0:	900f      	str	r0, [sp, #60]	; 0x3c
   d8fd2:	2800      	cmp	r0, #0
   d8fd4:	f43f aea4 	beq.w	d8d20 <_strtod_l+0x498>
   d8fd8:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8fda:	4620      	mov	r0, r4
   d8fdc:	f000 ff23 	bl	d9e26 <_Bfree>
   d8fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8fe2:	931e      	str	r3, [sp, #120]	; 0x78
   d8fe4:	f1b8 0f00 	cmp.w	r8, #0
   d8fe8:	f300 8091 	bgt.w	d910e <_strtod_l+0x886>
   d8fec:	9b08      	ldr	r3, [sp, #32]
   d8fee:	2b00      	cmp	r3, #0
   d8ff0:	dd08      	ble.n	d9004 <_strtod_l+0x77c>
   d8ff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8ff4:	9907      	ldr	r1, [sp, #28]
   d8ff6:	4620      	mov	r0, r4
   d8ff8:	f001 f89e 	bl	da138 <__pow5mult>
   d8ffc:	9007      	str	r0, [sp, #28]
   d8ffe:	2800      	cmp	r0, #0
   d9000:	f43f ae8e 	beq.w	d8d20 <_strtod_l+0x498>
   d9004:	2f00      	cmp	r7, #0
   d9006:	dd08      	ble.n	d901a <_strtod_l+0x792>
   d9008:	9907      	ldr	r1, [sp, #28]
   d900a:	463a      	mov	r2, r7
   d900c:	4620      	mov	r0, r4
   d900e:	f001 f8e1 	bl	da1d4 <__lshift>
   d9012:	9007      	str	r0, [sp, #28]
   d9014:	2800      	cmp	r0, #0
   d9016:	f43f ae83 	beq.w	d8d20 <_strtod_l+0x498>
   d901a:	f1b9 0f00 	cmp.w	r9, #0
   d901e:	dd08      	ble.n	d9032 <_strtod_l+0x7aa>
   d9020:	4631      	mov	r1, r6
   d9022:	464a      	mov	r2, r9
   d9024:	4620      	mov	r0, r4
   d9026:	f001 f8d5 	bl	da1d4 <__lshift>
   d902a:	4606      	mov	r6, r0
   d902c:	2800      	cmp	r0, #0
   d902e:	f43f ae77 	beq.w	d8d20 <_strtod_l+0x498>
   d9032:	9a07      	ldr	r2, [sp, #28]
   d9034:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9036:	4620      	mov	r0, r4
   d9038:	f001 f947 	bl	da2ca <__mdiff>
   d903c:	4605      	mov	r5, r0
   d903e:	2800      	cmp	r0, #0
   d9040:	f43f ae6e 	beq.w	d8d20 <_strtod_l+0x498>
   d9044:	68c3      	ldr	r3, [r0, #12]
   d9046:	930f      	str	r3, [sp, #60]	; 0x3c
   d9048:	2300      	movs	r3, #0
   d904a:	60c3      	str	r3, [r0, #12]
   d904c:	4631      	mov	r1, r6
   d904e:	f001 f920 	bl	da292 <__mcmp>
   d9052:	2800      	cmp	r0, #0
   d9054:	da65      	bge.n	d9122 <_strtod_l+0x89a>
   d9056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9058:	ea53 030a 	orrs.w	r3, r3, sl
   d905c:	f040 8087 	bne.w	d916e <_strtod_l+0x8e6>
   d9060:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9064:	2b00      	cmp	r3, #0
   d9066:	f040 8082 	bne.w	d916e <_strtod_l+0x8e6>
   d906a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d906e:	0d1b      	lsrs	r3, r3, #20
   d9070:	051b      	lsls	r3, r3, #20
   d9072:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9076:	d97a      	bls.n	d916e <_strtod_l+0x8e6>
   d9078:	696b      	ldr	r3, [r5, #20]
   d907a:	b913      	cbnz	r3, d9082 <_strtod_l+0x7fa>
   d907c:	692b      	ldr	r3, [r5, #16]
   d907e:	2b01      	cmp	r3, #1
   d9080:	dd75      	ble.n	d916e <_strtod_l+0x8e6>
   d9082:	4629      	mov	r1, r5
   d9084:	2201      	movs	r2, #1
   d9086:	4620      	mov	r0, r4
   d9088:	f001 f8a4 	bl	da1d4 <__lshift>
   d908c:	4631      	mov	r1, r6
   d908e:	4605      	mov	r5, r0
   d9090:	f001 f8ff 	bl	da292 <__mcmp>
   d9094:	2800      	cmp	r0, #0
   d9096:	dd6a      	ble.n	d916e <_strtod_l+0x8e6>
   d9098:	9904      	ldr	r1, [sp, #16]
   d909a:	4a55      	ldr	r2, [pc, #340]	; (d91f0 <_strtod_l+0x968>)
   d909c:	465b      	mov	r3, fp
   d909e:	2900      	cmp	r1, #0
   d90a0:	f000 8085 	beq.w	d91ae <_strtod_l+0x926>
   d90a4:	ea02 010b 	and.w	r1, r2, fp
   d90a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d90ac:	dc7f      	bgt.n	d91ae <_strtod_l+0x926>
   d90ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d90b2:	f77f aeaa 	ble.w	d8e0a <_strtod_l+0x582>
   d90b6:	4a4f      	ldr	r2, [pc, #316]	; (d91f4 <_strtod_l+0x96c>)
   d90b8:	2300      	movs	r3, #0
   d90ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d90be:	4650      	mov	r0, sl
   d90c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d90c4:	4659      	mov	r1, fp
   d90c6:	f7fe ffc7 	bl	d8058 <__aeabi_dmul>
   d90ca:	460b      	mov	r3, r1
   d90cc:	4303      	orrs	r3, r0
   d90ce:	bf08      	it	eq
   d90d0:	2322      	moveq	r3, #34	; 0x22
   d90d2:	4682      	mov	sl, r0
   d90d4:	468b      	mov	fp, r1
   d90d6:	bf08      	it	eq
   d90d8:	6023      	streq	r3, [r4, #0]
   d90da:	e62b      	b.n	d8d34 <_strtod_l+0x4ac>
   d90dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d90e0:	fa02 f303 	lsl.w	r3, r2, r3
   d90e4:	ea03 0a0a 	and.w	sl, r3, sl
   d90e8:	e6de      	b.n	d8ea8 <_strtod_l+0x620>
   d90ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d90ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d90f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d90f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d90fa:	fa01 f308 	lsl.w	r3, r1, r8
   d90fe:	930c      	str	r3, [sp, #48]	; 0x30
   d9100:	9111      	str	r1, [sp, #68]	; 0x44
   d9102:	e741      	b.n	d8f88 <_strtod_l+0x700>
   d9104:	2300      	movs	r3, #0
   d9106:	930c      	str	r3, [sp, #48]	; 0x30
   d9108:	2301      	movs	r3, #1
   d910a:	9311      	str	r3, [sp, #68]	; 0x44
   d910c:	e73c      	b.n	d8f88 <_strtod_l+0x700>
   d910e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9110:	4642      	mov	r2, r8
   d9112:	4620      	mov	r0, r4
   d9114:	f001 f85e 	bl	da1d4 <__lshift>
   d9118:	901e      	str	r0, [sp, #120]	; 0x78
   d911a:	2800      	cmp	r0, #0
   d911c:	f47f af66 	bne.w	d8fec <_strtod_l+0x764>
   d9120:	e5fe      	b.n	d8d20 <_strtod_l+0x498>
   d9122:	465f      	mov	r7, fp
   d9124:	d16e      	bne.n	d9204 <_strtod_l+0x97c>
   d9126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9128:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d912c:	b342      	cbz	r2, d9180 <_strtod_l+0x8f8>
   d912e:	4a32      	ldr	r2, [pc, #200]	; (d91f8 <_strtod_l+0x970>)
   d9130:	4293      	cmp	r3, r2
   d9132:	d128      	bne.n	d9186 <_strtod_l+0x8fe>
   d9134:	9b04      	ldr	r3, [sp, #16]
   d9136:	4650      	mov	r0, sl
   d9138:	b1eb      	cbz	r3, d9176 <_strtod_l+0x8ee>
   d913a:	4a2d      	ldr	r2, [pc, #180]	; (d91f0 <_strtod_l+0x968>)
   d913c:	403a      	ands	r2, r7
   d913e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9142:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9146:	d819      	bhi.n	d917c <_strtod_l+0x8f4>
   d9148:	0d12      	lsrs	r2, r2, #20
   d914a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d914e:	fa01 f303 	lsl.w	r3, r1, r3
   d9152:	4298      	cmp	r0, r3
   d9154:	d117      	bne.n	d9186 <_strtod_l+0x8fe>
   d9156:	4b29      	ldr	r3, [pc, #164]	; (d91fc <_strtod_l+0x974>)
   d9158:	429f      	cmp	r7, r3
   d915a:	d102      	bne.n	d9162 <_strtod_l+0x8da>
   d915c:	3001      	adds	r0, #1
   d915e:	f43f addf 	beq.w	d8d20 <_strtod_l+0x498>
   d9162:	4b23      	ldr	r3, [pc, #140]	; (d91f0 <_strtod_l+0x968>)
   d9164:	403b      	ands	r3, r7
   d9166:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d916a:	f04f 0a00 	mov.w	sl, #0
   d916e:	9b04      	ldr	r3, [sp, #16]
   d9170:	2b00      	cmp	r3, #0
   d9172:	d1a0      	bne.n	d90b6 <_strtod_l+0x82e>
   d9174:	e5de      	b.n	d8d34 <_strtod_l+0x4ac>
   d9176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d917a:	e7ea      	b.n	d9152 <_strtod_l+0x8ca>
   d917c:	460b      	mov	r3, r1
   d917e:	e7e8      	b.n	d9152 <_strtod_l+0x8ca>
   d9180:	ea53 030a 	orrs.w	r3, r3, sl
   d9184:	d088      	beq.n	d9098 <_strtod_l+0x810>
   d9186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9188:	b1db      	cbz	r3, d91c2 <_strtod_l+0x93a>
   d918a:	423b      	tst	r3, r7
   d918c:	d0ef      	beq.n	d916e <_strtod_l+0x8e6>
   d918e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9190:	9a04      	ldr	r2, [sp, #16]
   d9192:	4650      	mov	r0, sl
   d9194:	4659      	mov	r1, fp
   d9196:	b1c3      	cbz	r3, d91ca <_strtod_l+0x942>
   d9198:	f7ff fb59 	bl	d884e <sulp>
   d919c:	4602      	mov	r2, r0
   d919e:	460b      	mov	r3, r1
   d91a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d91a4:	f7fe fda2 	bl	d7cec <__adddf3>
   d91a8:	4682      	mov	sl, r0
   d91aa:	468b      	mov	fp, r1
   d91ac:	e7df      	b.n	d916e <_strtod_l+0x8e6>
   d91ae:	4013      	ands	r3, r2
   d91b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d91b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d91b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d91bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d91c0:	e7d5      	b.n	d916e <_strtod_l+0x8e6>
   d91c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d91c4:	ea13 0f0a 	tst.w	r3, sl
   d91c8:	e7e0      	b.n	d918c <_strtod_l+0x904>
   d91ca:	f7ff fb40 	bl	d884e <sulp>
   d91ce:	4602      	mov	r2, r0
   d91d0:	460b      	mov	r3, r1
   d91d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d91d6:	f7fe fd87 	bl	d7ce8 <__aeabi_dsub>
   d91da:	2200      	movs	r2, #0
   d91dc:	2300      	movs	r3, #0
   d91de:	4682      	mov	sl, r0
   d91e0:	468b      	mov	fp, r1
   d91e2:	f7ff f9a1 	bl	d8528 <__aeabi_dcmpeq>
   d91e6:	2800      	cmp	r0, #0
   d91e8:	d0c1      	beq.n	d916e <_strtod_l+0x8e6>
   d91ea:	e60e      	b.n	d8e0a <_strtod_l+0x582>
   d91ec:	fffffc02 	.word	0xfffffc02
   d91f0:	7ff00000 	.word	0x7ff00000
   d91f4:	39500000 	.word	0x39500000
   d91f8:	000fffff 	.word	0x000fffff
   d91fc:	7fefffff 	.word	0x7fefffff
   d9200:	000daaf8 	.word	0x000daaf8
   d9204:	4631      	mov	r1, r6
   d9206:	4628      	mov	r0, r5
   d9208:	f001 f9a2 	bl	da550 <__ratio>
   d920c:	ec59 8b10 	vmov	r8, r9, d0
   d9210:	ee10 0a10 	vmov	r0, s0
   d9214:	2200      	movs	r2, #0
   d9216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d921a:	4649      	mov	r1, r9
   d921c:	f7ff f998 	bl	d8550 <__aeabi_dcmple>
   d9220:	2800      	cmp	r0, #0
   d9222:	d07c      	beq.n	d931e <_strtod_l+0xa96>
   d9224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9226:	2b00      	cmp	r3, #0
   d9228:	d04c      	beq.n	d92c4 <_strtod_l+0xa3c>
   d922a:	4b95      	ldr	r3, [pc, #596]	; (d9480 <_strtod_l+0xbf8>)
   d922c:	2200      	movs	r2, #0
   d922e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9232:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9480 <_strtod_l+0xbf8>
   d9236:	f04f 0800 	mov.w	r8, #0
   d923a:	4b92      	ldr	r3, [pc, #584]	; (d9484 <_strtod_l+0xbfc>)
   d923c:	403b      	ands	r3, r7
   d923e:	9311      	str	r3, [sp, #68]	; 0x44
   d9240:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9242:	4b91      	ldr	r3, [pc, #580]	; (d9488 <_strtod_l+0xc00>)
   d9244:	429a      	cmp	r2, r3
   d9246:	f040 80b2 	bne.w	d93ae <_strtod_l+0xb26>
   d924a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d924e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9252:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9256:	ec4b ab10 	vmov	d0, sl, fp
   d925a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d925e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9262:	f001 f8a9 	bl	da3b8 <__ulp>
   d9266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d926a:	ec53 2b10 	vmov	r2, r3, d0
   d926e:	f7fe fef3 	bl	d8058 <__aeabi_dmul>
   d9272:	4652      	mov	r2, sl
   d9274:	465b      	mov	r3, fp
   d9276:	f7fe fd39 	bl	d7cec <__adddf3>
   d927a:	460b      	mov	r3, r1
   d927c:	4981      	ldr	r1, [pc, #516]	; (d9484 <_strtod_l+0xbfc>)
   d927e:	4a83      	ldr	r2, [pc, #524]	; (d948c <_strtod_l+0xc04>)
   d9280:	4019      	ands	r1, r3
   d9282:	4291      	cmp	r1, r2
   d9284:	4682      	mov	sl, r0
   d9286:	d95e      	bls.n	d9346 <_strtod_l+0xabe>
   d9288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d928a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d928e:	4293      	cmp	r3, r2
   d9290:	d103      	bne.n	d929a <_strtod_l+0xa12>
   d9292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9294:	3301      	adds	r3, #1
   d9296:	f43f ad43 	beq.w	d8d20 <_strtod_l+0x498>
   d929a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9498 <_strtod_l+0xc10>
   d929e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d92a2:	991e      	ldr	r1, [sp, #120]	; 0x78
   d92a4:	4620      	mov	r0, r4
   d92a6:	f000 fdbe 	bl	d9e26 <_Bfree>
   d92aa:	9907      	ldr	r1, [sp, #28]
   d92ac:	4620      	mov	r0, r4
   d92ae:	f000 fdba 	bl	d9e26 <_Bfree>
   d92b2:	4631      	mov	r1, r6
   d92b4:	4620      	mov	r0, r4
   d92b6:	f000 fdb6 	bl	d9e26 <_Bfree>
   d92ba:	4629      	mov	r1, r5
   d92bc:	4620      	mov	r0, r4
   d92be:	f000 fdb2 	bl	d9e26 <_Bfree>
   d92c2:	e613      	b.n	d8eec <_strtod_l+0x664>
   d92c4:	f1ba 0f00 	cmp.w	sl, #0
   d92c8:	d11b      	bne.n	d9302 <_strtod_l+0xa7a>
   d92ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d92ce:	b9f3      	cbnz	r3, d930e <_strtod_l+0xa86>
   d92d0:	4b6b      	ldr	r3, [pc, #428]	; (d9480 <_strtod_l+0xbf8>)
   d92d2:	2200      	movs	r2, #0
   d92d4:	4640      	mov	r0, r8
   d92d6:	4649      	mov	r1, r9
   d92d8:	f7ff f930 	bl	d853c <__aeabi_dcmplt>
   d92dc:	b9d0      	cbnz	r0, d9314 <_strtod_l+0xa8c>
   d92de:	4640      	mov	r0, r8
   d92e0:	4649      	mov	r1, r9
   d92e2:	4b6b      	ldr	r3, [pc, #428]	; (d9490 <_strtod_l+0xc08>)
   d92e4:	2200      	movs	r2, #0
   d92e6:	f7fe feb7 	bl	d8058 <__aeabi_dmul>
   d92ea:	4680      	mov	r8, r0
   d92ec:	4689      	mov	r9, r1
   d92ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d92f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d92f6:	931b      	str	r3, [sp, #108]	; 0x6c
   d92f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d92fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9300:	e79b      	b.n	d923a <_strtod_l+0x9b2>
   d9302:	f1ba 0f01 	cmp.w	sl, #1
   d9306:	d102      	bne.n	d930e <_strtod_l+0xa86>
   d9308:	2f00      	cmp	r7, #0
   d930a:	f43f ad7e 	beq.w	d8e0a <_strtod_l+0x582>
   d930e:	4b61      	ldr	r3, [pc, #388]	; (d9494 <_strtod_l+0xc0c>)
   d9310:	2200      	movs	r2, #0
   d9312:	e78c      	b.n	d922e <_strtod_l+0x9a6>
   d9314:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9490 <_strtod_l+0xc08>
   d9318:	f04f 0800 	mov.w	r8, #0
   d931c:	e7e7      	b.n	d92ee <_strtod_l+0xa66>
   d931e:	4b5c      	ldr	r3, [pc, #368]	; (d9490 <_strtod_l+0xc08>)
   d9320:	4640      	mov	r0, r8
   d9322:	4649      	mov	r1, r9
   d9324:	2200      	movs	r2, #0
   d9326:	f7fe fe97 	bl	d8058 <__aeabi_dmul>
   d932a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d932c:	4680      	mov	r8, r0
   d932e:	4689      	mov	r9, r1
   d9330:	b933      	cbnz	r3, d9340 <_strtod_l+0xab8>
   d9332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9336:	9012      	str	r0, [sp, #72]	; 0x48
   d9338:	9313      	str	r3, [sp, #76]	; 0x4c
   d933a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d933e:	e7dd      	b.n	d92fc <_strtod_l+0xa74>
   d9340:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9344:	e7f9      	b.n	d933a <_strtod_l+0xab2>
   d9346:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d934a:	9b04      	ldr	r3, [sp, #16]
   d934c:	2b00      	cmp	r3, #0
   d934e:	d1a8      	bne.n	d92a2 <_strtod_l+0xa1a>
   d9350:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9354:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9356:	0d1b      	lsrs	r3, r3, #20
   d9358:	051b      	lsls	r3, r3, #20
   d935a:	429a      	cmp	r2, r3
   d935c:	d1a1      	bne.n	d92a2 <_strtod_l+0xa1a>
   d935e:	4640      	mov	r0, r8
   d9360:	4649      	mov	r1, r9
   d9362:	f001 f993 	bl	da68c <__aeabi_d2lz>
   d9366:	f7fe fe49 	bl	d7ffc <__aeabi_l2d>
   d936a:	4602      	mov	r2, r0
   d936c:	460b      	mov	r3, r1
   d936e:	4640      	mov	r0, r8
   d9370:	4649      	mov	r1, r9
   d9372:	f7fe fcb9 	bl	d7ce8 <__aeabi_dsub>
   d9376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9378:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d937c:	ea43 030a 	orr.w	r3, r3, sl
   d9380:	4313      	orrs	r3, r2
   d9382:	4680      	mov	r8, r0
   d9384:	4689      	mov	r9, r1
   d9386:	d053      	beq.n	d9430 <_strtod_l+0xba8>
   d9388:	a335      	add	r3, pc, #212	; (adr r3, d9460 <_strtod_l+0xbd8>)
   d938a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d938e:	f7ff f8d5 	bl	d853c <__aeabi_dcmplt>
   d9392:	2800      	cmp	r0, #0
   d9394:	f47f acce 	bne.w	d8d34 <_strtod_l+0x4ac>
   d9398:	a333      	add	r3, pc, #204	; (adr r3, d9468 <_strtod_l+0xbe0>)
   d939a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d939e:	4640      	mov	r0, r8
   d93a0:	4649      	mov	r1, r9
   d93a2:	f7ff f8e9 	bl	d8578 <__aeabi_dcmpgt>
   d93a6:	2800      	cmp	r0, #0
   d93a8:	f43f af7b 	beq.w	d92a2 <_strtod_l+0xa1a>
   d93ac:	e4c2      	b.n	d8d34 <_strtod_l+0x4ac>
   d93ae:	9b04      	ldr	r3, [sp, #16]
   d93b0:	b333      	cbz	r3, d9400 <_strtod_l+0xb78>
   d93b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d93b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d93b8:	d822      	bhi.n	d9400 <_strtod_l+0xb78>
   d93ba:	a32d      	add	r3, pc, #180	; (adr r3, d9470 <_strtod_l+0xbe8>)
   d93bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93c0:	4640      	mov	r0, r8
   d93c2:	4649      	mov	r1, r9
   d93c4:	f7ff f8c4 	bl	d8550 <__aeabi_dcmple>
   d93c8:	b1a0      	cbz	r0, d93f4 <_strtod_l+0xb6c>
   d93ca:	4649      	mov	r1, r9
   d93cc:	4640      	mov	r0, r8
   d93ce:	f7ff f8dd 	bl	d858c <__aeabi_d2uiz>
   d93d2:	2801      	cmp	r0, #1
   d93d4:	bf38      	it	cc
   d93d6:	2001      	movcc	r0, #1
   d93d8:	f7fe fdc4 	bl	d7f64 <__aeabi_ui2d>
   d93dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d93de:	4680      	mov	r8, r0
   d93e0:	4689      	mov	r9, r1
   d93e2:	bb13      	cbnz	r3, d942a <_strtod_l+0xba2>
   d93e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d93e8:	9014      	str	r0, [sp, #80]	; 0x50
   d93ea:	9315      	str	r3, [sp, #84]	; 0x54
   d93ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d93f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d93f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d93f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d93f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d93fc:	1a9b      	subs	r3, r3, r2
   d93fe:	930d      	str	r3, [sp, #52]	; 0x34
   d9400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9404:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9408:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d940c:	f000 ffd4 	bl	da3b8 <__ulp>
   d9410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9414:	ec53 2b10 	vmov	r2, r3, d0
   d9418:	f7fe fe1e 	bl	d8058 <__aeabi_dmul>
   d941c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9420:	f7fe fc64 	bl	d7cec <__adddf3>
   d9424:	4682      	mov	sl, r0
   d9426:	468b      	mov	fp, r1
   d9428:	e78f      	b.n	d934a <_strtod_l+0xac2>
   d942a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d942e:	e7dd      	b.n	d93ec <_strtod_l+0xb64>
   d9430:	a311      	add	r3, pc, #68	; (adr r3, d9478 <_strtod_l+0xbf0>)
   d9432:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9436:	f7ff f881 	bl	d853c <__aeabi_dcmplt>
   d943a:	e7b4      	b.n	d93a6 <_strtod_l+0xb1e>
   d943c:	2300      	movs	r3, #0
   d943e:	930e      	str	r3, [sp, #56]	; 0x38
   d9440:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9442:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9444:	6013      	str	r3, [r2, #0]
   d9446:	f7ff ba65 	b.w	d8914 <_strtod_l+0x8c>
   d944a:	2b65      	cmp	r3, #101	; 0x65
   d944c:	f43f ab5d 	beq.w	d8b0a <_strtod_l+0x282>
   d9450:	2b45      	cmp	r3, #69	; 0x45
   d9452:	f43f ab5a 	beq.w	d8b0a <_strtod_l+0x282>
   d9456:	2201      	movs	r2, #1
   d9458:	f7ff bb92 	b.w	d8b80 <_strtod_l+0x2f8>
   d945c:	f3af 8000 	nop.w
   d9460:	94a03595 	.word	0x94a03595
   d9464:	3fdfffff 	.word	0x3fdfffff
   d9468:	35afe535 	.word	0x35afe535
   d946c:	3fe00000 	.word	0x3fe00000
   d9470:	ffc00000 	.word	0xffc00000
   d9474:	41dfffff 	.word	0x41dfffff
   d9478:	94a03595 	.word	0x94a03595
   d947c:	3fcfffff 	.word	0x3fcfffff
   d9480:	3ff00000 	.word	0x3ff00000
   d9484:	7ff00000 	.word	0x7ff00000
   d9488:	7fe00000 	.word	0x7fe00000
   d948c:	7c9fffff 	.word	0x7c9fffff
   d9490:	3fe00000 	.word	0x3fe00000
   d9494:	bff00000 	.word	0xbff00000
   d9498:	7fefffff 	.word	0x7fefffff

000d949c <strtod>:
   d949c:	460a      	mov	r2, r1
   d949e:	4601      	mov	r1, r0
   d94a0:	4802      	ldr	r0, [pc, #8]	; (d94ac <strtod+0x10>)
   d94a2:	4b03      	ldr	r3, [pc, #12]	; (d94b0 <strtod+0x14>)
   d94a4:	6800      	ldr	r0, [r0, #0]
   d94a6:	f7ff b9ef 	b.w	d8888 <_strtod_l>
   d94aa:	bf00      	nop
   d94ac:	2003e1f0 	.word	0x2003e1f0
   d94b0:	2003e25c 	.word	0x2003e25c

000d94b4 <__strtok_r>:
   d94b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d94b6:	b908      	cbnz	r0, d94bc <__strtok_r+0x8>
   d94b8:	6810      	ldr	r0, [r2, #0]
   d94ba:	b188      	cbz	r0, d94e0 <__strtok_r+0x2c>
   d94bc:	4604      	mov	r4, r0
   d94be:	4620      	mov	r0, r4
   d94c0:	f814 5b01 	ldrb.w	r5, [r4], #1
   d94c4:	460f      	mov	r7, r1
   d94c6:	f817 6b01 	ldrb.w	r6, [r7], #1
   d94ca:	b91e      	cbnz	r6, d94d4 <__strtok_r+0x20>
   d94cc:	b965      	cbnz	r5, d94e8 <__strtok_r+0x34>
   d94ce:	6015      	str	r5, [r2, #0]
   d94d0:	4628      	mov	r0, r5
   d94d2:	e005      	b.n	d94e0 <__strtok_r+0x2c>
   d94d4:	42b5      	cmp	r5, r6
   d94d6:	d1f6      	bne.n	d94c6 <__strtok_r+0x12>
   d94d8:	2b00      	cmp	r3, #0
   d94da:	d1f0      	bne.n	d94be <__strtok_r+0xa>
   d94dc:	6014      	str	r4, [r2, #0]
   d94de:	7003      	strb	r3, [r0, #0]
   d94e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d94e2:	461c      	mov	r4, r3
   d94e4:	e00c      	b.n	d9500 <__strtok_r+0x4c>
   d94e6:	b915      	cbnz	r5, d94ee <__strtok_r+0x3a>
   d94e8:	f814 3b01 	ldrb.w	r3, [r4], #1
   d94ec:	460e      	mov	r6, r1
   d94ee:	f816 5b01 	ldrb.w	r5, [r6], #1
   d94f2:	42ab      	cmp	r3, r5
   d94f4:	d1f7      	bne.n	d94e6 <__strtok_r+0x32>
   d94f6:	2b00      	cmp	r3, #0
   d94f8:	d0f3      	beq.n	d94e2 <__strtok_r+0x2e>
   d94fa:	2300      	movs	r3, #0
   d94fc:	f804 3c01 	strb.w	r3, [r4, #-1]
   d9500:	6014      	str	r4, [r2, #0]
   d9502:	e7ed      	b.n	d94e0 <__strtok_r+0x2c>

000d9504 <strtok_r>:
   d9504:	2301      	movs	r3, #1
   d9506:	f7ff bfd5 	b.w	d94b4 <__strtok_r>
	...

000d950c <_strtol_l.isra.0>:
   d950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9510:	4e3a      	ldr	r6, [pc, #232]	; (d95fc <_strtol_l.isra.0+0xf0>)
   d9512:	4686      	mov	lr, r0
   d9514:	468c      	mov	ip, r1
   d9516:	4660      	mov	r0, ip
   d9518:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d951c:	5da5      	ldrb	r5, [r4, r6]
   d951e:	f015 0508 	ands.w	r5, r5, #8
   d9522:	d1f8      	bne.n	d9516 <_strtol_l.isra.0+0xa>
   d9524:	2c2d      	cmp	r4, #45	; 0x2d
   d9526:	d133      	bne.n	d9590 <_strtol_l.isra.0+0x84>
   d9528:	f89c 4000 	ldrb.w	r4, [ip]
   d952c:	f04f 0801 	mov.w	r8, #1
   d9530:	f100 0c02 	add.w	ip, r0, #2
   d9534:	2b00      	cmp	r3, #0
   d9536:	d05c      	beq.n	d95f2 <_strtol_l.isra.0+0xe6>
   d9538:	2b10      	cmp	r3, #16
   d953a:	d10c      	bne.n	d9556 <_strtol_l.isra.0+0x4a>
   d953c:	2c30      	cmp	r4, #48	; 0x30
   d953e:	d10a      	bne.n	d9556 <_strtol_l.isra.0+0x4a>
   d9540:	f89c 0000 	ldrb.w	r0, [ip]
   d9544:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9548:	2858      	cmp	r0, #88	; 0x58
   d954a:	d14d      	bne.n	d95e8 <_strtol_l.isra.0+0xdc>
   d954c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9550:	2310      	movs	r3, #16
   d9552:	f10c 0c02 	add.w	ip, ip, #2
   d9556:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d955a:	3f01      	subs	r7, #1
   d955c:	2600      	movs	r6, #0
   d955e:	fbb7 f9f3 	udiv	r9, r7, r3
   d9562:	4630      	mov	r0, r6
   d9564:	fb03 7a19 	mls	sl, r3, r9, r7
   d9568:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d956c:	2d09      	cmp	r5, #9
   d956e:	d818      	bhi.n	d95a2 <_strtol_l.isra.0+0x96>
   d9570:	462c      	mov	r4, r5
   d9572:	42a3      	cmp	r3, r4
   d9574:	dd24      	ble.n	d95c0 <_strtol_l.isra.0+0xb4>
   d9576:	1c75      	adds	r5, r6, #1
   d9578:	d007      	beq.n	d958a <_strtol_l.isra.0+0x7e>
   d957a:	4581      	cmp	r9, r0
   d957c:	d31d      	bcc.n	d95ba <_strtol_l.isra.0+0xae>
   d957e:	d101      	bne.n	d9584 <_strtol_l.isra.0+0x78>
   d9580:	45a2      	cmp	sl, r4
   d9582:	db1a      	blt.n	d95ba <_strtol_l.isra.0+0xae>
   d9584:	fb00 4003 	mla	r0, r0, r3, r4
   d9588:	2601      	movs	r6, #1
   d958a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d958e:	e7eb      	b.n	d9568 <_strtol_l.isra.0+0x5c>
   d9590:	2c2b      	cmp	r4, #43	; 0x2b
   d9592:	bf08      	it	eq
   d9594:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9598:	46a8      	mov	r8, r5
   d959a:	bf08      	it	eq
   d959c:	f100 0c02 	addeq.w	ip, r0, #2
   d95a0:	e7c8      	b.n	d9534 <_strtol_l.isra.0+0x28>
   d95a2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d95a6:	2d19      	cmp	r5, #25
   d95a8:	d801      	bhi.n	d95ae <_strtol_l.isra.0+0xa2>
   d95aa:	3c37      	subs	r4, #55	; 0x37
   d95ac:	e7e1      	b.n	d9572 <_strtol_l.isra.0+0x66>
   d95ae:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d95b2:	2d19      	cmp	r5, #25
   d95b4:	d804      	bhi.n	d95c0 <_strtol_l.isra.0+0xb4>
   d95b6:	3c57      	subs	r4, #87	; 0x57
   d95b8:	e7db      	b.n	d9572 <_strtol_l.isra.0+0x66>
   d95ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d95be:	e7e4      	b.n	d958a <_strtol_l.isra.0+0x7e>
   d95c0:	1c73      	adds	r3, r6, #1
   d95c2:	d106      	bne.n	d95d2 <_strtol_l.isra.0+0xc6>
   d95c4:	2322      	movs	r3, #34	; 0x22
   d95c6:	f8ce 3000 	str.w	r3, [lr]
   d95ca:	4638      	mov	r0, r7
   d95cc:	b942      	cbnz	r2, d95e0 <_strtol_l.isra.0+0xd4>
   d95ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95d2:	f1b8 0f00 	cmp.w	r8, #0
   d95d6:	d000      	beq.n	d95da <_strtol_l.isra.0+0xce>
   d95d8:	4240      	negs	r0, r0
   d95da:	2a00      	cmp	r2, #0
   d95dc:	d0f7      	beq.n	d95ce <_strtol_l.isra.0+0xc2>
   d95de:	b10e      	cbz	r6, d95e4 <_strtol_l.isra.0+0xd8>
   d95e0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d95e4:	6011      	str	r1, [r2, #0]
   d95e6:	e7f2      	b.n	d95ce <_strtol_l.isra.0+0xc2>
   d95e8:	2430      	movs	r4, #48	; 0x30
   d95ea:	2b00      	cmp	r3, #0
   d95ec:	d1b3      	bne.n	d9556 <_strtol_l.isra.0+0x4a>
   d95ee:	2308      	movs	r3, #8
   d95f0:	e7b1      	b.n	d9556 <_strtol_l.isra.0+0x4a>
   d95f2:	2c30      	cmp	r4, #48	; 0x30
   d95f4:	d0a4      	beq.n	d9540 <_strtol_l.isra.0+0x34>
   d95f6:	230a      	movs	r3, #10
   d95f8:	e7ad      	b.n	d9556 <_strtol_l.isra.0+0x4a>
   d95fa:	bf00      	nop
   d95fc:	000dab21 	.word	0x000dab21

000d9600 <strtol>:
   d9600:	4613      	mov	r3, r2
   d9602:	460a      	mov	r2, r1
   d9604:	4601      	mov	r1, r0
   d9606:	4802      	ldr	r0, [pc, #8]	; (d9610 <strtol+0x10>)
   d9608:	6800      	ldr	r0, [r0, #0]
   d960a:	f7ff bf7f 	b.w	d950c <_strtol_l.isra.0>
   d960e:	bf00      	nop
   d9610:	2003e1f0 	.word	0x2003e1f0

000d9614 <__register_exitproc>:
   d9614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9618:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d96d4 <__register_exitproc+0xc0>
   d961c:	4606      	mov	r6, r0
   d961e:	f8d8 0000 	ldr.w	r0, [r8]
   d9622:	461f      	mov	r7, r3
   d9624:	460d      	mov	r5, r1
   d9626:	4691      	mov	r9, r2
   d9628:	f000 fbb4 	bl	d9d94 <__retarget_lock_acquire_recursive>
   d962c:	4b25      	ldr	r3, [pc, #148]	; (d96c4 <__register_exitproc+0xb0>)
   d962e:	681c      	ldr	r4, [r3, #0]
   d9630:	b934      	cbnz	r4, d9640 <__register_exitproc+0x2c>
   d9632:	4c25      	ldr	r4, [pc, #148]	; (d96c8 <__register_exitproc+0xb4>)
   d9634:	601c      	str	r4, [r3, #0]
   d9636:	4b25      	ldr	r3, [pc, #148]	; (d96cc <__register_exitproc+0xb8>)
   d9638:	b113      	cbz	r3, d9640 <__register_exitproc+0x2c>
   d963a:	681b      	ldr	r3, [r3, #0]
   d963c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d9640:	6863      	ldr	r3, [r4, #4]
   d9642:	2b1f      	cmp	r3, #31
   d9644:	dd07      	ble.n	d9656 <__register_exitproc+0x42>
   d9646:	f8d8 0000 	ldr.w	r0, [r8]
   d964a:	f000 fba5 	bl	d9d98 <__retarget_lock_release_recursive>
   d964e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9656:	b34e      	cbz	r6, d96ac <__register_exitproc+0x98>
   d9658:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d965c:	b988      	cbnz	r0, d9682 <__register_exitproc+0x6e>
   d965e:	4b1c      	ldr	r3, [pc, #112]	; (d96d0 <__register_exitproc+0xbc>)
   d9660:	b923      	cbnz	r3, d966c <__register_exitproc+0x58>
   d9662:	f8d8 0000 	ldr.w	r0, [r8]
   d9666:	f000 fb96 	bl	d9d96 <__retarget_lock_release>
   d966a:	e7f0      	b.n	d964e <__register_exitproc+0x3a>
   d966c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d9670:	f7fc f82e 	bl	d56d0 <malloc>
   d9674:	2800      	cmp	r0, #0
   d9676:	d0f4      	beq.n	d9662 <__register_exitproc+0x4e>
   d9678:	2300      	movs	r3, #0
   d967a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d967e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d9682:	6863      	ldr	r3, [r4, #4]
   d9684:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d9688:	2201      	movs	r2, #1
   d968a:	409a      	lsls	r2, r3
   d968c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d9690:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d9694:	4313      	orrs	r3, r2
   d9696:	2e02      	cmp	r6, #2
   d9698:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d969c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d96a0:	bf02      	ittt	eq
   d96a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d96a6:	431a      	orreq	r2, r3
   d96a8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d96ac:	6863      	ldr	r3, [r4, #4]
   d96ae:	f8d8 0000 	ldr.w	r0, [r8]
   d96b2:	1c5a      	adds	r2, r3, #1
   d96b4:	3302      	adds	r3, #2
   d96b6:	6062      	str	r2, [r4, #4]
   d96b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d96bc:	f000 fb6c 	bl	d9d98 <__retarget_lock_release_recursive>
   d96c0:	2000      	movs	r0, #0
   d96c2:	e7c6      	b.n	d9652 <__register_exitproc+0x3e>
   d96c4:	2003e7e4 	.word	0x2003e7e4
   d96c8:	2003e758 	.word	0x2003e758
   d96cc:	00000000 	.word	0x00000000
   d96d0:	000d56d1 	.word	0x000d56d1
   d96d4:	2003e254 	.word	0x2003e254

000d96d8 <rshift>:
   d96d8:	6903      	ldr	r3, [r0, #16]
   d96da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d96de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d96e2:	ea4f 1261 	mov.w	r2, r1, asr #5
   d96e6:	f100 0414 	add.w	r4, r0, #20
   d96ea:	dd45      	ble.n	d9778 <rshift+0xa0>
   d96ec:	f011 011f 	ands.w	r1, r1, #31
   d96f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d96f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d96f8:	d10c      	bne.n	d9714 <rshift+0x3c>
   d96fa:	f100 0710 	add.w	r7, r0, #16
   d96fe:	4629      	mov	r1, r5
   d9700:	42b1      	cmp	r1, r6
   d9702:	d334      	bcc.n	d976e <rshift+0x96>
   d9704:	1a9b      	subs	r3, r3, r2
   d9706:	009b      	lsls	r3, r3, #2
   d9708:	1eea      	subs	r2, r5, #3
   d970a:	4296      	cmp	r6, r2
   d970c:	bf38      	it	cc
   d970e:	2300      	movcc	r3, #0
   d9710:	4423      	add	r3, r4
   d9712:	e015      	b.n	d9740 <rshift+0x68>
   d9714:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9718:	f1c1 0820 	rsb	r8, r1, #32
   d971c:	40cf      	lsrs	r7, r1
   d971e:	f105 0e04 	add.w	lr, r5, #4
   d9722:	46a1      	mov	r9, r4
   d9724:	4576      	cmp	r6, lr
   d9726:	46f4      	mov	ip, lr
   d9728:	d815      	bhi.n	d9756 <rshift+0x7e>
   d972a:	1a9b      	subs	r3, r3, r2
   d972c:	009a      	lsls	r2, r3, #2
   d972e:	3a04      	subs	r2, #4
   d9730:	3501      	adds	r5, #1
   d9732:	42ae      	cmp	r6, r5
   d9734:	bf38      	it	cc
   d9736:	2200      	movcc	r2, #0
   d9738:	18a3      	adds	r3, r4, r2
   d973a:	50a7      	str	r7, [r4, r2]
   d973c:	b107      	cbz	r7, d9740 <rshift+0x68>
   d973e:	3304      	adds	r3, #4
   d9740:	1b1a      	subs	r2, r3, r4
   d9742:	42a3      	cmp	r3, r4
   d9744:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9748:	bf08      	it	eq
   d974a:	2300      	moveq	r3, #0
   d974c:	6102      	str	r2, [r0, #16]
   d974e:	bf08      	it	eq
   d9750:	6143      	streq	r3, [r0, #20]
   d9752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9756:	f8dc c000 	ldr.w	ip, [ip]
   d975a:	fa0c fc08 	lsl.w	ip, ip, r8
   d975e:	ea4c 0707 	orr.w	r7, ip, r7
   d9762:	f849 7b04 	str.w	r7, [r9], #4
   d9766:	f85e 7b04 	ldr.w	r7, [lr], #4
   d976a:	40cf      	lsrs	r7, r1
   d976c:	e7da      	b.n	d9724 <rshift+0x4c>
   d976e:	f851 cb04 	ldr.w	ip, [r1], #4
   d9772:	f847 cf04 	str.w	ip, [r7, #4]!
   d9776:	e7c3      	b.n	d9700 <rshift+0x28>
   d9778:	4623      	mov	r3, r4
   d977a:	e7e1      	b.n	d9740 <rshift+0x68>

000d977c <__hexdig_fun>:
   d977c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9780:	2b09      	cmp	r3, #9
   d9782:	d802      	bhi.n	d978a <__hexdig_fun+0xe>
   d9784:	3820      	subs	r0, #32
   d9786:	b2c0      	uxtb	r0, r0
   d9788:	4770      	bx	lr
   d978a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d978e:	2b05      	cmp	r3, #5
   d9790:	d801      	bhi.n	d9796 <__hexdig_fun+0x1a>
   d9792:	3847      	subs	r0, #71	; 0x47
   d9794:	e7f7      	b.n	d9786 <__hexdig_fun+0xa>
   d9796:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d979a:	2b05      	cmp	r3, #5
   d979c:	d801      	bhi.n	d97a2 <__hexdig_fun+0x26>
   d979e:	3827      	subs	r0, #39	; 0x27
   d97a0:	e7f1      	b.n	d9786 <__hexdig_fun+0xa>
   d97a2:	2000      	movs	r0, #0
   d97a4:	4770      	bx	lr
	...

000d97a8 <__gethex>:
   d97a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d97ac:	ed2d 8b02 	vpush	{d8}
   d97b0:	b089      	sub	sp, #36	; 0x24
   d97b2:	ee08 0a10 	vmov	s16, r0
   d97b6:	9304      	str	r3, [sp, #16]
   d97b8:	4bbc      	ldr	r3, [pc, #752]	; (d9aac <__gethex+0x304>)
   d97ba:	681b      	ldr	r3, [r3, #0]
   d97bc:	9301      	str	r3, [sp, #4]
   d97be:	4618      	mov	r0, r3
   d97c0:	468b      	mov	fp, r1
   d97c2:	4690      	mov	r8, r2
   d97c4:	f7ff f815 	bl	d87f2 <strlen>
   d97c8:	9b01      	ldr	r3, [sp, #4]
   d97ca:	f8db 2000 	ldr.w	r2, [fp]
   d97ce:	4403      	add	r3, r0
   d97d0:	4682      	mov	sl, r0
   d97d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d97d6:	9305      	str	r3, [sp, #20]
   d97d8:	1c93      	adds	r3, r2, #2
   d97da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d97de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d97e2:	32fe      	adds	r2, #254	; 0xfe
   d97e4:	18d1      	adds	r1, r2, r3
   d97e6:	461f      	mov	r7, r3
   d97e8:	f813 0b01 	ldrb.w	r0, [r3], #1
   d97ec:	9100      	str	r1, [sp, #0]
   d97ee:	2830      	cmp	r0, #48	; 0x30
   d97f0:	d0f8      	beq.n	d97e4 <__gethex+0x3c>
   d97f2:	f7ff ffc3 	bl	d977c <__hexdig_fun>
   d97f6:	4604      	mov	r4, r0
   d97f8:	2800      	cmp	r0, #0
   d97fa:	d13a      	bne.n	d9872 <__gethex+0xca>
   d97fc:	9901      	ldr	r1, [sp, #4]
   d97fe:	4652      	mov	r2, sl
   d9800:	4638      	mov	r0, r7
   d9802:	f7fe fffe 	bl	d8802 <strncmp>
   d9806:	4605      	mov	r5, r0
   d9808:	2800      	cmp	r0, #0
   d980a:	d168      	bne.n	d98de <__gethex+0x136>
   d980c:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9810:	eb07 060a 	add.w	r6, r7, sl
   d9814:	f7ff ffb2 	bl	d977c <__hexdig_fun>
   d9818:	2800      	cmp	r0, #0
   d981a:	d062      	beq.n	d98e2 <__gethex+0x13a>
   d981c:	4633      	mov	r3, r6
   d981e:	7818      	ldrb	r0, [r3, #0]
   d9820:	2830      	cmp	r0, #48	; 0x30
   d9822:	461f      	mov	r7, r3
   d9824:	f103 0301 	add.w	r3, r3, #1
   d9828:	d0f9      	beq.n	d981e <__gethex+0x76>
   d982a:	f7ff ffa7 	bl	d977c <__hexdig_fun>
   d982e:	2301      	movs	r3, #1
   d9830:	fab0 f480 	clz	r4, r0
   d9834:	0964      	lsrs	r4, r4, #5
   d9836:	4635      	mov	r5, r6
   d9838:	9300      	str	r3, [sp, #0]
   d983a:	463a      	mov	r2, r7
   d983c:	4616      	mov	r6, r2
   d983e:	3201      	adds	r2, #1
   d9840:	7830      	ldrb	r0, [r6, #0]
   d9842:	f7ff ff9b 	bl	d977c <__hexdig_fun>
   d9846:	2800      	cmp	r0, #0
   d9848:	d1f8      	bne.n	d983c <__gethex+0x94>
   d984a:	9901      	ldr	r1, [sp, #4]
   d984c:	4652      	mov	r2, sl
   d984e:	4630      	mov	r0, r6
   d9850:	f7fe ffd7 	bl	d8802 <strncmp>
   d9854:	b980      	cbnz	r0, d9878 <__gethex+0xd0>
   d9856:	b94d      	cbnz	r5, d986c <__gethex+0xc4>
   d9858:	eb06 050a 	add.w	r5, r6, sl
   d985c:	462a      	mov	r2, r5
   d985e:	4616      	mov	r6, r2
   d9860:	3201      	adds	r2, #1
   d9862:	7830      	ldrb	r0, [r6, #0]
   d9864:	f7ff ff8a 	bl	d977c <__hexdig_fun>
   d9868:	2800      	cmp	r0, #0
   d986a:	d1f8      	bne.n	d985e <__gethex+0xb6>
   d986c:	1bad      	subs	r5, r5, r6
   d986e:	00ad      	lsls	r5, r5, #2
   d9870:	e004      	b.n	d987c <__gethex+0xd4>
   d9872:	2400      	movs	r4, #0
   d9874:	4625      	mov	r5, r4
   d9876:	e7e0      	b.n	d983a <__gethex+0x92>
   d9878:	2d00      	cmp	r5, #0
   d987a:	d1f7      	bne.n	d986c <__gethex+0xc4>
   d987c:	7833      	ldrb	r3, [r6, #0]
   d987e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9882:	2b50      	cmp	r3, #80	; 0x50
   d9884:	d13b      	bne.n	d98fe <__gethex+0x156>
   d9886:	7873      	ldrb	r3, [r6, #1]
   d9888:	2b2b      	cmp	r3, #43	; 0x2b
   d988a:	d02c      	beq.n	d98e6 <__gethex+0x13e>
   d988c:	2b2d      	cmp	r3, #45	; 0x2d
   d988e:	d02e      	beq.n	d98ee <__gethex+0x146>
   d9890:	1c71      	adds	r1, r6, #1
   d9892:	f04f 0900 	mov.w	r9, #0
   d9896:	7808      	ldrb	r0, [r1, #0]
   d9898:	f7ff ff70 	bl	d977c <__hexdig_fun>
   d989c:	1e43      	subs	r3, r0, #1
   d989e:	b2db      	uxtb	r3, r3
   d98a0:	2b18      	cmp	r3, #24
   d98a2:	d82c      	bhi.n	d98fe <__gethex+0x156>
   d98a4:	f1a0 0210 	sub.w	r2, r0, #16
   d98a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d98ac:	f7ff ff66 	bl	d977c <__hexdig_fun>
   d98b0:	1e43      	subs	r3, r0, #1
   d98b2:	b2db      	uxtb	r3, r3
   d98b4:	2b18      	cmp	r3, #24
   d98b6:	d91d      	bls.n	d98f4 <__gethex+0x14c>
   d98b8:	f1b9 0f00 	cmp.w	r9, #0
   d98bc:	d000      	beq.n	d98c0 <__gethex+0x118>
   d98be:	4252      	negs	r2, r2
   d98c0:	4415      	add	r5, r2
   d98c2:	f8cb 1000 	str.w	r1, [fp]
   d98c6:	b1e4      	cbz	r4, d9902 <__gethex+0x15a>
   d98c8:	9b00      	ldr	r3, [sp, #0]
   d98ca:	2b00      	cmp	r3, #0
   d98cc:	bf14      	ite	ne
   d98ce:	2700      	movne	r7, #0
   d98d0:	2706      	moveq	r7, #6
   d98d2:	4638      	mov	r0, r7
   d98d4:	b009      	add	sp, #36	; 0x24
   d98d6:	ecbd 8b02 	vpop	{d8}
   d98da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d98de:	463e      	mov	r6, r7
   d98e0:	4625      	mov	r5, r4
   d98e2:	2401      	movs	r4, #1
   d98e4:	e7ca      	b.n	d987c <__gethex+0xd4>
   d98e6:	f04f 0900 	mov.w	r9, #0
   d98ea:	1cb1      	adds	r1, r6, #2
   d98ec:	e7d3      	b.n	d9896 <__gethex+0xee>
   d98ee:	f04f 0901 	mov.w	r9, #1
   d98f2:	e7fa      	b.n	d98ea <__gethex+0x142>
   d98f4:	230a      	movs	r3, #10
   d98f6:	fb03 0202 	mla	r2, r3, r2, r0
   d98fa:	3a10      	subs	r2, #16
   d98fc:	e7d4      	b.n	d98a8 <__gethex+0x100>
   d98fe:	4631      	mov	r1, r6
   d9900:	e7df      	b.n	d98c2 <__gethex+0x11a>
   d9902:	1bf3      	subs	r3, r6, r7
   d9904:	3b01      	subs	r3, #1
   d9906:	4621      	mov	r1, r4
   d9908:	2b07      	cmp	r3, #7
   d990a:	dc52      	bgt.n	d99b2 <__gethex+0x20a>
   d990c:	ee18 0a10 	vmov	r0, s16
   d9910:	f000 fa55 	bl	d9dbe <_Balloc>
   d9914:	f04f 0b00 	mov.w	fp, #0
   d9918:	f100 0914 	add.w	r9, r0, #20
   d991c:	f1ca 0301 	rsb	r3, sl, #1
   d9920:	4604      	mov	r4, r0
   d9922:	f8cd 9008 	str.w	r9, [sp, #8]
   d9926:	f8cd b000 	str.w	fp, [sp]
   d992a:	9306      	str	r3, [sp, #24]
   d992c:	42b7      	cmp	r7, r6
   d992e:	d343      	bcc.n	d99b8 <__gethex+0x210>
   d9930:	9802      	ldr	r0, [sp, #8]
   d9932:	9b00      	ldr	r3, [sp, #0]
   d9934:	f840 3b04 	str.w	r3, [r0], #4
   d9938:	eba0 0009 	sub.w	r0, r0, r9
   d993c:	1080      	asrs	r0, r0, #2
   d993e:	0146      	lsls	r6, r0, #5
   d9940:	6120      	str	r0, [r4, #16]
   d9942:	4618      	mov	r0, r3
   d9944:	f000 fb02 	bl	d9f4c <__hi0bits>
   d9948:	1a30      	subs	r0, r6, r0
   d994a:	f8d8 6000 	ldr.w	r6, [r8]
   d994e:	42b0      	cmp	r0, r6
   d9950:	dd66      	ble.n	d9a20 <__gethex+0x278>
   d9952:	1b87      	subs	r7, r0, r6
   d9954:	4639      	mov	r1, r7
   d9956:	4620      	mov	r0, r4
   d9958:	f000 fe50 	bl	da5fc <__any_on>
   d995c:	4682      	mov	sl, r0
   d995e:	b1a8      	cbz	r0, d998c <__gethex+0x1e4>
   d9960:	1e7b      	subs	r3, r7, #1
   d9962:	1159      	asrs	r1, r3, #5
   d9964:	f003 021f 	and.w	r2, r3, #31
   d9968:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d996c:	f04f 0a01 	mov.w	sl, #1
   d9970:	fa0a f202 	lsl.w	r2, sl, r2
   d9974:	420a      	tst	r2, r1
   d9976:	d009      	beq.n	d998c <__gethex+0x1e4>
   d9978:	4553      	cmp	r3, sl
   d997a:	dd05      	ble.n	d9988 <__gethex+0x1e0>
   d997c:	1eb9      	subs	r1, r7, #2
   d997e:	4620      	mov	r0, r4
   d9980:	f000 fe3c 	bl	da5fc <__any_on>
   d9984:	2800      	cmp	r0, #0
   d9986:	d148      	bne.n	d9a1a <__gethex+0x272>
   d9988:	f04f 0a02 	mov.w	sl, #2
   d998c:	4639      	mov	r1, r7
   d998e:	4620      	mov	r0, r4
   d9990:	f7ff fea2 	bl	d96d8 <rshift>
   d9994:	443d      	add	r5, r7
   d9996:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d999a:	42ab      	cmp	r3, r5
   d999c:	da4f      	bge.n	d9a3e <__gethex+0x296>
   d999e:	ee18 0a10 	vmov	r0, s16
   d99a2:	4621      	mov	r1, r4
   d99a4:	f000 fa3f 	bl	d9e26 <_Bfree>
   d99a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d99aa:	2300      	movs	r3, #0
   d99ac:	6013      	str	r3, [r2, #0]
   d99ae:	27a3      	movs	r7, #163	; 0xa3
   d99b0:	e78f      	b.n	d98d2 <__gethex+0x12a>
   d99b2:	3101      	adds	r1, #1
   d99b4:	105b      	asrs	r3, r3, #1
   d99b6:	e7a7      	b.n	d9908 <__gethex+0x160>
   d99b8:	1e73      	subs	r3, r6, #1
   d99ba:	9a05      	ldr	r2, [sp, #20]
   d99bc:	9303      	str	r3, [sp, #12]
   d99be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d99c2:	4293      	cmp	r3, r2
   d99c4:	d019      	beq.n	d99fa <__gethex+0x252>
   d99c6:	f1bb 0f20 	cmp.w	fp, #32
   d99ca:	d107      	bne.n	d99dc <__gethex+0x234>
   d99cc:	9b02      	ldr	r3, [sp, #8]
   d99ce:	9a00      	ldr	r2, [sp, #0]
   d99d0:	f843 2b04 	str.w	r2, [r3], #4
   d99d4:	9302      	str	r3, [sp, #8]
   d99d6:	2300      	movs	r3, #0
   d99d8:	9300      	str	r3, [sp, #0]
   d99da:	469b      	mov	fp, r3
   d99dc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d99e0:	f7ff fecc 	bl	d977c <__hexdig_fun>
   d99e4:	9b00      	ldr	r3, [sp, #0]
   d99e6:	f000 000f 	and.w	r0, r0, #15
   d99ea:	fa00 f00b 	lsl.w	r0, r0, fp
   d99ee:	4303      	orrs	r3, r0
   d99f0:	9300      	str	r3, [sp, #0]
   d99f2:	f10b 0b04 	add.w	fp, fp, #4
   d99f6:	9b03      	ldr	r3, [sp, #12]
   d99f8:	e00d      	b.n	d9a16 <__gethex+0x26e>
   d99fa:	9b03      	ldr	r3, [sp, #12]
   d99fc:	9a06      	ldr	r2, [sp, #24]
   d99fe:	4413      	add	r3, r2
   d9a00:	42bb      	cmp	r3, r7
   d9a02:	d3e0      	bcc.n	d99c6 <__gethex+0x21e>
   d9a04:	4618      	mov	r0, r3
   d9a06:	9901      	ldr	r1, [sp, #4]
   d9a08:	9307      	str	r3, [sp, #28]
   d9a0a:	4652      	mov	r2, sl
   d9a0c:	f7fe fef9 	bl	d8802 <strncmp>
   d9a10:	9b07      	ldr	r3, [sp, #28]
   d9a12:	2800      	cmp	r0, #0
   d9a14:	d1d7      	bne.n	d99c6 <__gethex+0x21e>
   d9a16:	461e      	mov	r6, r3
   d9a18:	e788      	b.n	d992c <__gethex+0x184>
   d9a1a:	f04f 0a03 	mov.w	sl, #3
   d9a1e:	e7b5      	b.n	d998c <__gethex+0x1e4>
   d9a20:	da0a      	bge.n	d9a38 <__gethex+0x290>
   d9a22:	1a37      	subs	r7, r6, r0
   d9a24:	4621      	mov	r1, r4
   d9a26:	ee18 0a10 	vmov	r0, s16
   d9a2a:	463a      	mov	r2, r7
   d9a2c:	f000 fbd2 	bl	da1d4 <__lshift>
   d9a30:	1bed      	subs	r5, r5, r7
   d9a32:	4604      	mov	r4, r0
   d9a34:	f100 0914 	add.w	r9, r0, #20
   d9a38:	f04f 0a00 	mov.w	sl, #0
   d9a3c:	e7ab      	b.n	d9996 <__gethex+0x1ee>
   d9a3e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9a42:	42a8      	cmp	r0, r5
   d9a44:	dd6d      	ble.n	d9b22 <__gethex+0x37a>
   d9a46:	1b45      	subs	r5, r0, r5
   d9a48:	42ae      	cmp	r6, r5
   d9a4a:	dc31      	bgt.n	d9ab0 <__gethex+0x308>
   d9a4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9a50:	2b02      	cmp	r3, #2
   d9a52:	d023      	beq.n	d9a9c <__gethex+0x2f4>
   d9a54:	2b03      	cmp	r3, #3
   d9a56:	d025      	beq.n	d9aa4 <__gethex+0x2fc>
   d9a58:	2b01      	cmp	r3, #1
   d9a5a:	d115      	bne.n	d9a88 <__gethex+0x2e0>
   d9a5c:	42ae      	cmp	r6, r5
   d9a5e:	d113      	bne.n	d9a88 <__gethex+0x2e0>
   d9a60:	2e01      	cmp	r6, #1
   d9a62:	d10b      	bne.n	d9a7c <__gethex+0x2d4>
   d9a64:	9a04      	ldr	r2, [sp, #16]
   d9a66:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9a6a:	6013      	str	r3, [r2, #0]
   d9a6c:	2301      	movs	r3, #1
   d9a6e:	6123      	str	r3, [r4, #16]
   d9a70:	f8c9 3000 	str.w	r3, [r9]
   d9a74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9a76:	2762      	movs	r7, #98	; 0x62
   d9a78:	601c      	str	r4, [r3, #0]
   d9a7a:	e72a      	b.n	d98d2 <__gethex+0x12a>
   d9a7c:	1e71      	subs	r1, r6, #1
   d9a7e:	4620      	mov	r0, r4
   d9a80:	f000 fdbc 	bl	da5fc <__any_on>
   d9a84:	2800      	cmp	r0, #0
   d9a86:	d1ed      	bne.n	d9a64 <__gethex+0x2bc>
   d9a88:	ee18 0a10 	vmov	r0, s16
   d9a8c:	4621      	mov	r1, r4
   d9a8e:	f000 f9ca 	bl	d9e26 <_Bfree>
   d9a92:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9a94:	2300      	movs	r3, #0
   d9a96:	6013      	str	r3, [r2, #0]
   d9a98:	2750      	movs	r7, #80	; 0x50
   d9a9a:	e71a      	b.n	d98d2 <__gethex+0x12a>
   d9a9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9a9e:	2b00      	cmp	r3, #0
   d9aa0:	d1f2      	bne.n	d9a88 <__gethex+0x2e0>
   d9aa2:	e7df      	b.n	d9a64 <__gethex+0x2bc>
   d9aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9aa6:	2b00      	cmp	r3, #0
   d9aa8:	d1dc      	bne.n	d9a64 <__gethex+0x2bc>
   d9aaa:	e7ed      	b.n	d9a88 <__gethex+0x2e0>
   d9aac:	000dac24 	.word	0x000dac24
   d9ab0:	1e6f      	subs	r7, r5, #1
   d9ab2:	f1ba 0f00 	cmp.w	sl, #0
   d9ab6:	d131      	bne.n	d9b1c <__gethex+0x374>
   d9ab8:	b127      	cbz	r7, d9ac4 <__gethex+0x31c>
   d9aba:	4639      	mov	r1, r7
   d9abc:	4620      	mov	r0, r4
   d9abe:	f000 fd9d 	bl	da5fc <__any_on>
   d9ac2:	4682      	mov	sl, r0
   d9ac4:	117b      	asrs	r3, r7, #5
   d9ac6:	2101      	movs	r1, #1
   d9ac8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9acc:	f007 071f 	and.w	r7, r7, #31
   d9ad0:	fa01 f707 	lsl.w	r7, r1, r7
   d9ad4:	421f      	tst	r7, r3
   d9ad6:	4629      	mov	r1, r5
   d9ad8:	4620      	mov	r0, r4
   d9ada:	bf18      	it	ne
   d9adc:	f04a 0a02 	orrne.w	sl, sl, #2
   d9ae0:	1b76      	subs	r6, r6, r5
   d9ae2:	f7ff fdf9 	bl	d96d8 <rshift>
   d9ae6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9aea:	2702      	movs	r7, #2
   d9aec:	f1ba 0f00 	cmp.w	sl, #0
   d9af0:	d048      	beq.n	d9b84 <__gethex+0x3dc>
   d9af2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9af6:	2b02      	cmp	r3, #2
   d9af8:	d015      	beq.n	d9b26 <__gethex+0x37e>
   d9afa:	2b03      	cmp	r3, #3
   d9afc:	d017      	beq.n	d9b2e <__gethex+0x386>
   d9afe:	2b01      	cmp	r3, #1
   d9b00:	d109      	bne.n	d9b16 <__gethex+0x36e>
   d9b02:	f01a 0f02 	tst.w	sl, #2
   d9b06:	d006      	beq.n	d9b16 <__gethex+0x36e>
   d9b08:	f8d9 0000 	ldr.w	r0, [r9]
   d9b0c:	ea4a 0a00 	orr.w	sl, sl, r0
   d9b10:	f01a 0f01 	tst.w	sl, #1
   d9b14:	d10e      	bne.n	d9b34 <__gethex+0x38c>
   d9b16:	f047 0710 	orr.w	r7, r7, #16
   d9b1a:	e033      	b.n	d9b84 <__gethex+0x3dc>
   d9b1c:	f04f 0a01 	mov.w	sl, #1
   d9b20:	e7d0      	b.n	d9ac4 <__gethex+0x31c>
   d9b22:	2701      	movs	r7, #1
   d9b24:	e7e2      	b.n	d9aec <__gethex+0x344>
   d9b26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9b28:	f1c3 0301 	rsb	r3, r3, #1
   d9b2c:	9315      	str	r3, [sp, #84]	; 0x54
   d9b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9b30:	2b00      	cmp	r3, #0
   d9b32:	d0f0      	beq.n	d9b16 <__gethex+0x36e>
   d9b34:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9b38:	f104 0314 	add.w	r3, r4, #20
   d9b3c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d9b40:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d9b44:	f04f 0c00 	mov.w	ip, #0
   d9b48:	4618      	mov	r0, r3
   d9b4a:	f853 2b04 	ldr.w	r2, [r3], #4
   d9b4e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d9b52:	d01c      	beq.n	d9b8e <__gethex+0x3e6>
   d9b54:	3201      	adds	r2, #1
   d9b56:	6002      	str	r2, [r0, #0]
   d9b58:	2f02      	cmp	r7, #2
   d9b5a:	f104 0314 	add.w	r3, r4, #20
   d9b5e:	d13a      	bne.n	d9bd6 <__gethex+0x42e>
   d9b60:	f8d8 2000 	ldr.w	r2, [r8]
   d9b64:	3a01      	subs	r2, #1
   d9b66:	42b2      	cmp	r2, r6
   d9b68:	d10a      	bne.n	d9b80 <__gethex+0x3d8>
   d9b6a:	1171      	asrs	r1, r6, #5
   d9b6c:	2201      	movs	r2, #1
   d9b6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d9b72:	f006 061f 	and.w	r6, r6, #31
   d9b76:	fa02 f606 	lsl.w	r6, r2, r6
   d9b7a:	421e      	tst	r6, r3
   d9b7c:	bf18      	it	ne
   d9b7e:	4617      	movne	r7, r2
   d9b80:	f047 0720 	orr.w	r7, r7, #32
   d9b84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9b86:	601c      	str	r4, [r3, #0]
   d9b88:	9b04      	ldr	r3, [sp, #16]
   d9b8a:	601d      	str	r5, [r3, #0]
   d9b8c:	e6a1      	b.n	d98d2 <__gethex+0x12a>
   d9b8e:	4299      	cmp	r1, r3
   d9b90:	f843 cc04 	str.w	ip, [r3, #-4]
   d9b94:	d8d8      	bhi.n	d9b48 <__gethex+0x3a0>
   d9b96:	68a3      	ldr	r3, [r4, #8]
   d9b98:	4599      	cmp	r9, r3
   d9b9a:	db14      	blt.n	d9bc6 <__gethex+0x41e>
   d9b9c:	6861      	ldr	r1, [r4, #4]
   d9b9e:	ee18 0a10 	vmov	r0, s16
   d9ba2:	3101      	adds	r1, #1
   d9ba4:	f000 f90b 	bl	d9dbe <_Balloc>
   d9ba8:	6922      	ldr	r2, [r4, #16]
   d9baa:	3202      	adds	r2, #2
   d9bac:	f104 010c 	add.w	r1, r4, #12
   d9bb0:	4682      	mov	sl, r0
   d9bb2:	0092      	lsls	r2, r2, #2
   d9bb4:	300c      	adds	r0, #12
   d9bb6:	f7fe fd80 	bl	d86ba <memcpy>
   d9bba:	4621      	mov	r1, r4
   d9bbc:	ee18 0a10 	vmov	r0, s16
   d9bc0:	f000 f931 	bl	d9e26 <_Bfree>
   d9bc4:	4654      	mov	r4, sl
   d9bc6:	6923      	ldr	r3, [r4, #16]
   d9bc8:	1c5a      	adds	r2, r3, #1
   d9bca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d9bce:	6122      	str	r2, [r4, #16]
   d9bd0:	2201      	movs	r2, #1
   d9bd2:	615a      	str	r2, [r3, #20]
   d9bd4:	e7c0      	b.n	d9b58 <__gethex+0x3b0>
   d9bd6:	6922      	ldr	r2, [r4, #16]
   d9bd8:	454a      	cmp	r2, r9
   d9bda:	dd0b      	ble.n	d9bf4 <__gethex+0x44c>
   d9bdc:	2101      	movs	r1, #1
   d9bde:	4620      	mov	r0, r4
   d9be0:	f7ff fd7a 	bl	d96d8 <rshift>
   d9be4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9be8:	3501      	adds	r5, #1
   d9bea:	42ab      	cmp	r3, r5
   d9bec:	f6ff aed7 	blt.w	d999e <__gethex+0x1f6>
   d9bf0:	2701      	movs	r7, #1
   d9bf2:	e7c5      	b.n	d9b80 <__gethex+0x3d8>
   d9bf4:	f016 061f 	ands.w	r6, r6, #31
   d9bf8:	d0fa      	beq.n	d9bf0 <__gethex+0x448>
   d9bfa:	449b      	add	fp, r3
   d9bfc:	f1c6 0620 	rsb	r6, r6, #32
   d9c00:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d9c04:	f000 f9a2 	bl	d9f4c <__hi0bits>
   d9c08:	42b0      	cmp	r0, r6
   d9c0a:	dbe7      	blt.n	d9bdc <__gethex+0x434>
   d9c0c:	e7f0      	b.n	d9bf0 <__gethex+0x448>
   d9c0e:	bf00      	nop

000d9c10 <L_shift>:
   d9c10:	f1c2 0208 	rsb	r2, r2, #8
   d9c14:	0092      	lsls	r2, r2, #2
   d9c16:	b570      	push	{r4, r5, r6, lr}
   d9c18:	f1c2 0620 	rsb	r6, r2, #32
   d9c1c:	6843      	ldr	r3, [r0, #4]
   d9c1e:	6804      	ldr	r4, [r0, #0]
   d9c20:	fa03 f506 	lsl.w	r5, r3, r6
   d9c24:	432c      	orrs	r4, r5
   d9c26:	40d3      	lsrs	r3, r2
   d9c28:	6004      	str	r4, [r0, #0]
   d9c2a:	f840 3f04 	str.w	r3, [r0, #4]!
   d9c2e:	4288      	cmp	r0, r1
   d9c30:	d3f4      	bcc.n	d9c1c <L_shift+0xc>
   d9c32:	bd70      	pop	{r4, r5, r6, pc}

000d9c34 <__match>:
   d9c34:	b530      	push	{r4, r5, lr}
   d9c36:	6803      	ldr	r3, [r0, #0]
   d9c38:	3301      	adds	r3, #1
   d9c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9c3e:	b914      	cbnz	r4, d9c46 <__match+0x12>
   d9c40:	6003      	str	r3, [r0, #0]
   d9c42:	2001      	movs	r0, #1
   d9c44:	bd30      	pop	{r4, r5, pc}
   d9c46:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9c4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9c4e:	2d19      	cmp	r5, #25
   d9c50:	bf98      	it	ls
   d9c52:	3220      	addls	r2, #32
   d9c54:	42a2      	cmp	r2, r4
   d9c56:	d0f0      	beq.n	d9c3a <__match+0x6>
   d9c58:	2000      	movs	r0, #0
   d9c5a:	e7f3      	b.n	d9c44 <__match+0x10>

000d9c5c <__hexnan>:
   d9c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c60:	680b      	ldr	r3, [r1, #0]
   d9c62:	6801      	ldr	r1, [r0, #0]
   d9c64:	115e      	asrs	r6, r3, #5
   d9c66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9c6a:	f013 031f 	ands.w	r3, r3, #31
   d9c6e:	b087      	sub	sp, #28
   d9c70:	bf18      	it	ne
   d9c72:	3604      	addne	r6, #4
   d9c74:	2500      	movs	r5, #0
   d9c76:	1f37      	subs	r7, r6, #4
   d9c78:	4682      	mov	sl, r0
   d9c7a:	4690      	mov	r8, r2
   d9c7c:	9301      	str	r3, [sp, #4]
   d9c7e:	f846 5c04 	str.w	r5, [r6, #-4]
   d9c82:	46b9      	mov	r9, r7
   d9c84:	463c      	mov	r4, r7
   d9c86:	9502      	str	r5, [sp, #8]
   d9c88:	46ab      	mov	fp, r5
   d9c8a:	784a      	ldrb	r2, [r1, #1]
   d9c8c:	1c4b      	adds	r3, r1, #1
   d9c8e:	9303      	str	r3, [sp, #12]
   d9c90:	b342      	cbz	r2, d9ce4 <__hexnan+0x88>
   d9c92:	4610      	mov	r0, r2
   d9c94:	9105      	str	r1, [sp, #20]
   d9c96:	9204      	str	r2, [sp, #16]
   d9c98:	f7ff fd70 	bl	d977c <__hexdig_fun>
   d9c9c:	2800      	cmp	r0, #0
   d9c9e:	d14f      	bne.n	d9d40 <__hexnan+0xe4>
   d9ca0:	9a04      	ldr	r2, [sp, #16]
   d9ca2:	9905      	ldr	r1, [sp, #20]
   d9ca4:	2a20      	cmp	r2, #32
   d9ca6:	d818      	bhi.n	d9cda <__hexnan+0x7e>
   d9ca8:	9b02      	ldr	r3, [sp, #8]
   d9caa:	459b      	cmp	fp, r3
   d9cac:	dd13      	ble.n	d9cd6 <__hexnan+0x7a>
   d9cae:	454c      	cmp	r4, r9
   d9cb0:	d206      	bcs.n	d9cc0 <__hexnan+0x64>
   d9cb2:	2d07      	cmp	r5, #7
   d9cb4:	dc04      	bgt.n	d9cc0 <__hexnan+0x64>
   d9cb6:	462a      	mov	r2, r5
   d9cb8:	4649      	mov	r1, r9
   d9cba:	4620      	mov	r0, r4
   d9cbc:	f7ff ffa8 	bl	d9c10 <L_shift>
   d9cc0:	4544      	cmp	r4, r8
   d9cc2:	d950      	bls.n	d9d66 <__hexnan+0x10a>
   d9cc4:	2300      	movs	r3, #0
   d9cc6:	f1a4 0904 	sub.w	r9, r4, #4
   d9cca:	f844 3c04 	str.w	r3, [r4, #-4]
   d9cce:	f8cd b008 	str.w	fp, [sp, #8]
   d9cd2:	464c      	mov	r4, r9
   d9cd4:	461d      	mov	r5, r3
   d9cd6:	9903      	ldr	r1, [sp, #12]
   d9cd8:	e7d7      	b.n	d9c8a <__hexnan+0x2e>
   d9cda:	2a29      	cmp	r2, #41	; 0x29
   d9cdc:	d156      	bne.n	d9d8c <__hexnan+0x130>
   d9cde:	3102      	adds	r1, #2
   d9ce0:	f8ca 1000 	str.w	r1, [sl]
   d9ce4:	f1bb 0f00 	cmp.w	fp, #0
   d9ce8:	d050      	beq.n	d9d8c <__hexnan+0x130>
   d9cea:	454c      	cmp	r4, r9
   d9cec:	d206      	bcs.n	d9cfc <__hexnan+0xa0>
   d9cee:	2d07      	cmp	r5, #7
   d9cf0:	dc04      	bgt.n	d9cfc <__hexnan+0xa0>
   d9cf2:	462a      	mov	r2, r5
   d9cf4:	4649      	mov	r1, r9
   d9cf6:	4620      	mov	r0, r4
   d9cf8:	f7ff ff8a 	bl	d9c10 <L_shift>
   d9cfc:	4544      	cmp	r4, r8
   d9cfe:	d934      	bls.n	d9d6a <__hexnan+0x10e>
   d9d00:	f1a8 0204 	sub.w	r2, r8, #4
   d9d04:	4623      	mov	r3, r4
   d9d06:	f853 1b04 	ldr.w	r1, [r3], #4
   d9d0a:	f842 1f04 	str.w	r1, [r2, #4]!
   d9d0e:	429f      	cmp	r7, r3
   d9d10:	d2f9      	bcs.n	d9d06 <__hexnan+0xaa>
   d9d12:	1b3b      	subs	r3, r7, r4
   d9d14:	f023 0303 	bic.w	r3, r3, #3
   d9d18:	3304      	adds	r3, #4
   d9d1a:	3401      	adds	r4, #1
   d9d1c:	3e03      	subs	r6, #3
   d9d1e:	42b4      	cmp	r4, r6
   d9d20:	bf88      	it	hi
   d9d22:	2304      	movhi	r3, #4
   d9d24:	4443      	add	r3, r8
   d9d26:	2200      	movs	r2, #0
   d9d28:	f843 2b04 	str.w	r2, [r3], #4
   d9d2c:	429f      	cmp	r7, r3
   d9d2e:	d2fb      	bcs.n	d9d28 <__hexnan+0xcc>
   d9d30:	683b      	ldr	r3, [r7, #0]
   d9d32:	b91b      	cbnz	r3, d9d3c <__hexnan+0xe0>
   d9d34:	4547      	cmp	r7, r8
   d9d36:	d127      	bne.n	d9d88 <__hexnan+0x12c>
   d9d38:	2301      	movs	r3, #1
   d9d3a:	603b      	str	r3, [r7, #0]
   d9d3c:	2005      	movs	r0, #5
   d9d3e:	e026      	b.n	d9d8e <__hexnan+0x132>
   d9d40:	3501      	adds	r5, #1
   d9d42:	2d08      	cmp	r5, #8
   d9d44:	f10b 0b01 	add.w	fp, fp, #1
   d9d48:	dd06      	ble.n	d9d58 <__hexnan+0xfc>
   d9d4a:	4544      	cmp	r4, r8
   d9d4c:	d9c3      	bls.n	d9cd6 <__hexnan+0x7a>
   d9d4e:	2300      	movs	r3, #0
   d9d50:	f844 3c04 	str.w	r3, [r4, #-4]
   d9d54:	2501      	movs	r5, #1
   d9d56:	3c04      	subs	r4, #4
   d9d58:	6822      	ldr	r2, [r4, #0]
   d9d5a:	f000 000f 	and.w	r0, r0, #15
   d9d5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d9d62:	6022      	str	r2, [r4, #0]
   d9d64:	e7b7      	b.n	d9cd6 <__hexnan+0x7a>
   d9d66:	2508      	movs	r5, #8
   d9d68:	e7b5      	b.n	d9cd6 <__hexnan+0x7a>
   d9d6a:	9b01      	ldr	r3, [sp, #4]
   d9d6c:	2b00      	cmp	r3, #0
   d9d6e:	d0df      	beq.n	d9d30 <__hexnan+0xd4>
   d9d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9d74:	f1c3 0320 	rsb	r3, r3, #32
   d9d78:	fa22 f303 	lsr.w	r3, r2, r3
   d9d7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9d80:	401a      	ands	r2, r3
   d9d82:	f846 2c04 	str.w	r2, [r6, #-4]
   d9d86:	e7d3      	b.n	d9d30 <__hexnan+0xd4>
   d9d88:	3f04      	subs	r7, #4
   d9d8a:	e7d1      	b.n	d9d30 <__hexnan+0xd4>
   d9d8c:	2004      	movs	r0, #4
   d9d8e:	b007      	add	sp, #28
   d9d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9d94 <__retarget_lock_acquire_recursive>:
   d9d94:	4770      	bx	lr

000d9d96 <__retarget_lock_release>:
   d9d96:	4770      	bx	lr

000d9d98 <__retarget_lock_release_recursive>:
   d9d98:	4770      	bx	lr

000d9d9a <__ascii_mbtowc>:
   d9d9a:	b082      	sub	sp, #8
   d9d9c:	b901      	cbnz	r1, d9da0 <__ascii_mbtowc+0x6>
   d9d9e:	a901      	add	r1, sp, #4
   d9da0:	b142      	cbz	r2, d9db4 <__ascii_mbtowc+0x1a>
   d9da2:	b14b      	cbz	r3, d9db8 <__ascii_mbtowc+0x1e>
   d9da4:	7813      	ldrb	r3, [r2, #0]
   d9da6:	600b      	str	r3, [r1, #0]
   d9da8:	7812      	ldrb	r2, [r2, #0]
   d9daa:	1e10      	subs	r0, r2, #0
   d9dac:	bf18      	it	ne
   d9dae:	2001      	movne	r0, #1
   d9db0:	b002      	add	sp, #8
   d9db2:	4770      	bx	lr
   d9db4:	4610      	mov	r0, r2
   d9db6:	e7fb      	b.n	d9db0 <__ascii_mbtowc+0x16>
   d9db8:	f06f 0001 	mvn.w	r0, #1
   d9dbc:	e7f8      	b.n	d9db0 <__ascii_mbtowc+0x16>

000d9dbe <_Balloc>:
   d9dbe:	b570      	push	{r4, r5, r6, lr}
   d9dc0:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9dc2:	4604      	mov	r4, r0
   d9dc4:	460d      	mov	r5, r1
   d9dc6:	b93e      	cbnz	r6, d9dd8 <_Balloc+0x1a>
   d9dc8:	2010      	movs	r0, #16
   d9dca:	f7fb fc81 	bl	d56d0 <malloc>
   d9dce:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9dd2:	6260      	str	r0, [r4, #36]	; 0x24
   d9dd4:	6006      	str	r6, [r0, #0]
   d9dd6:	60c6      	str	r6, [r0, #12]
   d9dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d9dda:	68f3      	ldr	r3, [r6, #12]
   d9ddc:	b183      	cbz	r3, d9e00 <_Balloc+0x42>
   d9dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9de0:	68db      	ldr	r3, [r3, #12]
   d9de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d9de6:	b9b8      	cbnz	r0, d9e18 <_Balloc+0x5a>
   d9de8:	2101      	movs	r1, #1
   d9dea:	fa01 f605 	lsl.w	r6, r1, r5
   d9dee:	1d72      	adds	r2, r6, #5
   d9df0:	0092      	lsls	r2, r2, #2
   d9df2:	4620      	mov	r0, r4
   d9df4:	f000 fc23 	bl	da63e <_calloc_r>
   d9df8:	b160      	cbz	r0, d9e14 <_Balloc+0x56>
   d9dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d9dfe:	e00e      	b.n	d9e1e <_Balloc+0x60>
   d9e00:	2221      	movs	r2, #33	; 0x21
   d9e02:	2104      	movs	r1, #4
   d9e04:	4620      	mov	r0, r4
   d9e06:	f000 fc1a 	bl	da63e <_calloc_r>
   d9e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9e0c:	60f0      	str	r0, [r6, #12]
   d9e0e:	68db      	ldr	r3, [r3, #12]
   d9e10:	2b00      	cmp	r3, #0
   d9e12:	d1e4      	bne.n	d9dde <_Balloc+0x20>
   d9e14:	2000      	movs	r0, #0
   d9e16:	bd70      	pop	{r4, r5, r6, pc}
   d9e18:	6802      	ldr	r2, [r0, #0]
   d9e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d9e1e:	2300      	movs	r3, #0
   d9e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d9e24:	e7f7      	b.n	d9e16 <_Balloc+0x58>

000d9e26 <_Bfree>:
   d9e26:	b570      	push	{r4, r5, r6, lr}
   d9e28:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9e2a:	4605      	mov	r5, r0
   d9e2c:	460c      	mov	r4, r1
   d9e2e:	b93e      	cbnz	r6, d9e40 <_Bfree+0x1a>
   d9e30:	2010      	movs	r0, #16
   d9e32:	f7fb fc4d 	bl	d56d0 <malloc>
   d9e36:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9e3a:	6268      	str	r0, [r5, #36]	; 0x24
   d9e3c:	6006      	str	r6, [r0, #0]
   d9e3e:	60c6      	str	r6, [r0, #12]
   d9e40:	b13c      	cbz	r4, d9e52 <_Bfree+0x2c>
   d9e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d9e44:	6862      	ldr	r2, [r4, #4]
   d9e46:	68db      	ldr	r3, [r3, #12]
   d9e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9e4c:	6021      	str	r1, [r4, #0]
   d9e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d9e52:	bd70      	pop	{r4, r5, r6, pc}

000d9e54 <__multadd>:
   d9e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9e58:	690e      	ldr	r6, [r1, #16]
   d9e5a:	4607      	mov	r7, r0
   d9e5c:	4698      	mov	r8, r3
   d9e5e:	460c      	mov	r4, r1
   d9e60:	f101 0014 	add.w	r0, r1, #20
   d9e64:	2300      	movs	r3, #0
   d9e66:	6805      	ldr	r5, [r0, #0]
   d9e68:	b2a9      	uxth	r1, r5
   d9e6a:	fb02 8101 	mla	r1, r2, r1, r8
   d9e6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d9e72:	0c2d      	lsrs	r5, r5, #16
   d9e74:	fb02 c505 	mla	r5, r2, r5, ip
   d9e78:	b289      	uxth	r1, r1
   d9e7a:	3301      	adds	r3, #1
   d9e7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d9e80:	429e      	cmp	r6, r3
   d9e82:	f840 1b04 	str.w	r1, [r0], #4
   d9e86:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d9e8a:	dcec      	bgt.n	d9e66 <__multadd+0x12>
   d9e8c:	f1b8 0f00 	cmp.w	r8, #0
   d9e90:	d01b      	beq.n	d9eca <__multadd+0x76>
   d9e92:	68a3      	ldr	r3, [r4, #8]
   d9e94:	42b3      	cmp	r3, r6
   d9e96:	dc12      	bgt.n	d9ebe <__multadd+0x6a>
   d9e98:	6861      	ldr	r1, [r4, #4]
   d9e9a:	4638      	mov	r0, r7
   d9e9c:	3101      	adds	r1, #1
   d9e9e:	f7ff ff8e 	bl	d9dbe <_Balloc>
   d9ea2:	6922      	ldr	r2, [r4, #16]
   d9ea4:	3202      	adds	r2, #2
   d9ea6:	f104 010c 	add.w	r1, r4, #12
   d9eaa:	4605      	mov	r5, r0
   d9eac:	0092      	lsls	r2, r2, #2
   d9eae:	300c      	adds	r0, #12
   d9eb0:	f7fe fc03 	bl	d86ba <memcpy>
   d9eb4:	4621      	mov	r1, r4
   d9eb6:	4638      	mov	r0, r7
   d9eb8:	f7ff ffb5 	bl	d9e26 <_Bfree>
   d9ebc:	462c      	mov	r4, r5
   d9ebe:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d9ec2:	3601      	adds	r6, #1
   d9ec4:	f8c3 8014 	str.w	r8, [r3, #20]
   d9ec8:	6126      	str	r6, [r4, #16]
   d9eca:	4620      	mov	r0, r4
   d9ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9ed0 <__s2b>:
   d9ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9ed4:	460c      	mov	r4, r1
   d9ed6:	4615      	mov	r5, r2
   d9ed8:	461f      	mov	r7, r3
   d9eda:	2209      	movs	r2, #9
   d9edc:	3308      	adds	r3, #8
   d9ede:	4606      	mov	r6, r0
   d9ee0:	fb93 f3f2 	sdiv	r3, r3, r2
   d9ee4:	2100      	movs	r1, #0
   d9ee6:	2201      	movs	r2, #1
   d9ee8:	429a      	cmp	r2, r3
   d9eea:	db20      	blt.n	d9f2e <__s2b+0x5e>
   d9eec:	4630      	mov	r0, r6
   d9eee:	f7ff ff66 	bl	d9dbe <_Balloc>
   d9ef2:	9b08      	ldr	r3, [sp, #32]
   d9ef4:	6143      	str	r3, [r0, #20]
   d9ef6:	2d09      	cmp	r5, #9
   d9ef8:	f04f 0301 	mov.w	r3, #1
   d9efc:	6103      	str	r3, [r0, #16]
   d9efe:	dd19      	ble.n	d9f34 <__s2b+0x64>
   d9f00:	f104 0909 	add.w	r9, r4, #9
   d9f04:	46c8      	mov	r8, r9
   d9f06:	442c      	add	r4, r5
   d9f08:	f818 3b01 	ldrb.w	r3, [r8], #1
   d9f0c:	4601      	mov	r1, r0
   d9f0e:	3b30      	subs	r3, #48	; 0x30
   d9f10:	220a      	movs	r2, #10
   d9f12:	4630      	mov	r0, r6
   d9f14:	f7ff ff9e 	bl	d9e54 <__multadd>
   d9f18:	45a0      	cmp	r8, r4
   d9f1a:	d1f5      	bne.n	d9f08 <__s2b+0x38>
   d9f1c:	f1a5 0408 	sub.w	r4, r5, #8
   d9f20:	444c      	add	r4, r9
   d9f22:	1b2d      	subs	r5, r5, r4
   d9f24:	1963      	adds	r3, r4, r5
   d9f26:	42bb      	cmp	r3, r7
   d9f28:	db07      	blt.n	d9f3a <__s2b+0x6a>
   d9f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9f2e:	0052      	lsls	r2, r2, #1
   d9f30:	3101      	adds	r1, #1
   d9f32:	e7d9      	b.n	d9ee8 <__s2b+0x18>
   d9f34:	340a      	adds	r4, #10
   d9f36:	2509      	movs	r5, #9
   d9f38:	e7f3      	b.n	d9f22 <__s2b+0x52>
   d9f3a:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9f3e:	4601      	mov	r1, r0
   d9f40:	3b30      	subs	r3, #48	; 0x30
   d9f42:	220a      	movs	r2, #10
   d9f44:	4630      	mov	r0, r6
   d9f46:	f7ff ff85 	bl	d9e54 <__multadd>
   d9f4a:	e7eb      	b.n	d9f24 <__s2b+0x54>

000d9f4c <__hi0bits>:
   d9f4c:	0c03      	lsrs	r3, r0, #16
   d9f4e:	041b      	lsls	r3, r3, #16
   d9f50:	b9d3      	cbnz	r3, d9f88 <__hi0bits+0x3c>
   d9f52:	0400      	lsls	r0, r0, #16
   d9f54:	2310      	movs	r3, #16
   d9f56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9f5a:	bf04      	itt	eq
   d9f5c:	0200      	lsleq	r0, r0, #8
   d9f5e:	3308      	addeq	r3, #8
   d9f60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9f64:	bf04      	itt	eq
   d9f66:	0100      	lsleq	r0, r0, #4
   d9f68:	3304      	addeq	r3, #4
   d9f6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9f6e:	bf04      	itt	eq
   d9f70:	0080      	lsleq	r0, r0, #2
   d9f72:	3302      	addeq	r3, #2
   d9f74:	2800      	cmp	r0, #0
   d9f76:	db05      	blt.n	d9f84 <__hi0bits+0x38>
   d9f78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d9f7c:	f103 0301 	add.w	r3, r3, #1
   d9f80:	bf08      	it	eq
   d9f82:	2320      	moveq	r3, #32
   d9f84:	4618      	mov	r0, r3
   d9f86:	4770      	bx	lr
   d9f88:	2300      	movs	r3, #0
   d9f8a:	e7e4      	b.n	d9f56 <__hi0bits+0xa>

000d9f8c <__lo0bits>:
   d9f8c:	6803      	ldr	r3, [r0, #0]
   d9f8e:	f013 0207 	ands.w	r2, r3, #7
   d9f92:	4601      	mov	r1, r0
   d9f94:	d00b      	beq.n	d9fae <__lo0bits+0x22>
   d9f96:	07da      	lsls	r2, r3, #31
   d9f98:	d424      	bmi.n	d9fe4 <__lo0bits+0x58>
   d9f9a:	0798      	lsls	r0, r3, #30
   d9f9c:	bf49      	itett	mi
   d9f9e:	085b      	lsrmi	r3, r3, #1
   d9fa0:	089b      	lsrpl	r3, r3, #2
   d9fa2:	2001      	movmi	r0, #1
   d9fa4:	600b      	strmi	r3, [r1, #0]
   d9fa6:	bf5c      	itt	pl
   d9fa8:	600b      	strpl	r3, [r1, #0]
   d9faa:	2002      	movpl	r0, #2
   d9fac:	4770      	bx	lr
   d9fae:	b298      	uxth	r0, r3
   d9fb0:	b9b0      	cbnz	r0, d9fe0 <__lo0bits+0x54>
   d9fb2:	0c1b      	lsrs	r3, r3, #16
   d9fb4:	2010      	movs	r0, #16
   d9fb6:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9fba:	bf04      	itt	eq
   d9fbc:	0a1b      	lsreq	r3, r3, #8
   d9fbe:	3008      	addeq	r0, #8
   d9fc0:	071a      	lsls	r2, r3, #28
   d9fc2:	bf04      	itt	eq
   d9fc4:	091b      	lsreq	r3, r3, #4
   d9fc6:	3004      	addeq	r0, #4
   d9fc8:	079a      	lsls	r2, r3, #30
   d9fca:	bf04      	itt	eq
   d9fcc:	089b      	lsreq	r3, r3, #2
   d9fce:	3002      	addeq	r0, #2
   d9fd0:	07da      	lsls	r2, r3, #31
   d9fd2:	d403      	bmi.n	d9fdc <__lo0bits+0x50>
   d9fd4:	085b      	lsrs	r3, r3, #1
   d9fd6:	f100 0001 	add.w	r0, r0, #1
   d9fda:	d005      	beq.n	d9fe8 <__lo0bits+0x5c>
   d9fdc:	600b      	str	r3, [r1, #0]
   d9fde:	4770      	bx	lr
   d9fe0:	4610      	mov	r0, r2
   d9fe2:	e7e8      	b.n	d9fb6 <__lo0bits+0x2a>
   d9fe4:	2000      	movs	r0, #0
   d9fe6:	4770      	bx	lr
   d9fe8:	2020      	movs	r0, #32
   d9fea:	4770      	bx	lr

000d9fec <__i2b>:
   d9fec:	b510      	push	{r4, lr}
   d9fee:	460c      	mov	r4, r1
   d9ff0:	2101      	movs	r1, #1
   d9ff2:	f7ff fee4 	bl	d9dbe <_Balloc>
   d9ff6:	2201      	movs	r2, #1
   d9ff8:	6144      	str	r4, [r0, #20]
   d9ffa:	6102      	str	r2, [r0, #16]
   d9ffc:	bd10      	pop	{r4, pc}

000d9ffe <__multiply>:
   d9ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da002:	4615      	mov	r5, r2
   da004:	690a      	ldr	r2, [r1, #16]
   da006:	692b      	ldr	r3, [r5, #16]
   da008:	429a      	cmp	r2, r3
   da00a:	bfb8      	it	lt
   da00c:	460b      	movlt	r3, r1
   da00e:	460c      	mov	r4, r1
   da010:	bfbc      	itt	lt
   da012:	462c      	movlt	r4, r5
   da014:	461d      	movlt	r5, r3
   da016:	6927      	ldr	r7, [r4, #16]
   da018:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da01c:	68a3      	ldr	r3, [r4, #8]
   da01e:	6861      	ldr	r1, [r4, #4]
   da020:	eb07 0609 	add.w	r6, r7, r9
   da024:	42b3      	cmp	r3, r6
   da026:	bfb8      	it	lt
   da028:	3101      	addlt	r1, #1
   da02a:	b085      	sub	sp, #20
   da02c:	f7ff fec7 	bl	d9dbe <_Balloc>
   da030:	f100 0114 	add.w	r1, r0, #20
   da034:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da038:	460b      	mov	r3, r1
   da03a:	2200      	movs	r2, #0
   da03c:	4543      	cmp	r3, r8
   da03e:	d31d      	bcc.n	da07c <__multiply+0x7e>
   da040:	f104 0314 	add.w	r3, r4, #20
   da044:	f105 0214 	add.w	r2, r5, #20
   da048:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da04c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da050:	9302      	str	r3, [sp, #8]
   da052:	1b3b      	subs	r3, r7, r4
   da054:	3b15      	subs	r3, #21
   da056:	f023 0303 	bic.w	r3, r3, #3
   da05a:	3304      	adds	r3, #4
   da05c:	f104 0515 	add.w	r5, r4, #21
   da060:	42af      	cmp	r7, r5
   da062:	bf38      	it	cc
   da064:	2304      	movcc	r3, #4
   da066:	9301      	str	r3, [sp, #4]
   da068:	9b02      	ldr	r3, [sp, #8]
   da06a:	9203      	str	r2, [sp, #12]
   da06c:	4293      	cmp	r3, r2
   da06e:	d808      	bhi.n	da082 <__multiply+0x84>
   da070:	2e00      	cmp	r6, #0
   da072:	dc5a      	bgt.n	da12a <__multiply+0x12c>
   da074:	6106      	str	r6, [r0, #16]
   da076:	b005      	add	sp, #20
   da078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da07c:	f843 2b04 	str.w	r2, [r3], #4
   da080:	e7dc      	b.n	da03c <__multiply+0x3e>
   da082:	f8b2 a000 	ldrh.w	sl, [r2]
   da086:	f1ba 0f00 	cmp.w	sl, #0
   da08a:	d024      	beq.n	da0d6 <__multiply+0xd8>
   da08c:	f104 0e14 	add.w	lr, r4, #20
   da090:	4689      	mov	r9, r1
   da092:	f04f 0c00 	mov.w	ip, #0
   da096:	f85e 5b04 	ldr.w	r5, [lr], #4
   da09a:	f8d9 b000 	ldr.w	fp, [r9]
   da09e:	b2ab      	uxth	r3, r5
   da0a0:	fa1f fb8b 	uxth.w	fp, fp
   da0a4:	fb0a b303 	mla	r3, sl, r3, fp
   da0a8:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da0ac:	f8d9 5000 	ldr.w	r5, [r9]
   da0b0:	4463      	add	r3, ip
   da0b2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da0b6:	fb0a c50b 	mla	r5, sl, fp, ip
   da0ba:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da0be:	b29b      	uxth	r3, r3
   da0c0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da0c4:	4577      	cmp	r7, lr
   da0c6:	f849 3b04 	str.w	r3, [r9], #4
   da0ca:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da0ce:	d8e2      	bhi.n	da096 <__multiply+0x98>
   da0d0:	9b01      	ldr	r3, [sp, #4]
   da0d2:	f841 c003 	str.w	ip, [r1, r3]
   da0d6:	9b03      	ldr	r3, [sp, #12]
   da0d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da0dc:	3204      	adds	r2, #4
   da0de:	f1b9 0f00 	cmp.w	r9, #0
   da0e2:	d020      	beq.n	da126 <__multiply+0x128>
   da0e4:	680b      	ldr	r3, [r1, #0]
   da0e6:	f104 0c14 	add.w	ip, r4, #20
   da0ea:	468e      	mov	lr, r1
   da0ec:	f04f 0a00 	mov.w	sl, #0
   da0f0:	f8bc 5000 	ldrh.w	r5, [ip]
   da0f4:	f8be b002 	ldrh.w	fp, [lr, #2]
   da0f8:	fb09 b505 	mla	r5, r9, r5, fp
   da0fc:	44aa      	add	sl, r5
   da0fe:	b29b      	uxth	r3, r3
   da100:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da104:	f84e 3b04 	str.w	r3, [lr], #4
   da108:	f85c 3b04 	ldr.w	r3, [ip], #4
   da10c:	f8be 5000 	ldrh.w	r5, [lr]
   da110:	0c1b      	lsrs	r3, r3, #16
   da112:	fb09 5303 	mla	r3, r9, r3, r5
   da116:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da11a:	4567      	cmp	r7, ip
   da11c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da120:	d8e6      	bhi.n	da0f0 <__multiply+0xf2>
   da122:	9d01      	ldr	r5, [sp, #4]
   da124:	514b      	str	r3, [r1, r5]
   da126:	3104      	adds	r1, #4
   da128:	e79e      	b.n	da068 <__multiply+0x6a>
   da12a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da12e:	2b00      	cmp	r3, #0
   da130:	d1a0      	bne.n	da074 <__multiply+0x76>
   da132:	3e01      	subs	r6, #1
   da134:	e79c      	b.n	da070 <__multiply+0x72>
	...

000da138 <__pow5mult>:
   da138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da13c:	4615      	mov	r5, r2
   da13e:	f012 0203 	ands.w	r2, r2, #3
   da142:	4606      	mov	r6, r0
   da144:	460f      	mov	r7, r1
   da146:	d007      	beq.n	da158 <__pow5mult+0x20>
   da148:	4c21      	ldr	r4, [pc, #132]	; (da1d0 <__pow5mult+0x98>)
   da14a:	3a01      	subs	r2, #1
   da14c:	2300      	movs	r3, #0
   da14e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da152:	f7ff fe7f 	bl	d9e54 <__multadd>
   da156:	4607      	mov	r7, r0
   da158:	10ad      	asrs	r5, r5, #2
   da15a:	d035      	beq.n	da1c8 <__pow5mult+0x90>
   da15c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da15e:	b93c      	cbnz	r4, da170 <__pow5mult+0x38>
   da160:	2010      	movs	r0, #16
   da162:	f7fb fab5 	bl	d56d0 <malloc>
   da166:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da16a:	6270      	str	r0, [r6, #36]	; 0x24
   da16c:	6004      	str	r4, [r0, #0]
   da16e:	60c4      	str	r4, [r0, #12]
   da170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da174:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da178:	b94c      	cbnz	r4, da18e <__pow5mult+0x56>
   da17a:	f240 2171 	movw	r1, #625	; 0x271
   da17e:	4630      	mov	r0, r6
   da180:	f7ff ff34 	bl	d9fec <__i2b>
   da184:	2300      	movs	r3, #0
   da186:	f8c8 0008 	str.w	r0, [r8, #8]
   da18a:	4604      	mov	r4, r0
   da18c:	6003      	str	r3, [r0, #0]
   da18e:	f04f 0900 	mov.w	r9, #0
   da192:	07eb      	lsls	r3, r5, #31
   da194:	d50a      	bpl.n	da1ac <__pow5mult+0x74>
   da196:	4639      	mov	r1, r7
   da198:	4622      	mov	r2, r4
   da19a:	4630      	mov	r0, r6
   da19c:	f7ff ff2f 	bl	d9ffe <__multiply>
   da1a0:	4639      	mov	r1, r7
   da1a2:	4680      	mov	r8, r0
   da1a4:	4630      	mov	r0, r6
   da1a6:	f7ff fe3e 	bl	d9e26 <_Bfree>
   da1aa:	4647      	mov	r7, r8
   da1ac:	106d      	asrs	r5, r5, #1
   da1ae:	d00b      	beq.n	da1c8 <__pow5mult+0x90>
   da1b0:	6820      	ldr	r0, [r4, #0]
   da1b2:	b938      	cbnz	r0, da1c4 <__pow5mult+0x8c>
   da1b4:	4622      	mov	r2, r4
   da1b6:	4621      	mov	r1, r4
   da1b8:	4630      	mov	r0, r6
   da1ba:	f7ff ff20 	bl	d9ffe <__multiply>
   da1be:	6020      	str	r0, [r4, #0]
   da1c0:	f8c0 9000 	str.w	r9, [r0]
   da1c4:	4604      	mov	r4, r0
   da1c6:	e7e4      	b.n	da192 <__pow5mult+0x5a>
   da1c8:	4638      	mov	r0, r7
   da1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da1ce:	bf00      	nop
   da1d0:	000dad28 	.word	0x000dad28

000da1d4 <__lshift>:
   da1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da1d8:	460c      	mov	r4, r1
   da1da:	6849      	ldr	r1, [r1, #4]
   da1dc:	6923      	ldr	r3, [r4, #16]
   da1de:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da1e2:	68a3      	ldr	r3, [r4, #8]
   da1e4:	4607      	mov	r7, r0
   da1e6:	4691      	mov	r9, r2
   da1e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da1ec:	f108 0601 	add.w	r6, r8, #1
   da1f0:	42b3      	cmp	r3, r6
   da1f2:	db3f      	blt.n	da274 <__lshift+0xa0>
   da1f4:	4638      	mov	r0, r7
   da1f6:	f7ff fde2 	bl	d9dbe <_Balloc>
   da1fa:	2300      	movs	r3, #0
   da1fc:	4605      	mov	r5, r0
   da1fe:	f100 0114 	add.w	r1, r0, #20
   da202:	f100 0210 	add.w	r2, r0, #16
   da206:	4618      	mov	r0, r3
   da208:	4553      	cmp	r3, sl
   da20a:	db36      	blt.n	da27a <__lshift+0xa6>
   da20c:	6920      	ldr	r0, [r4, #16]
   da20e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da212:	f104 0314 	add.w	r3, r4, #20
   da216:	f019 091f 	ands.w	r9, r9, #31
   da21a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da21e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da222:	d02e      	beq.n	da282 <__lshift+0xae>
   da224:	f1c9 0e20 	rsb	lr, r9, #32
   da228:	468a      	mov	sl, r1
   da22a:	2200      	movs	r2, #0
   da22c:	6818      	ldr	r0, [r3, #0]
   da22e:	fa00 f009 	lsl.w	r0, r0, r9
   da232:	4302      	orrs	r2, r0
   da234:	f84a 2b04 	str.w	r2, [sl], #4
   da238:	f853 2b04 	ldr.w	r2, [r3], #4
   da23c:	459c      	cmp	ip, r3
   da23e:	fa22 f20e 	lsr.w	r2, r2, lr
   da242:	d8f3      	bhi.n	da22c <__lshift+0x58>
   da244:	ebac 0304 	sub.w	r3, ip, r4
   da248:	3b15      	subs	r3, #21
   da24a:	f023 0303 	bic.w	r3, r3, #3
   da24e:	3304      	adds	r3, #4
   da250:	f104 0015 	add.w	r0, r4, #21
   da254:	4560      	cmp	r0, ip
   da256:	bf88      	it	hi
   da258:	2304      	movhi	r3, #4
   da25a:	50ca      	str	r2, [r1, r3]
   da25c:	b10a      	cbz	r2, da262 <__lshift+0x8e>
   da25e:	f108 0602 	add.w	r6, r8, #2
   da262:	3e01      	subs	r6, #1
   da264:	4638      	mov	r0, r7
   da266:	612e      	str	r6, [r5, #16]
   da268:	4621      	mov	r1, r4
   da26a:	f7ff fddc 	bl	d9e26 <_Bfree>
   da26e:	4628      	mov	r0, r5
   da270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da274:	3101      	adds	r1, #1
   da276:	005b      	lsls	r3, r3, #1
   da278:	e7ba      	b.n	da1f0 <__lshift+0x1c>
   da27a:	f842 0f04 	str.w	r0, [r2, #4]!
   da27e:	3301      	adds	r3, #1
   da280:	e7c2      	b.n	da208 <__lshift+0x34>
   da282:	3904      	subs	r1, #4
   da284:	f853 2b04 	ldr.w	r2, [r3], #4
   da288:	f841 2f04 	str.w	r2, [r1, #4]!
   da28c:	459c      	cmp	ip, r3
   da28e:	d8f9      	bhi.n	da284 <__lshift+0xb0>
   da290:	e7e7      	b.n	da262 <__lshift+0x8e>

000da292 <__mcmp>:
   da292:	b530      	push	{r4, r5, lr}
   da294:	6902      	ldr	r2, [r0, #16]
   da296:	690c      	ldr	r4, [r1, #16]
   da298:	1b12      	subs	r2, r2, r4
   da29a:	d10e      	bne.n	da2ba <__mcmp+0x28>
   da29c:	f100 0314 	add.w	r3, r0, #20
   da2a0:	3114      	adds	r1, #20
   da2a2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da2a6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da2aa:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da2ae:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da2b2:	42a5      	cmp	r5, r4
   da2b4:	d003      	beq.n	da2be <__mcmp+0x2c>
   da2b6:	d305      	bcc.n	da2c4 <__mcmp+0x32>
   da2b8:	2201      	movs	r2, #1
   da2ba:	4610      	mov	r0, r2
   da2bc:	bd30      	pop	{r4, r5, pc}
   da2be:	4283      	cmp	r3, r0
   da2c0:	d3f3      	bcc.n	da2aa <__mcmp+0x18>
   da2c2:	e7fa      	b.n	da2ba <__mcmp+0x28>
   da2c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da2c8:	e7f7      	b.n	da2ba <__mcmp+0x28>

000da2ca <__mdiff>:
   da2ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da2ce:	460c      	mov	r4, r1
   da2d0:	4606      	mov	r6, r0
   da2d2:	4611      	mov	r1, r2
   da2d4:	4620      	mov	r0, r4
   da2d6:	4617      	mov	r7, r2
   da2d8:	f7ff ffdb 	bl	da292 <__mcmp>
   da2dc:	1e05      	subs	r5, r0, #0
   da2de:	d108      	bne.n	da2f2 <__mdiff+0x28>
   da2e0:	4629      	mov	r1, r5
   da2e2:	4630      	mov	r0, r6
   da2e4:	f7ff fd6b 	bl	d9dbe <_Balloc>
   da2e8:	2301      	movs	r3, #1
   da2ea:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da2ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da2f2:	bfa4      	itt	ge
   da2f4:	463b      	movge	r3, r7
   da2f6:	4627      	movge	r7, r4
   da2f8:	4630      	mov	r0, r6
   da2fa:	6879      	ldr	r1, [r7, #4]
   da2fc:	bfa6      	itte	ge
   da2fe:	461c      	movge	r4, r3
   da300:	2500      	movge	r5, #0
   da302:	2501      	movlt	r5, #1
   da304:	f7ff fd5b 	bl	d9dbe <_Balloc>
   da308:	693e      	ldr	r6, [r7, #16]
   da30a:	60c5      	str	r5, [r0, #12]
   da30c:	6925      	ldr	r5, [r4, #16]
   da30e:	f107 0114 	add.w	r1, r7, #20
   da312:	f104 0914 	add.w	r9, r4, #20
   da316:	f100 0e14 	add.w	lr, r0, #20
   da31a:	f107 0210 	add.w	r2, r7, #16
   da31e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da322:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da326:	46f2      	mov	sl, lr
   da328:	2700      	movs	r7, #0
   da32a:	f859 3b04 	ldr.w	r3, [r9], #4
   da32e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da332:	fa1f f883 	uxth.w	r8, r3
   da336:	fa17 f78b 	uxtah	r7, r7, fp
   da33a:	0c1b      	lsrs	r3, r3, #16
   da33c:	eba7 0808 	sub.w	r8, r7, r8
   da340:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da344:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da348:	fa1f f888 	uxth.w	r8, r8
   da34c:	141f      	asrs	r7, r3, #16
   da34e:	454d      	cmp	r5, r9
   da350:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da354:	f84a 3b04 	str.w	r3, [sl], #4
   da358:	d8e7      	bhi.n	da32a <__mdiff+0x60>
   da35a:	1b2b      	subs	r3, r5, r4
   da35c:	3b15      	subs	r3, #21
   da35e:	f023 0303 	bic.w	r3, r3, #3
   da362:	3304      	adds	r3, #4
   da364:	3415      	adds	r4, #21
   da366:	42a5      	cmp	r5, r4
   da368:	bf38      	it	cc
   da36a:	2304      	movcc	r3, #4
   da36c:	4419      	add	r1, r3
   da36e:	4473      	add	r3, lr
   da370:	469e      	mov	lr, r3
   da372:	460d      	mov	r5, r1
   da374:	4565      	cmp	r5, ip
   da376:	d30e      	bcc.n	da396 <__mdiff+0xcc>
   da378:	f10c 0203 	add.w	r2, ip, #3
   da37c:	1a52      	subs	r2, r2, r1
   da37e:	f022 0203 	bic.w	r2, r2, #3
   da382:	3903      	subs	r1, #3
   da384:	458c      	cmp	ip, r1
   da386:	bf38      	it	cc
   da388:	2200      	movcc	r2, #0
   da38a:	441a      	add	r2, r3
   da38c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da390:	b17b      	cbz	r3, da3b2 <__mdiff+0xe8>
   da392:	6106      	str	r6, [r0, #16]
   da394:	e7ab      	b.n	da2ee <__mdiff+0x24>
   da396:	f855 8b04 	ldr.w	r8, [r5], #4
   da39a:	fa17 f488 	uxtah	r4, r7, r8
   da39e:	1422      	asrs	r2, r4, #16
   da3a0:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da3a4:	b2a4      	uxth	r4, r4
   da3a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da3aa:	f84e 4b04 	str.w	r4, [lr], #4
   da3ae:	1417      	asrs	r7, r2, #16
   da3b0:	e7e0      	b.n	da374 <__mdiff+0xaa>
   da3b2:	3e01      	subs	r6, #1
   da3b4:	e7ea      	b.n	da38c <__mdiff+0xc2>
	...

000da3b8 <__ulp>:
   da3b8:	b082      	sub	sp, #8
   da3ba:	ed8d 0b00 	vstr	d0, [sp]
   da3be:	9b01      	ldr	r3, [sp, #4]
   da3c0:	4912      	ldr	r1, [pc, #72]	; (da40c <__ulp+0x54>)
   da3c2:	4019      	ands	r1, r3
   da3c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da3c8:	2900      	cmp	r1, #0
   da3ca:	dd05      	ble.n	da3d8 <__ulp+0x20>
   da3cc:	2200      	movs	r2, #0
   da3ce:	460b      	mov	r3, r1
   da3d0:	ec43 2b10 	vmov	d0, r2, r3
   da3d4:	b002      	add	sp, #8
   da3d6:	4770      	bx	lr
   da3d8:	4249      	negs	r1, r1
   da3da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da3de:	ea4f 5021 	mov.w	r0, r1, asr #20
   da3e2:	f04f 0200 	mov.w	r2, #0
   da3e6:	f04f 0300 	mov.w	r3, #0
   da3ea:	da04      	bge.n	da3f6 <__ulp+0x3e>
   da3ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da3f0:	fa41 f300 	asr.w	r3, r1, r0
   da3f4:	e7ec      	b.n	da3d0 <__ulp+0x18>
   da3f6:	f1a0 0114 	sub.w	r1, r0, #20
   da3fa:	291e      	cmp	r1, #30
   da3fc:	bfda      	itte	le
   da3fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da402:	fa20 f101 	lsrle.w	r1, r0, r1
   da406:	2101      	movgt	r1, #1
   da408:	460a      	mov	r2, r1
   da40a:	e7e1      	b.n	da3d0 <__ulp+0x18>
   da40c:	7ff00000 	.word	0x7ff00000

000da410 <__b2d>:
   da410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da412:	6905      	ldr	r5, [r0, #16]
   da414:	f100 0714 	add.w	r7, r0, #20
   da418:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da41c:	1f2e      	subs	r6, r5, #4
   da41e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da422:	4620      	mov	r0, r4
   da424:	f7ff fd92 	bl	d9f4c <__hi0bits>
   da428:	f1c0 0320 	rsb	r3, r0, #32
   da42c:	280a      	cmp	r0, #10
   da42e:	f8df c07c 	ldr.w	ip, [pc, #124]	; da4ac <__b2d+0x9c>
   da432:	600b      	str	r3, [r1, #0]
   da434:	dc14      	bgt.n	da460 <__b2d+0x50>
   da436:	f1c0 0e0b 	rsb	lr, r0, #11
   da43a:	fa24 f10e 	lsr.w	r1, r4, lr
   da43e:	42b7      	cmp	r7, r6
   da440:	ea41 030c 	orr.w	r3, r1, ip
   da444:	bf34      	ite	cc
   da446:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da44a:	2100      	movcs	r1, #0
   da44c:	3015      	adds	r0, #21
   da44e:	fa04 f000 	lsl.w	r0, r4, r0
   da452:	fa21 f10e 	lsr.w	r1, r1, lr
   da456:	ea40 0201 	orr.w	r2, r0, r1
   da45a:	ec43 2b10 	vmov	d0, r2, r3
   da45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da460:	42b7      	cmp	r7, r6
   da462:	bf3a      	itte	cc
   da464:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da468:	f1a5 0608 	subcc.w	r6, r5, #8
   da46c:	2100      	movcs	r1, #0
   da46e:	380b      	subs	r0, #11
   da470:	d017      	beq.n	da4a2 <__b2d+0x92>
   da472:	f1c0 0c20 	rsb	ip, r0, #32
   da476:	fa04 f500 	lsl.w	r5, r4, r0
   da47a:	42be      	cmp	r6, r7
   da47c:	fa21 f40c 	lsr.w	r4, r1, ip
   da480:	ea45 0504 	orr.w	r5, r5, r4
   da484:	bf8c      	ite	hi
   da486:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da48a:	2400      	movls	r4, #0
   da48c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da490:	fa01 f000 	lsl.w	r0, r1, r0
   da494:	fa24 f40c 	lsr.w	r4, r4, ip
   da498:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da49c:	ea40 0204 	orr.w	r2, r0, r4
   da4a0:	e7db      	b.n	da45a <__b2d+0x4a>
   da4a2:	ea44 030c 	orr.w	r3, r4, ip
   da4a6:	460a      	mov	r2, r1
   da4a8:	e7d7      	b.n	da45a <__b2d+0x4a>
   da4aa:	bf00      	nop
   da4ac:	3ff00000 	.word	0x3ff00000

000da4b0 <__d2b>:
   da4b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da4b4:	4689      	mov	r9, r1
   da4b6:	2101      	movs	r1, #1
   da4b8:	ec57 6b10 	vmov	r6, r7, d0
   da4bc:	4690      	mov	r8, r2
   da4be:	f7ff fc7e 	bl	d9dbe <_Balloc>
   da4c2:	f3c7 550a 	ubfx	r5, r7, #20, #11
   da4c6:	4604      	mov	r4, r0
   da4c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   da4cc:	bb35      	cbnz	r5, da51c <__d2b+0x6c>
   da4ce:	2e00      	cmp	r6, #0
   da4d0:	9301      	str	r3, [sp, #4]
   da4d2:	d028      	beq.n	da526 <__d2b+0x76>
   da4d4:	4668      	mov	r0, sp
   da4d6:	9600      	str	r6, [sp, #0]
   da4d8:	f7ff fd58 	bl	d9f8c <__lo0bits>
   da4dc:	9900      	ldr	r1, [sp, #0]
   da4de:	b300      	cbz	r0, da522 <__d2b+0x72>
   da4e0:	9a01      	ldr	r2, [sp, #4]
   da4e2:	f1c0 0320 	rsb	r3, r0, #32
   da4e6:	fa02 f303 	lsl.w	r3, r2, r3
   da4ea:	430b      	orrs	r3, r1
   da4ec:	40c2      	lsrs	r2, r0
   da4ee:	6163      	str	r3, [r4, #20]
   da4f0:	9201      	str	r2, [sp, #4]
   da4f2:	9b01      	ldr	r3, [sp, #4]
   da4f4:	61a3      	str	r3, [r4, #24]
   da4f6:	2b00      	cmp	r3, #0
   da4f8:	bf14      	ite	ne
   da4fa:	2202      	movne	r2, #2
   da4fc:	2201      	moveq	r2, #1
   da4fe:	6122      	str	r2, [r4, #16]
   da500:	b1d5      	cbz	r5, da538 <__d2b+0x88>
   da502:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   da506:	4405      	add	r5, r0
   da508:	f8c9 5000 	str.w	r5, [r9]
   da50c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da510:	f8c8 0000 	str.w	r0, [r8]
   da514:	4620      	mov	r0, r4
   da516:	b003      	add	sp, #12
   da518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da51c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da520:	e7d5      	b.n	da4ce <__d2b+0x1e>
   da522:	6161      	str	r1, [r4, #20]
   da524:	e7e5      	b.n	da4f2 <__d2b+0x42>
   da526:	a801      	add	r0, sp, #4
   da528:	f7ff fd30 	bl	d9f8c <__lo0bits>
   da52c:	9b01      	ldr	r3, [sp, #4]
   da52e:	6163      	str	r3, [r4, #20]
   da530:	2201      	movs	r2, #1
   da532:	6122      	str	r2, [r4, #16]
   da534:	3020      	adds	r0, #32
   da536:	e7e3      	b.n	da500 <__d2b+0x50>
   da538:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   da53c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da540:	f8c9 0000 	str.w	r0, [r9]
   da544:	6918      	ldr	r0, [r3, #16]
   da546:	f7ff fd01 	bl	d9f4c <__hi0bits>
   da54a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   da54e:	e7df      	b.n	da510 <__d2b+0x60>

000da550 <__ratio>:
   da550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da554:	4688      	mov	r8, r1
   da556:	4669      	mov	r1, sp
   da558:	4681      	mov	r9, r0
   da55a:	f7ff ff59 	bl	da410 <__b2d>
   da55e:	a901      	add	r1, sp, #4
   da560:	4640      	mov	r0, r8
   da562:	ec55 4b10 	vmov	r4, r5, d0
   da566:	f7ff ff53 	bl	da410 <__b2d>
   da56a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da56e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da572:	eba3 0c02 	sub.w	ip, r3, r2
   da576:	e9dd 3200 	ldrd	r3, r2, [sp]
   da57a:	1a9b      	subs	r3, r3, r2
   da57c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   da580:	ec51 0b10 	vmov	r0, r1, d0
   da584:	2b00      	cmp	r3, #0
   da586:	bfd6      	itet	le
   da588:	460a      	movle	r2, r1
   da58a:	462a      	movgt	r2, r5
   da58c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   da590:	468b      	mov	fp, r1
   da592:	462f      	mov	r7, r5
   da594:	bfd4      	ite	le
   da596:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   da59a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   da59e:	4620      	mov	r0, r4
   da5a0:	ee10 2a10 	vmov	r2, s0
   da5a4:	465b      	mov	r3, fp
   da5a6:	4639      	mov	r1, r7
   da5a8:	f7fd fe80 	bl	d82ac <__aeabi_ddiv>
   da5ac:	ec41 0b10 	vmov	d0, r0, r1
   da5b0:	b003      	add	sp, #12
   da5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da5b6 <__copybits>:
   da5b6:	3901      	subs	r1, #1
   da5b8:	b570      	push	{r4, r5, r6, lr}
   da5ba:	1149      	asrs	r1, r1, #5
   da5bc:	6914      	ldr	r4, [r2, #16]
   da5be:	3101      	adds	r1, #1
   da5c0:	f102 0314 	add.w	r3, r2, #20
   da5c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da5c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da5cc:	1f05      	subs	r5, r0, #4
   da5ce:	42a3      	cmp	r3, r4
   da5d0:	d30c      	bcc.n	da5ec <__copybits+0x36>
   da5d2:	1aa3      	subs	r3, r4, r2
   da5d4:	3b11      	subs	r3, #17
   da5d6:	f023 0303 	bic.w	r3, r3, #3
   da5da:	3211      	adds	r2, #17
   da5dc:	42a2      	cmp	r2, r4
   da5de:	bf88      	it	hi
   da5e0:	2300      	movhi	r3, #0
   da5e2:	4418      	add	r0, r3
   da5e4:	2300      	movs	r3, #0
   da5e6:	4288      	cmp	r0, r1
   da5e8:	d305      	bcc.n	da5f6 <__copybits+0x40>
   da5ea:	bd70      	pop	{r4, r5, r6, pc}
   da5ec:	f853 6b04 	ldr.w	r6, [r3], #4
   da5f0:	f845 6f04 	str.w	r6, [r5, #4]!
   da5f4:	e7eb      	b.n	da5ce <__copybits+0x18>
   da5f6:	f840 3b04 	str.w	r3, [r0], #4
   da5fa:	e7f4      	b.n	da5e6 <__copybits+0x30>

000da5fc <__any_on>:
   da5fc:	f100 0214 	add.w	r2, r0, #20
   da600:	6900      	ldr	r0, [r0, #16]
   da602:	114b      	asrs	r3, r1, #5
   da604:	4298      	cmp	r0, r3
   da606:	b510      	push	{r4, lr}
   da608:	db11      	blt.n	da62e <__any_on+0x32>
   da60a:	dd0a      	ble.n	da622 <__any_on+0x26>
   da60c:	f011 011f 	ands.w	r1, r1, #31
   da610:	d007      	beq.n	da622 <__any_on+0x26>
   da612:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da616:	fa24 f001 	lsr.w	r0, r4, r1
   da61a:	fa00 f101 	lsl.w	r1, r0, r1
   da61e:	428c      	cmp	r4, r1
   da620:	d10b      	bne.n	da63a <__any_on+0x3e>
   da622:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da626:	4293      	cmp	r3, r2
   da628:	d803      	bhi.n	da632 <__any_on+0x36>
   da62a:	2000      	movs	r0, #0
   da62c:	bd10      	pop	{r4, pc}
   da62e:	4603      	mov	r3, r0
   da630:	e7f7      	b.n	da622 <__any_on+0x26>
   da632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da636:	2900      	cmp	r1, #0
   da638:	d0f5      	beq.n	da626 <__any_on+0x2a>
   da63a:	2001      	movs	r0, #1
   da63c:	e7f6      	b.n	da62c <__any_on+0x30>

000da63e <_calloc_r>:
   da63e:	b513      	push	{r0, r1, r4, lr}
   da640:	434a      	muls	r2, r1
   da642:	4611      	mov	r1, r2
   da644:	9201      	str	r2, [sp, #4]
   da646:	f7fb f873 	bl	d5730 <_malloc_r>
   da64a:	4604      	mov	r4, r0
   da64c:	b118      	cbz	r0, da656 <_calloc_r+0x18>
   da64e:	9a01      	ldr	r2, [sp, #4]
   da650:	2100      	movs	r1, #0
   da652:	f7fe f85a 	bl	d870a <memset>
   da656:	4620      	mov	r0, r4
   da658:	b002      	add	sp, #8
   da65a:	bd10      	pop	{r4, pc}
   da65c:	0000      	movs	r0, r0
	...

000da660 <nan>:
   da660:	ed9f 0b01 	vldr	d0, [pc, #4]	; da668 <nan+0x8>
   da664:	4770      	bx	lr
   da666:	bf00      	nop
   da668:	00000000 	.word	0x00000000
   da66c:	7ff80000 	.word	0x7ff80000

000da670 <__ascii_wctomb>:
   da670:	b149      	cbz	r1, da686 <__ascii_wctomb+0x16>
   da672:	2aff      	cmp	r2, #255	; 0xff
   da674:	bf85      	ittet	hi
   da676:	238a      	movhi	r3, #138	; 0x8a
   da678:	6003      	strhi	r3, [r0, #0]
   da67a:	700a      	strbls	r2, [r1, #0]
   da67c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   da680:	bf98      	it	ls
   da682:	2001      	movls	r0, #1
   da684:	4770      	bx	lr
   da686:	4608      	mov	r0, r1
   da688:	4770      	bx	lr
	...

000da68c <__aeabi_d2lz>:
   da68c:	b538      	push	{r3, r4, r5, lr}
   da68e:	2200      	movs	r2, #0
   da690:	2300      	movs	r3, #0
   da692:	4604      	mov	r4, r0
   da694:	460d      	mov	r5, r1
   da696:	f7fd ff51 	bl	d853c <__aeabi_dcmplt>
   da69a:	b928      	cbnz	r0, da6a8 <__aeabi_d2lz+0x1c>
   da69c:	4620      	mov	r0, r4
   da69e:	4629      	mov	r1, r5
   da6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da6a4:	f7fd bfe2 	b.w	d866c <__aeabi_d2ulz>
   da6a8:	4620      	mov	r0, r4
   da6aa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   da6ae:	f7fd ffdd 	bl	d866c <__aeabi_d2ulz>
   da6b2:	4240      	negs	r0, r0
   da6b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da6b8:	bd38      	pop	{r3, r4, r5, pc}
   da6ba:	bf00      	nop

000da6bc <dynalib_user>:
   da6bc:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   da6cc:	0000 0000 614c 3a74 2520 2066 6f4c 3a6e     ....Lat: %f Lon:
   da6dc:	2520 2066 6341 2063 6d28 3a29 2520 0066      %f Acc (m): %f.
   da6ec:	6562 6174 6e4f 696c 656e 6200 7465 4361     betaOnline.betaC
   da6fc:	6c6f 726f 6200 7465 4c61 6769 7468 6200     olor.betaLight.b
   da70c:	7465 4c61 636f 7461 0065 0030 0034 6166     etaLocate.0.4.fa
   da71c:	0072 6c61 6870 4f61 6c6e 6e69 0065 696c     r.alphaOnline.li
   da72c:	6867 6974 676e 0031 696c 6867 6974 676e     ghting1.lighting
   da73c:	0032 696c 6867 6974 676e 0033 6c61 6870     2.lighting3.alph
   da74c:	4361 6c6f 726f 0000                         aColor..

000da754 <_ZTVN5spark10LogHandlerE>:
	...
   da764:	40a5 000d 40c9 000d                         .@...@..

000da76c <_ZTVN5spark16SerialLogHandlerE>:
	...
   da774:	4105 000d 4139 000d 6f11 000d 40cb 000d     .A..9A...o...@..
   da784:	002c 7325 227b 226d 223a 3025 7832 253a     ,.%s{"m":"%02x:%
   da794:	3230 3a78 3025 7832 253a 3230 3a78 3025     02x:%02x:%02x:%0
   da7a4:	7832 253a 3230 2278 222c 2273 253a 2c64     2x:%02x","s":%d,
   da7b4:	6322 3a22 6425 007d 6564 6976 6563 6f4c     "c":%d}.deviceLo
   da7c4:	6163 6f74 0072 5441 5426 7b00 7722 3a22     cator.AT&T.{"w":
   da7d4:	227b 2261 003a 7570 6c62 7369 4c68 636f     {"a":.publishLoc
   da7e4:	7461 6f69 006e 6373 6e61 6144 6174 253d     ation.scanData=%
   da7f4:	0073 6f68 6b6f 722d 7365 6f70 736e 2f65     s.hook-response/
   da804:	7325 252f 0073 0000                         %s/%s...

000da80c <_ZTV23GoogleMapsDeviceLocator>:
	...
   da814:	4965 000d 4985 000d c000 4001 1000 4002     eI...I.....@...@
   da824:	2000 4002                                   . .@

000da828 <CSWTCH.60>:
   da828:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   da838:	0050 0000                                   P...

000da83c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da844:	579d 000d 57a3 000d 57e1 000d 57b1 000d     .W...W...W...W..
   da854:	579f 000d                                   .W..

000da858 <_ZTVN5spark13EthernetClassE>:
	...
   da860:	5d73 000d 5d69 000d 5d5f 000d 5d55 000d     s]..i].._]..U]..
   da870:	5d49 000d 5d3d 000d 7269 000d 7271 000d     I]..=]..ir..qr..
   da880:	5d31 000d 5d29 000d 5d1f 000d 5d15 000d     1]..)]...]...]..
   da890:	72a1 000d                                   .r..

000da894 <_ZTV7TwoWire>:
	...
   da89c:	5d91 000d 5ddb 000d 5db3 000d 5d93 000d     .]...]...]...]..
   da8ac:	5dbb 000d 5dc3 000d 5dcb 000d 5dd3 000d     .]...]...]...]..

000da8bc <_ZTV9IPAddress>:
	...
   da8c4:	5e1d 000d 5e0d 000d 5e0f 000d 6425 2500     .^...^...^..%d.%
   da8d4:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   da8e4:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   da8f4:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   da904:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   da914:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   da924:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   da934:	0a0d 6d00 6300 6c00 006e 6e66 6300 646f     ...m.c.ln.fn.cod
   da944:	0065 6564 6174 6c69 0000 0000               e.detail....

000da950 <_ZTVN5spark16JSONStreamWriterE>:
	...
   da958:	62d9 000d 62ff 000d 62bd 000d 5f1d 000d     .b...b...b..._..

000da968 <_ZTVN5spark16StreamLogHandlerE>:
	...
   da970:	672d 000d 6745 000d 6f11 000d 40cb 000d     -g..Eg...o...@..

000da980 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   da988:	6759 000d 676d 000d 70b5 000d 62c5 000d     Yg..mg...p...b..

000da998 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   da9a0:	62d7 000d 630d 000d 6e4d 000d 62c7 000d     .b...c..Mn...b..

000da9b0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   da9b8:	62d5 000d 631b 000d 6675 000d 6339 000d     .b...c..uf..9c..

000da9c8 <_ZTVN5spark12NetworkClassE>:
	...
   da9d0:	7229 000d 7233 000d 723d 000d 7247 000d     )r..3r..=r..Gr..
   da9e0:	7251 000d 725d 000d 7269 000d 7271 000d     Qr..]r..ir..qr..
   da9f0:	7279 000d 7285 000d 728d 000d 7297 000d     yr...r...r...r..
   daa00:	72a1 000d 5925 252d 2d6d 6425 2554 3a48     .r..%Y-%m-%dT%H:
   daa10:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000daa20 <_ZTV11USARTSerial>:
	...
   daa28:	76bb 000d 7729 000d 7701 000d 7389 000d     .v..)w...w...s..
   daa38:	76d1 000d 76ed 000d 76df 000d 76fb 000d     .v...v...v...v..
   daa48:	76bd 000d 76c3 000d                         .v...v..

000daa50 <_ZTV9USBSerial>:
	...
   daa58:	77cb 000d 7833 000d 7809 000d 7389 000d     .w..3x...x...s..
   daa68:	77fb 000d 77cd 000d 77dd 000d 782d 000d     .w...w...w..-x..
   daa78:	77ed 000d 77c5 000d                         .w...w..

000daa80 <_ZTVN5spark9WiFiClassE>:
	...
   daa88:	7933 000d 7929 000d 791f 000d 78d5 000d     3y..)y...y...x..
   daa98:	7913 000d 7907 000d 7269 000d 7271 000d     .y...y..ir..qr..
   daaa8:	78fb 000d 78f3 000d 78e9 000d 78df 000d     .x...x...x...x..
   daab8:	72a1 000d                                   .r..

000daabc <_ZSt7nothrow>:
   daabc:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000daacc <fpi.7566>:
   daacc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   daadc:	0000 0000                                   ....

000daae0 <fpinan.7602>:
   daae0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000daaf8 <tinytens>:
   daaf8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dab08:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dab18:	6f43 64ac 0628 1168                         Co.d(.h.

000dab20 <_ctype_>:
   dab20:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dab30:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dab40:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dab50:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dab60:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dab70:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dab80:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dab90:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   daba0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   dac20:	2e00 0000                                   ....

000dac24 <_C_numeric_locale>:
   dac24:	ac21 000d a936 000d e258 2003 0043 4f50     !...6...X.. C.PO
   dac34:	4953 0058                                   SIX.

000dac38 <__mprec_bigtens>:
   dac38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dac48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dac58:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dac60 <__mprec_tens>:
   dac60:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dac70:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dac80:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dac90:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   daca0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dacb0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dacc0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dacd0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dace0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dacf0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dad00:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dad10:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dad20:	9db4 79d9 7843 44ea                         ...yCx.D

000dad28 <p05.7490>:
   dad28:	0005 0000 0019 0000 007d 0000               ........}...

000dad34 <link_const_variable_data_end>:
   dad34:	000d48b1 	.word	0x000d48b1
   dad38:	000d4d7d 	.word	0x000d4d7d
   dad3c:	000d5219 	.word	0x000d5219
   dad40:	000d578d 	.word	0x000d578d
   dad44:	000d5d7d 	.word	0x000d5d7d
   dad48:	000d6f01 	.word	0x000d6f01
   dad4c:	000d7375 	.word	0x000d7375
   dad50:	000d74a9 	.word	0x000d74a9
   dad54:	000d7655 	.word	0x000d7655
   dad58:	000d7679 	.word	0x000d7679
   dad5c:	000d793d 	.word	0x000d793d
