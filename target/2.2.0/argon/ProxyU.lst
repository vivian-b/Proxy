
/Users/vivian/Documents/ProxyU/target/2.2.0/argon/ProxyU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005370  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9390  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e8  2003e240  000d9394  0001e240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003c8  2003e428  2003e428  0002e428  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d957c  000d957c  0002957c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d95a4  000d95a4  000295a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00170adc  00000000  00000000  000295a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000184ed  00000000  00000000  0019a084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002d126  00000000  00000000  001b2571  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002900  00000000  00000000  001df697  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007a88  00000000  00000000  001e1f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039424  00000000  00000000  001e9a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003c153  00000000  00000000  00222e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010ee0d  00000000  00000000  0025ef96  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000077f0  00000000  00000000  0036dda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ffb2 	bl	d6f9a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ffba 	bl	d6fb6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e240 	.word	0x2003e240
   d404c:	000d9394 	.word	0x000d9394
   d4050:	2003e428 	.word	0x2003e428
   d4054:	2003e428 	.word	0x2003e428
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 f9a3 	bl	d63ac <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d935c 	.word	0x000d935c
   d4080:	000d9388 	.word	0x000d9388

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b862 	b.w	d414c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9cf 	bl	d442c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 b943 	b.w	d631c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b971 	b.w	d537c <malloc>

000d409a <_Znaj>:
   d409a:	f001 b96f 	b.w	d537c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b975 	b.w	d538c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b4:	b513      	push	{r0, r1, r4, lr}
   d40b6:	4b05      	ldr	r3, [pc, #20]	; (d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40b8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ba:	f88d 3000 	strb.w	r3, [sp]
   d40be:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c2:	f001 fb07 	bl	d56d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40c6:	4620      	mov	r0, r4
   d40c8:	b002      	add	sp, #8
   d40ca:	bd10      	pop	{r4, pc}
   d40cc:	2003e428 	.word	0x2003e428

000d40d0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
    return publish(name, data, ttl, PUBLIC);
}

inline bool CloudClass::subscribe(const char* name, EventHandler handler) {
   d40d0:	b507      	push	{r0, r1, r2, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d40d2:	2200      	movs	r2, #0
   d40d4:	e9cd 2200 	strd	r2, r2, [sp]
   d40d8:	2301      	movs	r3, #1
   d40da:	f001 f8df 	bl	d529c <spark_subscribe>
    return subscribe(name, handler, ALL_DEVICES);
}
   d40de:	b003      	add	sp, #12
   d40e0:	f85d fb04 	ldr.w	pc, [sp], #4

000d40e4 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40e4:	b40e      	push	{r1, r2, r3}
   d40e6:	b503      	push	{r0, r1, lr}
   d40e8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40ea:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40f0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40f2:	f001 fe6a 	bl	d5dca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40f6:	b002      	add	sp, #8
   d40f8:	f85d eb04 	ldr.w	lr, [sp], #4
   d40fc:	b003      	add	sp, #12
   d40fe:	4770      	bx	lr

000d4100 <_Z16locationCallbackfff>:
// gives three values about location
// Latitude: The latitude of the device's location
// Longitude: The longitude of the device's location
// Circle of Uncertainty: The radius in meters that represents the uncertainty range of the reported location
void locationCallback(float lat1, float lon1, float accuracy)
{
   d4100:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4102:	b087      	sub	sp, #28
   d4104:	ee10 7a10 	vmov	r7, s0
   d4108:	ee10 5a90 	vmov	r5, s1
   d410c:	ee11 6a10 	vmov	r6, s2
    Serial.printlnf("Lat: %f Lon: %f Acc (m): %f", lat1, lon1, accuracy);  // writes the coordinates in the serial monitor
   d4110:	f002 f82c 	bl	d616c <_Z16_fetch_usbserialv>
   d4114:	4604      	mov	r4, r0
   d4116:	4638      	mov	r0, r7
   d4118:	f002 fbb6 	bl	d6888 <__aeabi_f2d>
   d411c:	4602      	mov	r2, r0
   d411e:	460b      	mov	r3, r1
   d4120:	4630      	mov	r0, r6
   d4122:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d4126:	f002 fbaf 	bl	d6888 <__aeabi_f2d>
   d412a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d412e:	4628      	mov	r0, r5
   d4130:	f002 fbaa 	bl	d6888 <__aeabi_f2d>
   d4134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d4138:	e9cd 0100 	strd	r0, r1, [sp]
   d413c:	4902      	ldr	r1, [pc, #8]	; (d4148 <_Z16locationCallbackfff+0x48>)
   d413e:	4620      	mov	r0, r4
   d4140:	f7ff ffd0 	bl	d40e4 <_ZN5Print8printlnfEPKcz>
}
   d4144:	b007      	add	sp, #28
   d4146:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4148:	000d8e20 	.word	0x000d8e20

000d414c <setup>:
int lastButtonState = 0;     
int buttonState  = 0;

// set up the pins & subscriptions
void setup() 
{
   d414c:	b508      	push	{r3, lr}
Serial.begin(9600);
   d414e:	f002 f80d 	bl	d616c <_Z16_fetch_usbserialv>
   d4152:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4156:	f001 fffd 	bl	d6154 <_ZN9USBSerial5beginEl>
pixels.begin(); 
   d415a:	4814      	ldr	r0, [pc, #80]	; (d41ac <setup+0x60>)
   d415c:	f000 fcd3 	bl	d4b06 <_ZN17Adafruit_NeoPixel5beginEv>

pinMode(photoSens, INPUT);
   d4160:	4b13      	ldr	r3, [pc, #76]	; (d41b0 <setup+0x64>)
   d4162:	2100      	movs	r1, #0
   d4164:	8818      	ldrh	r0, [r3, #0]
   d4166:	f002 f991 	bl	d648c <pinMode>
pinMode(buzzSens, OUTPUT);
   d416a:	4b12      	ldr	r3, [pc, #72]	; (d41b4 <setup+0x68>)
   d416c:	2101      	movs	r1, #1
   d416e:	8818      	ldrh	r0, [r3, #0]
   d4170:	f002 f98c 	bl	d648c <pinMode>
pinMode(tiltSens, INPUT_PULLUP);
   d4174:	4b10      	ldr	r3, [pc, #64]	; (d41b8 <setup+0x6c>)
   d4176:	2102      	movs	r1, #2
   d4178:	8818      	ldrh	r0, [r3, #0]
   d417a:	f002 f987 	bl	d648c <pinMode>
void alphaHandler1(const char *event, const char *data); 
void alphaHandler2(const char *event, const char *data); 
void alphaHandler3(const char *event, const char *data); 
void alphaHandler4(const char *event, const char *data); 

Particle.subscribe("betaOnline", alphaHandler1);
   d417e:	490f      	ldr	r1, [pc, #60]	; (d41bc <setup+0x70>)
   d4180:	480f      	ldr	r0, [pc, #60]	; (d41c0 <setup+0x74>)
   d4182:	f7ff ffa5 	bl	d40d0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>
Particle.subscribe("betaColor", alphaHandler2);
   d4186:	490f      	ldr	r1, [pc, #60]	; (d41c4 <setup+0x78>)
   d4188:	480f      	ldr	r0, [pc, #60]	; (d41c8 <setup+0x7c>)
   d418a:	f7ff ffa1 	bl	d40d0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>
Particle.subscribe("betaLighting", alphaHandler3);
   d418e:	490f      	ldr	r1, [pc, #60]	; (d41cc <setup+0x80>)
   d4190:	480f      	ldr	r0, [pc, #60]	; (d41d0 <setup+0x84>)
   d4192:	f7ff ff9d 	bl	d40d0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>
Particle.subscribe("betaLocate", alphaHandler4);
   d4196:	490f      	ldr	r1, [pc, #60]	; (d41d4 <setup+0x88>)
   d4198:	480f      	ldr	r0, [pc, #60]	; (d41d8 <setup+0x8c>)
   d419a:	f7ff ff99 	bl	d40d0 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E.isra.0>

locator.withSubscribe(locationCallback);
} 
   d419e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
locator.withSubscribe(locationCallback);
   d41a2:	490e      	ldr	r1, [pc, #56]	; (d41dc <setup+0x90>)
   d41a4:	480e      	ldr	r0, [pc, #56]	; (d41e0 <setup+0x94>)
   d41a6:	f000 bc3b 	b.w	d4a20 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
   d41aa:	bf00      	nop
   d41ac:	2003e480 	.word	0x2003e480
   d41b0:	2003e244 	.word	0x2003e244
   d41b4:	2003e240 	.word	0x2003e240
   d41b8:	2003e248 	.word	0x2003e248
   d41bc:	000d43a9 	.word	0x000d43a9
   d41c0:	000d8e3c 	.word	0x000d8e3c
   d41c4:	000d41e5 	.word	0x000d41e5
   d41c8:	000d8e47 	.word	0x000d8e47
   d41cc:	000d42b5 	.word	0x000d42b5
   d41d0:	000d8e51 	.word	0x000d8e51
   d41d4:	000d432d 	.word	0x000d432d
   d41d8:	000d8e5e 	.word	0x000d8e5e
   d41dc:	000d4101 	.word	0x000d4101
   d41e0:	2003e43c 	.word	0x2003e43c

000d41e4 <_Z13alphaHandler2PKcS0_>:
}

// Particle.subscribe("betaColor", alphaHandler2);
// updates the color selected from the tilt action from the other party
void alphaHandler2(const char *event, const char *data)
{
   d41e4:	b538      	push	{r3, r4, r5, lr}
   d41e6:	460c      	mov	r4, r1
if (strcmp(data, "1") == 0)
   d41e8:	4620      	mov	r0, r4
   d41ea:	492c      	ldr	r1, [pc, #176]	; (d429c <_Z13alphaHandler2PKcS0_+0xb8>)
   d41ec:	4d2c      	ldr	r5, [pc, #176]	; (d42a0 <_Z13alphaHandler2PKcS0_+0xbc>)
   d41ee:	f002 ff0f 	bl	d7010 <strcmp>
   d41f2:	4602      	mov	r2, r0
   d41f4:	b960      	cbnz	r0, d4210 <_Z13alphaHandler2PKcS0_+0x2c>
{
  pixels.setPixelColor(5, pixels.Color(2,0,0,1)); 
   d41f6:	2301      	movs	r3, #1
   d41f8:	4601      	mov	r1, r0
   d41fa:	2002      	movs	r0, #2
   d41fc:	f000 feab 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4200:	2105      	movs	r1, #5
   d4202:	4602      	mov	r2, r0
   d4204:	4827      	ldr	r0, [pc, #156]	; (d42a4 <_Z13alphaHandler2PKcS0_+0xc0>)
   d4206:	f000 fe5d 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 1;
   d420a:	2301      	movs	r3, #1
   d420c:	602b      	str	r3, [r5, #0]
  {
  pixels.setPixelColor(5, pixels.Color(0,2,2,0)); 
colorModeBeta = 5;

  }  
}
   d420e:	bd38      	pop	{r3, r4, r5, pc}
  } else if (strcmp(data, "2") == 0)
   d4210:	4925      	ldr	r1, [pc, #148]	; (d42a8 <_Z13alphaHandler2PKcS0_+0xc4>)
   d4212:	4620      	mov	r0, r4
   d4214:	f002 fefc 	bl	d7010 <strcmp>
   d4218:	4602      	mov	r2, r0
   d421a:	b958      	cbnz	r0, d4234 <_Z13alphaHandler2PKcS0_+0x50>
  pixels.setPixelColor(5, pixels.Color(0,2,0,1)); 
   d421c:	2301      	movs	r3, #1
   d421e:	2102      	movs	r1, #2
   d4220:	f000 fe99 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4224:	2105      	movs	r1, #5
   d4226:	4602      	mov	r2, r0
   d4228:	481e      	ldr	r0, [pc, #120]	; (d42a4 <_Z13alphaHandler2PKcS0_+0xc0>)
   d422a:	f000 fe4b 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 2;
   d422e:	2302      	movs	r3, #2
   d4230:	602b      	str	r3, [r5, #0]
   d4232:	e7ec      	b.n	d420e <_Z13alphaHandler2PKcS0_+0x2a>
  } else if (strcmp(data, "3") == 0)
   d4234:	491d      	ldr	r1, [pc, #116]	; (d42ac <_Z13alphaHandler2PKcS0_+0xc8>)
   d4236:	4620      	mov	r0, r4
   d4238:	f002 feea 	bl	d7010 <strcmp>
   d423c:	4601      	mov	r1, r0
   d423e:	b958      	cbnz	r0, d4258 <_Z13alphaHandler2PKcS0_+0x74>
  pixels.setPixelColor(5, pixels.Color(0,0,2,1)); 
   d4240:	2301      	movs	r3, #1
   d4242:	2202      	movs	r2, #2
   d4244:	f000 fe87 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4248:	2105      	movs	r1, #5
   d424a:	4602      	mov	r2, r0
   d424c:	4815      	ldr	r0, [pc, #84]	; (d42a4 <_Z13alphaHandler2PKcS0_+0xc0>)
   d424e:	f000 fe39 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 3;
   d4252:	2303      	movs	r3, #3
   d4254:	602b      	str	r3, [r5, #0]
   d4256:	e7da      	b.n	d420e <_Z13alphaHandler2PKcS0_+0x2a>
  }else if (strcmp(data, "4") == 0)
   d4258:	4915      	ldr	r1, [pc, #84]	; (d42b0 <_Z13alphaHandler2PKcS0_+0xcc>)
   d425a:	4620      	mov	r0, r4
   d425c:	f002 fed8 	bl	d7010 <strcmp>
   d4260:	4601      	mov	r1, r0
   d4262:	b960      	cbnz	r0, d427e <_Z13alphaHandler2PKcS0_+0x9a>
  pixels.setPixelColor(5, pixels.Color(2,0,2,1)); 
   d4264:	2202      	movs	r2, #2
   d4266:	2301      	movs	r3, #1
   d4268:	4610      	mov	r0, r2
   d426a:	f000 fe74 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d426e:	2105      	movs	r1, #5
   d4270:	4602      	mov	r2, r0
   d4272:	480c      	ldr	r0, [pc, #48]	; (d42a4 <_Z13alphaHandler2PKcS0_+0xc0>)
   d4274:	f000 fe26 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 4;
   d4278:	2304      	movs	r3, #4
   d427a:	602b      	str	r3, [r5, #0]
   d427c:	e7c7      	b.n	d420e <_Z13alphaHandler2PKcS0_+0x2a>
  pixels.setPixelColor(5, pixels.Color(0,2,2,0)); 
   d427e:	2300      	movs	r3, #0
   d4280:	2202      	movs	r2, #2
   d4282:	4611      	mov	r1, r2
   d4284:	4618      	mov	r0, r3
   d4286:	f000 fe66 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d428a:	2105      	movs	r1, #5
   d428c:	4602      	mov	r2, r0
   d428e:	4805      	ldr	r0, [pc, #20]	; (d42a4 <_Z13alphaHandler2PKcS0_+0xc0>)
   d4290:	f000 fe18 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
colorModeBeta = 5;
   d4294:	2305      	movs	r3, #5
   d4296:	602b      	str	r3, [r5, #0]
}
   d4298:	e7b9      	b.n	d420e <_Z13alphaHandler2PKcS0_+0x2a>
   d429a:	bf00      	nop
   d429c:	000d8e90 	.word	0x000d8e90
   d42a0:	2003e434 	.word	0x2003e434
   d42a4:	2003e480 	.word	0x2003e480
   d42a8:	000d8e9a 	.word	0x000d8e9a
   d42ac:	000d8ea4 	.word	0x000d8ea4
   d42b0:	000d8e69 	.word	0x000d8e69

000d42b4 <_Z13alphaHandler3PKcS0_>:

// Particle.subscribe("betaLighting", alphaHandler3);
// photo resistor value

void alphaHandler3(const char *event, const char *data)
{
   d42b4:	b538      	push	{r3, r4, r5, lr}

  //sound notification
  tone(buzzSens, 900, 500);
   d42b6:	4d19      	ldr	r5, [pc, #100]	; (d431c <_Z13alphaHandler3PKcS0_+0x68>)
   d42b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d42bc:	7828      	ldrb	r0, [r5, #0]
{
   d42be:	460c      	mov	r4, r1
  tone(buzzSens, 900, 500);
   d42c0:	f44f 7161 	mov.w	r1, #900	; 0x384
   d42c4:	f001 fe62 	bl	d5f8c <tone>
  delay(200);
   d42c8:	20c8      	movs	r0, #200	; 0xc8
   d42ca:	f001 f897 	bl	d53fc <delay>
  tone(buzzSens, 900, 500);
   d42ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d42d2:	7828      	ldrb	r0, [r5, #0]
   d42d4:	f44f 7161 	mov.w	r1, #900	; 0x384
   d42d8:	f001 fe58 	bl	d5f8c <tone>

if (strcmp(data, "low") == 0)
   d42dc:	4910      	ldr	r1, [pc, #64]	; (d4320 <_Z13alphaHandler3PKcS0_+0x6c>)
   d42de:	4620      	mov	r0, r4
   d42e0:	f002 fe96 	bl	d7010 <strcmp>
   d42e4:	4602      	mov	r2, r0
   d42e6:	b958      	cbnz	r0, d4300 <_Z13alphaHandler3PKcS0_+0x4c>
  {
    pixels.setPixelColor(6, pixels.Color(2,0,0,1)); 
   d42e8:	4601      	mov	r1, r0
   d42ea:	2301      	movs	r3, #1
   d42ec:	2002      	movs	r0, #2
  } else if (strcmp(data, "high") == 0)
  {
    pixels.setPixelColor(6, pixels.Color(0,2,0,1)); 
  } else
  {
  pixels.setPixelColor(6, pixels.Color(0,0,2,1)); 
   d42ee:	f000 fe32 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }

}
   d42f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pixels.setPixelColor(6, pixels.Color(0,0,2,1)); 
   d42f6:	4602      	mov	r2, r0
   d42f8:	2106      	movs	r1, #6
   d42fa:	480a      	ldr	r0, [pc, #40]	; (d4324 <_Z13alphaHandler3PKcS0_+0x70>)
   d42fc:	f000 bde2 	b.w	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  } else if (strcmp(data, "high") == 0)
   d4300:	4909      	ldr	r1, [pc, #36]	; (d4328 <_Z13alphaHandler3PKcS0_+0x74>)
   d4302:	4620      	mov	r0, r4
   d4304:	f002 fe84 	bl	d7010 <strcmp>
    pixels.setPixelColor(6, pixels.Color(0,2,0,1)); 
   d4308:	2301      	movs	r3, #1
  } else if (strcmp(data, "high") == 0)
   d430a:	4602      	mov	r2, r0
   d430c:	b908      	cbnz	r0, d4312 <_Z13alphaHandler3PKcS0_+0x5e>
    pixels.setPixelColor(6, pixels.Color(0,2,0,1)); 
   d430e:	2102      	movs	r1, #2
   d4310:	e7ed      	b.n	d42ee <_Z13alphaHandler3PKcS0_+0x3a>
  pixels.setPixelColor(6, pixels.Color(0,0,2,1)); 
   d4312:	2100      	movs	r1, #0
   d4314:	2202      	movs	r2, #2
   d4316:	4608      	mov	r0, r1
   d4318:	e7e9      	b.n	d42ee <_Z13alphaHandler3PKcS0_+0x3a>
   d431a:	bf00      	nop
   d431c:	2003e240 	.word	0x2003e240
   d4320:	000d8e6b 	.word	0x000d8e6b
   d4324:	2003e480 	.word	0x2003e480
   d4328:	000d8e6f 	.word	0x000d8e6f

000d432c <_Z13alphaHandler4PKcS0_>:

// Particle.subscribe("betaLocate", alphaHandler4);
void alphaHandler4(const char *event, const char *data)
{
   d432c:	b513      	push	{r0, r1, r4, lr}
   d432e:	460c      	mov	r4, r1
locator.publishLocation();
   d4330:	480f      	ldr	r0, [pc, #60]	; (d4370 <_Z13alphaHandler4PKcS0_+0x44>)
   d4332:	f000 faeb 	bl	d490c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
if (strcmp(data, "far") == 0){
   d4336:	490f      	ldr	r1, [pc, #60]	; (d4374 <_Z13alphaHandler4PKcS0_+0x48>)
   d4338:	4620      	mov	r0, r4
   d433a:	f002 fe69 	bl	d7010 <strcmp>
  pixels.setPixelColor(0, pixels.Color(5,0,5,1)); 
   d433e:	2301      	movs	r3, #1
if (strcmp(data, "far") == 0){
   d4340:	4601      	mov	r1, r0
   d4342:	b960      	cbnz	r0, d435e <_Z13alphaHandler4PKcS0_+0x32>
  pixels.setPixelColor(0, pixels.Color(5,0,5,1)); 
   d4344:	2205      	movs	r2, #5
   d4346:	9001      	str	r0, [sp, #4]
   d4348:	4610      	mov	r0, r2
   d434a:	f000 fe04 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d434e:	9901      	ldr	r1, [sp, #4]
   d4350:	4602      	mov	r2, r0
} else { //near
  pixels.setPixelColor(0, pixels.Color(0,5,0,1)); 
   d4352:	4809      	ldr	r0, [pc, #36]	; (d4378 <_Z13alphaHandler4PKcS0_+0x4c>)
}

}
   d4354:	b002      	add	sp, #8
   d4356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pixels.setPixelColor(0, pixels.Color(0,5,0,1)); 
   d435a:	f000 bdb3 	b.w	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   d435e:	2200      	movs	r2, #0
   d4360:	2105      	movs	r1, #5
   d4362:	4610      	mov	r0, r2
   d4364:	f000 fdf7 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4368:	2100      	movs	r1, #0
   d436a:	4602      	mov	r2, r0
   d436c:	e7f1      	b.n	d4352 <_Z13alphaHandler4PKcS0_+0x26>
   d436e:	bf00      	nop
   d4370:	2003e43c 	.word	0x2003e43c
   d4374:	000d8e74 	.word	0x000d8e74
   d4378:	2003e480 	.word	0x2003e480

000d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d437c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d437e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4380:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4382:	b17c      	cbz	r4, d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4384:	6863      	ldr	r3, [r4, #4]
   d4386:	3b01      	subs	r3, #1
   d4388:	6063      	str	r3, [r4, #4]
   d438a:	b95b      	cbnz	r3, d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d438c:	6823      	ldr	r3, [r4, #0]
   d438e:	4620      	mov	r0, r4
   d4390:	689b      	ldr	r3, [r3, #8]
   d4392:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4394:	68a3      	ldr	r3, [r4, #8]
   d4396:	3b01      	subs	r3, #1
   d4398:	60a3      	str	r3, [r4, #8]
   d439a:	b91b      	cbnz	r3, d43a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d439c:	6823      	ldr	r3, [r4, #0]
   d439e:	4620      	mov	r0, r4
   d43a0:	68db      	ldr	r3, [r3, #12]
   d43a2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d43a4:	4628      	mov	r0, r5
   d43a6:	bd38      	pop	{r3, r4, r5, pc}

000d43a8 <_Z13alphaHandler1PKcS0_>:
{
   d43a8:	b513      	push	{r0, r1, r4, lr}
Particle.publish("alphaOnline", "on"); // respond to the other being online
   d43aa:	4a1d      	ldr	r2, [pc, #116]	; (d4420 <_Z13alphaHandler1PKcS0_+0x78>)
{
   d43ac:	460c      	mov	r4, r1
Particle.publish("alphaOnline", "on"); // respond to the other being online
   d43ae:	4668      	mov	r0, sp
   d43b0:	491c      	ldr	r1, [pc, #112]	; (d4424 <_Z13alphaHandler1PKcS0_+0x7c>)
   d43b2:	f7ff fe7f 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43b6:	a801      	add	r0, sp, #4
   d43b8:	f7ff ffe0 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
if (strcmp(data, "on") == 0) // -> beta is online
   d43bc:	4620      	mov	r0, r4
   d43be:	4918      	ldr	r1, [pc, #96]	; (d4420 <_Z13alphaHandler1PKcS0_+0x78>)
   d43c0:	4c19      	ldr	r4, [pc, #100]	; (d4428 <_Z13alphaHandler1PKcS0_+0x80>)
   d43c2:	f002 fe25 	bl	d7010 <strcmp>
   d43c6:	b9d8      	cbnz	r0, d4400 <_Z13alphaHandler1PKcS0_+0x58>
tone(buzzSens, 1000, 500);
   d43c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d43cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d43d0:	7820      	ldrb	r0, [r4, #0]
   d43d2:	f001 fddb 	bl	d5f8c <tone>
delay(200);
   d43d6:	20c8      	movs	r0, #200	; 0xc8
   d43d8:	f001 f810 	bl	d53fc <delay>
tone(buzzSens, 2000, 500);
   d43dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d43e0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d43e4:	7820      	ldrb	r0, [r4, #0]
   d43e6:	f001 fdd1 	bl	d5f8c <tone>
delay(200);
   d43ea:	20c8      	movs	r0, #200	; 0xc8
   d43ec:	f001 f806 	bl	d53fc <delay>
tone(buzzSens, 3000, 200);
   d43f0:	7820      	ldrb	r0, [r4, #0]
   d43f2:	22c8      	movs	r2, #200	; 0xc8
   d43f4:	f640 31b8 	movw	r1, #3000	; 0xbb8
   d43f8:	f001 fdc8 	bl	d5f8c <tone>
}
   d43fc:	b002      	add	sp, #8
   d43fe:	bd10      	pop	{r4, pc}
tone(buzzSens, 1000, 100);
   d4400:	7820      	ldrb	r0, [r4, #0]
   d4402:	2264      	movs	r2, #100	; 0x64
   d4404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4408:	f001 fdc0 	bl	d5f8c <tone>
delay(200);
   d440c:	20c8      	movs	r0, #200	; 0xc8
   d440e:	f000 fff5 	bl	d53fc <delay>
tone(buzzSens, 1000, 100);
   d4412:	7820      	ldrb	r0, [r4, #0]
   d4414:	2264      	movs	r2, #100	; 0x64
   d4416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d441a:	f001 fdb7 	bl	d5f8c <tone>
}
   d441e:	e7ed      	b.n	d43fc <_Z13alphaHandler1PKcS0_+0x54>
   d4420:	000d8f09 	.word	0x000d8f09
   d4424:	000d8e78 	.word	0x000d8e78
   d4428:	2003e240 	.word	0x2003e240

000d442c <loop>:
void loop(){
   d442c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4430:	b087      	sub	sp, #28
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4432:	f000 ff1b 	bl	d526c <spark_cloud_flag_connected>
if (Particle.connected()) {
   d4436:	b138      	cbz	r0, d4448 <loop+0x1c>
Particle.publish("alphaOnline", "on");
   d4438:	a802      	add	r0, sp, #8
   d443a:	4a81      	ldr	r2, [pc, #516]	; (d4640 <loop+0x214>)
   d443c:	4981      	ldr	r1, [pc, #516]	; (d4644 <loop+0x218>)
   d443e:	f7ff fe39 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4442:	a803      	add	r0, sp, #12
   d4444:	f7ff ff9a 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4448:	f000 ff10 	bl	d526c <spark_cloud_flag_connected>
if (Particle.disconnected()) {
   d444c:	b938      	cbnz	r0, d445e <loop+0x32>
Particle.publish("alphaOnline", "off");
   d444e:	a802      	add	r0, sp, #8
   d4450:	4a7d      	ldr	r2, [pc, #500]	; (d4648 <loop+0x21c>)
   d4452:	497c      	ldr	r1, [pc, #496]	; (d4644 <loop+0x218>)
   d4454:	f7ff fe2e 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4458:	a803      	add	r0, sp, #12
   d445a:	f7ff ff8f 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
resVal=analogRead(photoSens);
   d445e:	4b7b      	ldr	r3, [pc, #492]	; (d464c <loop+0x220>)
   d4460:	4c7b      	ldr	r4, [pc, #492]	; (d4650 <loop+0x224>)
   d4462:	8818      	ldrh	r0, [r3, #0]
   d4464:	f002 f84f 	bl	d6506 <analogRead>
if (300 < resVal){
   d4468:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
resVal=analogRead(photoSens);
   d446c:	6020      	str	r0, [r4, #0]
  	pixels.setPixelColor(1, pixels.Color(10,0,0,0)); // Moderately bright green color.
   d446e:	f04f 0300 	mov.w	r3, #0
if (300 < resVal){
   d4472:	dd47      	ble.n	d4504 <loop+0xd8>
  	pixels.setPixelColor(1, pixels.Color(10,0,0,0)); // Moderately bright green color.
   d4474:	461a      	mov	r2, r3
   d4476:	4619      	mov	r1, r3
   d4478:	200a      	movs	r0, #10
   d447a:	f000 fd6c 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d447e:	2101      	movs	r1, #1
   d4480:	4602      	mov	r2, r0
   d4482:	4874      	ldr	r0, [pc, #464]	; (d4654 <loop+0x228>)
   d4484:	f000 fd1e 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        pixels.show();
   d4488:	4872      	ldr	r0, [pc, #456]	; (d4654 <loop+0x228>)
   d448a:	f000 fb75 	bl	d4b78 <_ZN17Adafruit_NeoPixel4showEv>
Particle.publish("lighting1", String(resVal));
   d448e:	6821      	ldr	r1, [r4, #0]
   d4490:	220a      	movs	r2, #10
   d4492:	a802      	add	r0, sp, #8
   d4494:	f001 fd4b 	bl	d5f2e <_ZN6StringC1Eih>
   d4498:	9a02      	ldr	r2, [sp, #8]
   d449a:	496f      	ldr	r1, [pc, #444]	; (d4658 <loop+0x22c>)
buttonState = digitalRead(tiltSens);
   d449c:	4e6f      	ldr	r6, [pc, #444]	; (d465c <loop+0x230>)
    if (buttonState != lastButtonState) {
   d449e:	4f70      	ldr	r7, [pc, #448]	; (d4660 <loop+0x234>)
   d44a0:	4c70      	ldr	r4, [pc, #448]	; (d4664 <loop+0x238>)
    Particle.publish("lighting3", String(resVal));
   d44a2:	4668      	mov	r0, sp
   d44a4:	f7ff fe06 	bl	d40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d44a8:	a801      	add	r0, sp, #4
   d44aa:	f7ff ff67 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44ae:	a802      	add	r0, sp, #8
   d44b0:	f001 fccc 	bl	d5e4c <_ZN6StringD1Ev>
    pixels.show();
   d44b4:	4867      	ldr	r0, [pc, #412]	; (d4654 <loop+0x228>)
   d44b6:	f000 fb5f 	bl	d4b78 <_ZN17Adafruit_NeoPixel4showEv>
buttonState = digitalRead(tiltSens);
   d44ba:	8830      	ldrh	r0, [r6, #0]
   d44bc:	f002 f810 	bl	d64e0 <digitalRead>
    if (buttonState != lastButtonState) {
   d44c0:	683a      	ldr	r2, [r7, #0]
buttonState = digitalRead(tiltSens);
   d44c2:	4b69      	ldr	r3, [pc, #420]	; (d4668 <loop+0x23c>)
    if (buttonState != lastButtonState) {
   d44c4:	4290      	cmp	r0, r2
buttonState = digitalRead(tiltSens);
   d44c6:	6018      	str	r0, [r3, #0]
    if (buttonState != lastButtonState) {
   d44c8:	4698      	mov	r8, r3
   d44ca:	d051      	beq.n	d4570 <loop+0x144>
       Serial.println(colorMode);
   d44cc:	f001 fe4e 	bl	d616c <_Z16_fetch_usbserialv>
   d44d0:	6825      	ldr	r5, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d44d2:	2d00      	cmp	r5, #0
   d44d4:	4681      	mov	r9, r0
   d44d6:	da41      	bge.n	d455c <loop+0x130>
            t = print('-');
   d44d8:	212d      	movs	r1, #45	; 0x2d
   d44da:	f001 fc3f 	bl	d5d5c <_ZN5Print5printEc>
            val = -n;
   d44de:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d44e0:	220a      	movs	r2, #10
   d44e2:	4648      	mov	r0, r9
   d44e4:	f001 fc53 	bl	d5d8e <_ZN5Print11printNumberEmh>
        n += println();
   d44e8:	4648      	mov	r0, r9
   d44ea:	f001 fc3a 	bl	d5d62 <_ZN5Print7printlnEv>
     if ((digitalRead(tiltSens) == HIGH) ||(digitalRead(tiltSens) == LOW) ) { 
   d44ee:	8830      	ldrh	r0, [r6, #0]
   d44f0:	f001 fff6 	bl	d64e0 <digitalRead>
   d44f4:	2801      	cmp	r0, #1
   d44f6:	d133      	bne.n	d4560 <loop+0x134>
    if (colorMode < 6) { //until it reaches the last mode, cycle to the next mode
   d44f8:	6823      	ldr	r3, [r4, #0]
   d44fa:	2b05      	cmp	r3, #5
   d44fc:	dd40      	ble.n	d4580 <loop+0x154>
      colorMode = 0; // after the last mode, cycle backs to first mode 
   d44fe:	2300      	movs	r3, #0
   d4500:	6023      	str	r3, [r4, #0]
   d4502:	e032      	b.n	d456a <loop+0x13e>
  else if (100 < resVal){
   d4504:	2864      	cmp	r0, #100	; 0x64
   d4506:	dd14      	ble.n	d4532 <loop+0x106>
  	pixels.setPixelColor(1, pixels.Color(0,10,0,0)); // Moderately bright green color.
   d4508:	461a      	mov	r2, r3
   d450a:	4618      	mov	r0, r3
   d450c:	210a      	movs	r1, #10
   d450e:	f000 fd22 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d4512:	2101      	movs	r1, #1
   d4514:	4602      	mov	r2, r0
   d4516:	484f      	ldr	r0, [pc, #316]	; (d4654 <loop+0x228>)
   d4518:	f000 fcd4 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        pixels.show();
   d451c:	484d      	ldr	r0, [pc, #308]	; (d4654 <loop+0x228>)
   d451e:	f000 fb2b 	bl	d4b78 <_ZN17Adafruit_NeoPixel4showEv>
    Particle.publish("lighting2", String(resVal));
   d4522:	6821      	ldr	r1, [r4, #0]
   d4524:	220a      	movs	r2, #10
   d4526:	a802      	add	r0, sp, #8
   d4528:	f001 fd01 	bl	d5f2e <_ZN6StringC1Eih>
   d452c:	9a02      	ldr	r2, [sp, #8]
   d452e:	494f      	ldr	r1, [pc, #316]	; (d466c <loop+0x240>)
   d4530:	e7b4      	b.n	d449c <loop+0x70>
  	pixels.setPixelColor(1, pixels.Color(0,0,10,0)); // Moderately bright green color.
   d4532:	4619      	mov	r1, r3
   d4534:	4618      	mov	r0, r3
   d4536:	220a      	movs	r2, #10
   d4538:	f000 fd0d 	bl	d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
   d453c:	2101      	movs	r1, #1
   d453e:	4602      	mov	r2, r0
   d4540:	4844      	ldr	r0, [pc, #272]	; (d4654 <loop+0x228>)
   d4542:	f000 fcbf 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        pixels.show();
   d4546:	4843      	ldr	r0, [pc, #268]	; (d4654 <loop+0x228>)
   d4548:	f000 fb16 	bl	d4b78 <_ZN17Adafruit_NeoPixel4showEv>
    Particle.publish("lighting3", String(resVal));
   d454c:	6821      	ldr	r1, [r4, #0]
   d454e:	220a      	movs	r2, #10
   d4550:	a802      	add	r0, sp, #8
   d4552:	f001 fcec 	bl	d5f2e <_ZN6StringC1Eih>
   d4556:	9a02      	ldr	r2, [sp, #8]
   d4558:	4945      	ldr	r1, [pc, #276]	; (d4670 <loop+0x244>)
   d455a:	e79f      	b.n	d449c <loop+0x70>
            val = n;
   d455c:	4629      	mov	r1, r5
   d455e:	e7bf      	b.n	d44e0 <loop+0xb4>
     if ((digitalRead(tiltSens) == HIGH) ||(digitalRead(tiltSens) == LOW) ) { 
   d4560:	8830      	ldrh	r0, [r6, #0]
   d4562:	f001 ffbd 	bl	d64e0 <digitalRead>
   d4566:	2800      	cmp	r0, #0
   d4568:	d0c6      	beq.n	d44f8 <loop+0xcc>
      lastButtonState = buttonState; //upade state out of loop
   d456a:	f8d8 3000 	ldr.w	r3, [r8]
   d456e:	603b      	str	r3, [r7, #0]
switch (colorMode)
   d4570:	6823      	ldr	r3, [r4, #0]
   d4572:	2b05      	cmp	r3, #5
   d4574:	d811      	bhi.n	d459a <loop+0x16e>
   d4576:	e8df f003 	tbb	[pc, r3]
   d457a:	2506      	.short	0x2506
   d457c:	35312d29 	.word	0x35312d29
      colorMode = colorMode + 1;
   d4580:	3301      	adds	r3, #1
   d4582:	6023      	str	r3, [r4, #0]
   d4584:	e7f1      	b.n	d456a <loop+0x13e>
   	pixels.setPixelColor(2, pixels.Color(100,0,0));
   d4586:	2200      	movs	r2, #0
   d4588:	4611      	mov	r1, r2
   d458a:	2064      	movs	r0, #100	; 0x64
    	pixels.setPixelColor(2, pixels.Color(100,100,0));
   d458c:	f000 fcde 	bl	d4f4c <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4590:	2102      	movs	r1, #2
   d4592:	4602      	mov	r2, r0
   d4594:	482f      	ldr	r0, [pc, #188]	; (d4654 <loop+0x228>)
   d4596:	f000 fc95 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  if ((colorMode == 0) && (colorModeBeta == 0)){
   d459a:	6823      	ldr	r3, [r4, #0]
   d459c:	bb2b      	cbnz	r3, d45ea <loop+0x1be>
   d459e:	4b35      	ldr	r3, [pc, #212]	; (d4674 <loop+0x248>)
   d45a0:	681a      	ldr	r2, [r3, #0]
   d45a2:	2a00      	cmp	r2, #0
   d45a4:	d148      	bne.n	d4638 <loop+0x20c>
      	pixels.setPixelColor(3, pixels.Color(100,0,0));
   d45a6:	4611      	mov	r1, r2
   d45a8:	2064      	movs	r0, #100	; 0x64
          	pixels.setPixelColor(3, pixels.Color(0,100,100));
   d45aa:	f000 fccf 	bl	d4f4c <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d45ae:	2103      	movs	r1, #3
   d45b0:	4602      	mov	r2, r0
   d45b2:	4828      	ldr	r0, [pc, #160]	; (d4654 <loop+0x228>)
   d45b4:	f000 fc86 	bl	d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    locator.loop();
   d45b8:	482f      	ldr	r0, [pc, #188]	; (d4678 <loop+0x24c>)
   d45ba:	f000 f9e3 	bl	d4984 <_ZN23GoogleMapsDeviceLocator4loopEv>
}
   d45be:	b007      	add	sp, #28
   d45c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	pixels.setPixelColor(2, pixels.Color(0,100,0));
   d45c4:	2200      	movs	r2, #0
   d45c6:	2164      	movs	r1, #100	; 0x64
   d45c8:	4610      	mov	r0, r2
   d45ca:	e7df      	b.n	d458c <loop+0x160>
   	pixels.setPixelColor(2, pixels.Color(0,0,100)); 
   d45cc:	2264      	movs	r2, #100	; 0x64
   d45ce:	2100      	movs	r1, #0
    	pixels.setPixelColor(2, pixels.Color(100,100,0));
   d45d0:	4608      	mov	r0, r1
   d45d2:	e7db      	b.n	d458c <loop+0x160>
    	pixels.setPixelColor(2, pixels.Color(100,0,100));
   d45d4:	2264      	movs	r2, #100	; 0x64
   d45d6:	2100      	movs	r1, #0
   d45d8:	4610      	mov	r0, r2
   d45da:	e7d7      	b.n	d458c <loop+0x160>
    	pixels.setPixelColor(2, pixels.Color(0,100,100));
   d45dc:	2264      	movs	r2, #100	; 0x64
   d45de:	4611      	mov	r1, r2
   d45e0:	2000      	movs	r0, #0
   d45e2:	e7d3      	b.n	d458c <loop+0x160>
    	pixels.setPixelColor(2, pixels.Color(100,100,0));
   d45e4:	2200      	movs	r2, #0
   d45e6:	2164      	movs	r1, #100	; 0x64
   d45e8:	e7f2      	b.n	d45d0 <loop+0x1a4>
  } else if ((colorMode == 1) && (colorModeBeta == 1)){
   d45ea:	2b01      	cmp	r3, #1
   d45ec:	d107      	bne.n	d45fe <loop+0x1d2>
   d45ee:	4b21      	ldr	r3, [pc, #132]	; (d4674 <loop+0x248>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	2b01      	cmp	r3, #1
   d45f4:	d120      	bne.n	d4638 <loop+0x20c>
        	pixels.setPixelColor(3, pixels.Color(0,100,0));
   d45f6:	2200      	movs	r2, #0
   d45f8:	2164      	movs	r1, #100	; 0x64
          	pixels.setPixelColor(3, pixels.Color(0,100,100));
   d45fa:	2000      	movs	r0, #0
   d45fc:	e7d5      	b.n	d45aa <loop+0x17e>
  } else if ((colorMode == 2) && (colorModeBeta == 2)){
   d45fe:	2b02      	cmp	r3, #2
   d4600:	d106      	bne.n	d4610 <loop+0x1e4>
   d4602:	4b1c      	ldr	r3, [pc, #112]	; (d4674 <loop+0x248>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	2b02      	cmp	r3, #2
   d4608:	d116      	bne.n	d4638 <loop+0x20c>
        	pixels.setPixelColor(3, pixels.Color(0,0,100));
   d460a:	2264      	movs	r2, #100	; 0x64
   d460c:	2100      	movs	r1, #0
   d460e:	e7f4      	b.n	d45fa <loop+0x1ce>
  }  else if ((colorMode == 3) && (colorModeBeta == 3)){
   d4610:	2b03      	cmp	r3, #3
   d4612:	d107      	bne.n	d4624 <loop+0x1f8>
   d4614:	4b17      	ldr	r3, [pc, #92]	; (d4674 <loop+0x248>)
   d4616:	681c      	ldr	r4, [r3, #0]
   d4618:	2c03      	cmp	r4, #3
   d461a:	d10d      	bne.n	d4638 <loop+0x20c>
        	pixels.setPixelColor(3, pixels.Color(100,0,100));
   d461c:	2264      	movs	r2, #100	; 0x64
   d461e:	2100      	movs	r1, #0
   d4620:	4610      	mov	r0, r2
   d4622:	e7c2      	b.n	d45aa <loop+0x17e>
  } else if ((colorMode == 4) && (colorModeBeta == 2)){
   d4624:	2b04      	cmp	r3, #4
   d4626:	d107      	bne.n	d4638 <loop+0x20c>
   d4628:	4b12      	ldr	r3, [pc, #72]	; (d4674 <loop+0x248>)
   d462a:	681b      	ldr	r3, [r3, #0]
   d462c:	2b02      	cmp	r3, #2
   d462e:	d103      	bne.n	d4638 <loop+0x20c>
        	pixels.setPixelColor(3, pixels.Color(200,100,200));
   d4630:	22c8      	movs	r2, #200	; 0xc8
   d4632:	2164      	movs	r1, #100	; 0x64
   d4634:	4610      	mov	r0, r2
   d4636:	e7b8      	b.n	d45aa <loop+0x17e>
          	pixels.setPixelColor(3, pixels.Color(0,100,100));
   d4638:	2264      	movs	r2, #100	; 0x64
   d463a:	4611      	mov	r1, r2
   d463c:	e7dd      	b.n	d45fa <loop+0x1ce>
   d463e:	bf00      	nop
   d4640:	000d8f09 	.word	0x000d8f09
   d4644:	000d8e78 	.word	0x000d8e78
   d4648:	000d8e84 	.word	0x000d8e84
   d464c:	2003e244 	.word	0x2003e244
   d4650:	2003e494 	.word	0x2003e494
   d4654:	2003e480 	.word	0x2003e480
   d4658:	000d8e88 	.word	0x000d8e88
   d465c:	2003e248 	.word	0x2003e248
   d4660:	2003e438 	.word	0x2003e438
   d4664:	2003e430 	.word	0x2003e430
   d4668:	2003e42c 	.word	0x2003e42c
   d466c:	000d8e92 	.word	0x000d8e92
   d4670:	000d8e9c 	.word	0x000d8e9c
   d4674:	2003e434 	.word	0x2003e434
   d4678:	2003e43c 	.word	0x2003e43c

000d467c <_GLOBAL__sub_I_locator>:
}
   d467c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d467e:	4b07      	ldr	r3, [pc, #28]	; (d469c <_GLOBAL__sub_I_locator+0x20>)
GoogleMapsDeviceLocator locator;
   d4680:	4807      	ldr	r0, [pc, #28]	; (d46a0 <_GLOBAL__sub_I_locator+0x24>)
   d4682:	2200      	movs	r2, #0
   d4684:	701a      	strb	r2, [r3, #0]
   d4686:	f000 f8ef 	bl	d4868 <_ZN23GoogleMapsDeviceLocatorC1Ev>
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(7, D6, SK6812RGBW);
   d468a:	2306      	movs	r3, #6
}
   d468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(7, D6, SK6812RGBW);
   d4690:	4804      	ldr	r0, [pc, #16]	; (d46a4 <_GLOBAL__sub_I_locator+0x28>)
   d4692:	461a      	mov	r2, r3
   d4694:	2107      	movs	r1, #7
   d4696:	f000 ba5d 	b.w	d4b54 <_ZN17Adafruit_NeoPixelC1Ethh>
   d469a:	bf00      	nop
   d469c:	2003e428 	.word	0x2003e428
   d46a0:	2003e43c 	.word	0x2003e43c
   d46a4:	2003e480 	.word	0x2003e480

000d46a8 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d46a8:	b510      	push	{r4, lr}
   d46aa:	4b06      	ldr	r3, [pc, #24]	; (d46c4 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
   d46ac:	4604      	mov	r4, r0
   d46ae:	f840 3b2c 	str.w	r3, [r0], #44
   d46b2:	f001 fbcb 	bl	d5e4c <_ZN6StringD1Ev>
   d46b6:	f104 000c 	add.w	r0, r4, #12
   d46ba:	f001 fbc7 	bl	d5e4c <_ZN6StringD1Ev>

}
   d46be:	4620      	mov	r0, r4
   d46c0:	bd10      	pop	{r4, pc}
   d46c2:	bf00      	nop
   d46c4:	000d8f34 	.word	0x000d8f34

000d46c8 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d46c8:	b510      	push	{r4, lr}
   d46ca:	4604      	mov	r4, r0
}
   d46cc:	f7ff ffec 	bl	d46a8 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d46d0:	4620      	mov	r0, r4
   d46d2:	2144      	movs	r1, #68	; 0x44
   d46d4:	f001 ff6c 	bl	d65b0 <_ZdlPvj>
   d46d8:	4620      	mov	r0, r4
   d46da:	bd10      	pop	{r4, pc}

000d46dc <_ZL16wifiScanCallbackP15WiFiAccessPointPv>:



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d46dc:	b570      	push	{r4, r5, r6, lr}
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d46de:	4d1b      	ldr	r5, [pc, #108]	; (d474c <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x70>)
   d46e0:	4c1b      	ldr	r4, [pc, #108]	; (d4750 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x74>)
   d46e2:	682e      	ldr	r6, [r5, #0]
   d46e4:	1ba4      	subs	r4, r4, r6
	if (spaceLeft < 30) {
   d46e6:	2c1d      	cmp	r4, #29
static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d46e8:	b088      	sub	sp, #32
	if (spaceLeft < 30) {
   d46ea:	d92d      	bls.n	d4748 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
		return;
	}

	int sizeNeeded = snprintf(requestCur, spaceLeft,
   d46ec:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   d46f0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d46f4:	9307      	str	r3, [sp, #28]
   d46f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   d46f8:	9306      	str	r3, [sp, #24]
   d46fa:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d46fe:	9305      	str	r3, [sp, #20]
   d4700:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d4704:	9304      	str	r3, [sp, #16]
   d4706:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d470a:	9303      	str	r3, [sp, #12]
   d470c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d4710:	9302      	str	r3, [sp, #8]
   d4712:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   d4716:	9301      	str	r3, [sp, #4]
   d4718:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   d471c:	4a0d      	ldr	r2, [pc, #52]	; (d4754 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x78>)
   d471e:	9300      	str	r3, [sp, #0]
   d4720:	4b0d      	ldr	r3, [pc, #52]	; (d4758 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x7c>)
   d4722:	4630      	mov	r0, r6
   d4724:	295b      	cmp	r1, #91	; 0x5b
   d4726:	bf18      	it	ne
   d4728:	4613      	movne	r3, r2
   d472a:	4a0c      	ldr	r2, [pc, #48]	; (d475c <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x80>)
   d472c:	4621      	mov	r1, r4
   d472e:	f000 fe3d 	bl	d53ac <snprintf>
			"%s{\"m\":\"%02x:%02x:%02x:%02x:%02x:%02x\",\"s\":%d,\"c\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded > 0 && sizeNeeded < (int)spaceLeft) {
   d4732:	2800      	cmp	r0, #0
   d4734:	dd08      	ble.n	d4748 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
   d4736:	4284      	cmp	r4, r0
   d4738:	dd06      	ble.n	d4748 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d473a:	682b      	ldr	r3, [r5, #0]
		numAdded++;
   d473c:	4a08      	ldr	r2, [pc, #32]	; (d4760 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x84>)
		requestCur += sizeNeeded;
   d473e:	4418      	add	r0, r3
		numAdded++;
   d4740:	6813      	ldr	r3, [r2, #0]
		requestCur += sizeNeeded;
   d4742:	6028      	str	r0, [r5, #0]
		numAdded++;
   d4744:	3301      	adds	r3, #1
   d4746:	6013      	str	r3, [r2, #0]
	}
}
   d4748:	b008      	add	sp, #32
   d474a:	bd70      	pop	{r4, r5, r6, pc}
   d474c:	2003e598 	.word	0x2003e598
   d4750:	2003e595 	.word	0x2003e595
   d4754:	000d8ea6 	.word	0x000d8ea6
   d4758:	000d8ea7 	.word	0x000d8ea7
   d475c:	000d8ea8 	.word	0x000d8ea8
   d4760:	2003e5a0 	.word	0x2003e5a0

000d4764 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4768:	4604      	mov	r4, r0
   d476a:	ed2d 8b02 	vpush	{d8}
	if (callback) {
   d476e:	6a63      	ldr	r3, [r4, #36]	; 0x24
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4770:	b083      	sub	sp, #12
   d4772:	4610      	mov	r0, r2
	if (callback) {
   d4774:	2b00      	cmp	r3, #0
   d4776:	d038      	beq.n	d47ea <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x86>
		char *mutableCopy = strdup(data);
   d4778:	f002 fc5c 	bl	d7034 <strdup>
		part = strtok_r(mutableCopy, ",", &end);
   d477c:	491d      	ldr	r1, [pc, #116]	; (d47f4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x90>)
   d477e:	aa01      	add	r2, sp, #4
		char *mutableCopy = strdup(data);
   d4780:	4605      	mov	r5, r0
		part = strtok_r(mutableCopy, ",", &end);
   d4782:	f003 faeb 	bl	d7d5c <strtok_r>
		if (part) {
   d4786:	b368      	cbz	r0, d47e4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x80>
			lat = atof(part);
   d4788:	f002 fc04 	bl	d6f94 <atof>
			part = strtok_r(NULL, ",", &end);
   d478c:	4919      	ldr	r1, [pc, #100]	; (d47f4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x90>)
   d478e:	aa01      	add	r2, sp, #4
   d4790:	2000      	movs	r0, #0
			lat = atof(part);
   d4792:	ec57 6b10 	vmov	r6, r7, d0
			part = strtok_r(NULL, ",", &end);
   d4796:	f003 fae1 	bl	d7d5c <strtok_r>
			if (part) {
   d479a:	b318      	cbz	r0, d47e4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x80>
				lon = atof(part);
   d479c:	f002 fbfa 	bl	d6f94 <atof>
				part = strtok_r(NULL, ",", &end);
   d47a0:	4914      	ldr	r1, [pc, #80]	; (d47f4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x90>)
   d47a2:	aa01      	add	r2, sp, #4
   d47a4:	2000      	movs	r0, #0
				lon = atof(part);
   d47a6:	ec59 8b10 	vmov	r8, r9, d0
				part = strtok_r(NULL, ",", &end);
   d47aa:	f003 fad7 	bl	d7d5c <strtok_r>
				if (part) {
   d47ae:	b1c8      	cbz	r0, d47e4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x80>
					accuracy = atof(part);
   d47b0:	f002 fbf0 	bl	d6f94 <atof>
   d47b4:	ec51 0b10 	vmov	r0, r1, d0
   d47b8:	f002 fb78 	bl	d6eac <__aeabi_d2f>
				lon = atof(part);
   d47bc:	4649      	mov	r1, r9
					accuracy = atof(part);
   d47be:	ee08 0a90 	vmov	s17, r0
				lon = atof(part);
   d47c2:	4640      	mov	r0, r8
   d47c4:	f002 fb72 	bl	d6eac <__aeabi_d2f>
			lat = atof(part);
   d47c8:	4639      	mov	r1, r7
				lon = atof(part);
   d47ca:	ee08 0a10 	vmov	s16, r0
			lat = atof(part);
   d47ce:	4630      	mov	r0, r6
   d47d0:	f002 fb6c 	bl	d6eac <__aeabi_d2f>
					(*callback)(lat, lon, accuracy);
   d47d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d47d6:	ee00 0a10 	vmov	s0, r0
   d47da:	eeb0 1a68 	vmov.f32	s2, s17
   d47de:	eef0 0a48 	vmov.f32	s1, s16
   d47e2:	4798      	blx	r3
		free(mutableCopy);
   d47e4:	4628      	mov	r0, r5
   d47e6:	f000 fdd1 	bl	d538c <free>
}
   d47ea:	b003      	add	sp, #12
   d47ec:	ecbd 8b02 	vpop	{d8}
   d47f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d47f4:	000d8ea6 	.word	0x000d8ea6

000d47f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d47f8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d47fa:	b538      	push	{r3, r4, r5, lr}
   d47fc:	4604      	mov	r4, r0
	  switch (__op)
   d47fe:	d007      	beq.n	d4810 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d4800:	2a03      	cmp	r2, #3
   d4802:	d011      	beq.n	d4828 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d4804:	2a01      	cmp	r2, #1
   d4806:	d101      	bne.n	d480c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4808:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d480a:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d480c:	2000      	movs	r0, #0
   d480e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4810:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d4812:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4814:	f7ff fc3f 	bl	d4096 <_Znwj>
   d4818:	4603      	mov	r3, r0
   d481a:	2800      	cmp	r0, #0
   d481c:	d0f5      	beq.n	d480a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d481e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4822:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4826:	e7f0      	b.n	d480a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d4828:	6800      	ldr	r0, [r0, #0]
   d482a:	2800      	cmp	r0, #0
   d482c:	d0ee      	beq.n	d480c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d482e:	210c      	movs	r1, #12
   d4830:	f001 febe 	bl	d65b0 <_ZdlPvj>
   d4834:	e7ea      	b.n	d480c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d4836 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM23GoogleMapsDeviceLocatorFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4836:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d4838:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
   d483a:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d483c:	685c      	ldr	r4, [r3, #4]
   d483e:	689d      	ldr	r5, [r3, #8]
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6812      	ldr	r2, [r2, #0]
   d4844:	1066      	asrs	r6, r4, #1
   d4846:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d484a:	07e4      	lsls	r4, r4, #31
   d484c:	bf44      	itt	mi
   d484e:	59ac      	ldrmi	r4, [r5, r6]
   d4850:	58e3      	ldrmi	r3, [r4, r3]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4852:	bc70      	pop	{r4, r5, r6}
   d4854:	4718      	bx	r3

000d4856 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4856:	b510      	push	{r4, lr}
      if (_M_manager)
   d4858:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d485a:	4604      	mov	r4, r0
      if (_M_manager)
   d485c:	b113      	cbz	r3, d4864 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d485e:	2203      	movs	r2, #3
   d4860:	4601      	mov	r1, r0
   d4862:	4798      	blx	r3
    }
   d4864:	4620      	mov	r0, r4
   d4866:	bd10      	pop	{r4, pc}

000d4868 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4868:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d486a:	4b0f      	ldr	r3, [pc, #60]	; (d48a8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
   d486c:	6003      	str	r3, [r0, #0]
   d486e:	2500      	movs	r5, #0
   d4870:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4874:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4876:	e9c0 5301 	strd	r5, r3, [r0, #4]
   d487a:	490c      	ldr	r1, [pc, #48]	; (d48ac <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
   d487c:	300c      	adds	r0, #12
   d487e:	f001 fb30 	bl	d5ee2 <_ZN6StringC1EPKc>
   d4882:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4886:	62a3      	str	r3, [r4, #40]	; 0x28
   d4888:	e9c4 5507 	strd	r5, r5, [r4, #28]
   d488c:	4908      	ldr	r1, [pc, #32]	; (d48b0 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
   d488e:	6265      	str	r5, [r4, #36]	; 0x24
   d4890:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4894:	f001 fb25 	bl	d5ee2 <_ZN6StringC1EPKc>
   d4898:	f44f 729b 	mov.w	r2, #310	; 0x136
   d489c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   d48a0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
   d48a4:	4620      	mov	r0, r4
   d48a6:	bd38      	pop	{r3, r4, r5, pc}
   d48a8:	000d8f34 	.word	0x000d8f34
   d48ac:	000d8ede 	.word	0x000d8ede
   d48b0:	000d8eec 	.word	0x000d8eec

000d48b4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>:


const char *GoogleMapsDeviceLocator::wifiScan() {
   d48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d48b6:	4c10      	ldr	r4, [pc, #64]	; (d48f8 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
	numAdded = 0;
   d48b8:	4f10      	ldr	r7, [pc, #64]	; (d48fc <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x48>)
	*requestCur++ = '[';
   d48ba:	4e11      	ldr	r6, [pc, #68]	; (d4900 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x4c>)
	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d48bc:	4911      	ldr	r1, [pc, #68]	; (d4904 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x50>)
	numAdded = 0;
   d48be:	2500      	movs	r5, #0
	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d48c0:	4620      	mov	r0, r4
	numAdded = 0;
   d48c2:	603d      	str	r5, [r7, #0]
	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d48c4:	f002 fbae 	bl	d7024 <strcpy>
	*requestCur++ = '[';
   d48c8:	f104 030b 	add.w	r3, r4, #11
   d48cc:	6033      	str	r3, [r6, #0]
    {
        setIPAddressSource(DYNAMIC_IP);
    }

    int scan(wlan_scan_result_t callback, void* cookie=NULL) {
        return wlan_scan(callback, cookie);
   d48ce:	480e      	ldr	r0, [pc, #56]	; (d4908 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x54>)
   d48d0:	235b      	movs	r3, #91	; 0x5b
   d48d2:	4629      	mov	r1, r5
   d48d4:	72a3      	strb	r3, [r4, #10]
   d48d6:	f000 fc8d 	bl	d51f4 <wlan_scan>

	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
   d48da:	6833      	ldr	r3, [r6, #0]
   d48dc:	225d      	movs	r2, #93	; 0x5d
   d48de:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d48e0:	227d      	movs	r2, #125	; 0x7d
   d48e2:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d48e4:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d48e6:	70dd      	strb	r5, [r3, #3]
   d48e8:	1d1a      	adds	r2, r3, #4

	if (numAdded == 0) {
   d48ea:	683b      	ldr	r3, [r7, #0]
	*requestCur++ = 0;
   d48ec:	6032      	str	r2, [r6, #0]
	if (numAdded == 0) {
   d48ee:	b903      	cbnz	r3, d48f2 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x3e>
		requestBuf[0] = 0;
   d48f0:	7023      	strb	r3, [r4, #0]
	}

	return requestBuf;
}
   d48f2:	4801      	ldr	r0, [pc, #4]	; (d48f8 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
   d48f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48f6:	bf00      	nop
   d48f8:	2003e498 	.word	0x2003e498
   d48fc:	2003e5a0 	.word	0x2003e5a0
   d4900:	2003e598 	.word	0x2003e598
   d4904:	000d8ef1 	.word	0x000d8ef1
   d4908:	000d46dd 	.word	0x000d46dd

000d490c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
void GoogleMapsDeviceLocator::publishLocation() {
   d490c:	b530      	push	{r4, r5, lr}
   d490e:	b085      	sub	sp, #20
   d4910:	4605      	mov	r5, r0
	Serial.println("publishLocation");
   d4912:	f001 fc2b 	bl	d616c <_Z16_fetch_usbserialv>
   d4916:	4918      	ldr	r1, [pc, #96]	; (d4978 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
   d4918:	f001 fa2f 	bl	d5d7a <_ZN5Print7printlnEPKc>
	return wifiScan();
   d491c:	4628      	mov	r0, r5
   d491e:	f7ff ffc9 	bl	d48b4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>
   d4922:	4604      	mov	r4, r0
	Serial.printlnf("scanData=%s", scanData);
   d4924:	f001 fc22 	bl	d616c <_Z16_fetch_usbserialv>
   d4928:	4914      	ldr	r1, [pc, #80]	; (d497c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
   d492a:	4622      	mov	r2, r4
   d492c:	f7ff fbda 	bl	d40e4 <_ZN5Print8printlnfEPKcz>
	if (scanData[0]) {
   d4930:	7823      	ldrb	r3, [r4, #0]
   d4932:	b1f3      	cbz	r3, d4972 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
   d4934:	f000 fc9a 	bl	d526c <spark_cloud_flag_connected>
		if (Particle.connected()) {
   d4938:	b1d8      	cbz	r0, d4972 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d493a:	4b11      	ldr	r3, [pc, #68]	; (d4980 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d493c:	68e9      	ldr	r1, [r5, #12]
   d493e:	781b      	ldrb	r3, [r3, #0]
   d4940:	f88d 3000 	strb.w	r3, [sp]
   d4944:	4622      	mov	r2, r4
   d4946:	233c      	movs	r3, #60	; 0x3c
   d4948:	a802      	add	r0, sp, #8
   d494a:	f000 fec3 	bl	d56d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d494e:	9c03      	ldr	r4, [sp, #12]
   d4950:	b17c      	cbz	r4, d4972 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
      if (--_M_use_count == 0)
   d4952:	6863      	ldr	r3, [r4, #4]
   d4954:	3b01      	subs	r3, #1
   d4956:	6063      	str	r3, [r4, #4]
   d4958:	b95b      	cbnz	r3, d4972 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
          _M_dispose();
   d495a:	6823      	ldr	r3, [r4, #0]
   d495c:	4620      	mov	r0, r4
   d495e:	689b      	ldr	r3, [r3, #8]
   d4960:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4962:	68a3      	ldr	r3, [r4, #8]
   d4964:	3b01      	subs	r3, #1
   d4966:	60a3      	str	r3, [r4, #8]
   d4968:	b91b      	cbnz	r3, d4972 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
            _M_destroy();
   d496a:	6823      	ldr	r3, [r4, #0]
   d496c:	4620      	mov	r0, r4
   d496e:	68db      	ldr	r3, [r3, #12]
   d4970:	4798      	blx	r3
}
   d4972:	b005      	add	sp, #20
   d4974:	bd30      	pop	{r4, r5, pc}
   d4976:	bf00      	nop
   d4978:	000d8efc 	.word	0x000d8efc
   d497c:	000d8f0c 	.word	0x000d8f0c
   d4980:	2003e59c 	.word	0x2003e59c

000d4984 <_ZN23GoogleMapsDeviceLocator4loopEv>:
void GoogleMapsDeviceLocator::loop() {
   d4984:	b510      	push	{r4, lr}
	switch(state) {
   d4986:	6a03      	ldr	r3, [r0, #32]
   d4988:	2b02      	cmp	r3, #2
void GoogleMapsDeviceLocator::loop() {
   d498a:	4604      	mov	r4, r0
	switch(state) {
   d498c:	d00b      	beq.n	d49a6 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
   d498e:	2b03      	cmp	r3, #3
   d4990:	d022      	beq.n	d49d8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x54>
   d4992:	b9bb      	cbnz	r3, d49c4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4994:	f000 fc6a 	bl	d526c <spark_cloud_flag_connected>
		if (Particle.connected()) {
   d4998:	b1a0      	cbz	r0, d49c4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			state = CONNECTED_WAIT_STATE;
   d499a:	2302      	movs	r3, #2
   d499c:	6223      	str	r3, [r4, #32]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d499e:	f000 fb09 	bl	d4fb4 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d49a2:	61e0      	str	r0, [r4, #28]
   d49a4:	e00e      	b.n	d49c4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
   d49a6:	f000 fb05 	bl	d4fb4 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - stateTime >= waitAfterConnect) {
   d49aa:	69e3      	ldr	r3, [r4, #28]
   d49ac:	1ac0      	subs	r0, r0, r3
   d49ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d49b0:	4298      	cmp	r0, r3
   d49b2:	d307      	bcc.n	d49c4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			if (locatorMode == LOCATOR_MODE_ONCE) {
   d49b4:	6863      	ldr	r3, [r4, #4]
   d49b6:	2b01      	cmp	r3, #1
   d49b8:	d105      	bne.n	d49c6 <_ZN23GoogleMapsDeviceLocator4loopEv+0x42>
				publishLocation();
   d49ba:	4620      	mov	r0, r4
   d49bc:	f7ff ffa6 	bl	d490c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
				state = IDLE_STATE;
   d49c0:	2304      	movs	r3, #4
   d49c2:	6223      	str	r3, [r4, #32]
}
   d49c4:	bd10      	pop	{r4, pc}
			if (locatorMode == LOCATOR_MODE_MANUAL) {
   d49c6:	2b00      	cmp	r3, #0
   d49c8:	d0fa      	beq.n	d49c0 <_ZN23GoogleMapsDeviceLocator4loopEv+0x3c>
				state = CONNECTED_STATE;
   d49ca:	2303      	movs	r3, #3
   d49cc:	6223      	str	r3, [r4, #32]
   d49ce:	f000 faf1 	bl	d4fb4 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d49d2:	68a3      	ldr	r3, [r4, #8]
   d49d4:	1ac0      	subs	r0, r0, r3
   d49d6:	e7e4      	b.n	d49a2 <_ZN23GoogleMapsDeviceLocator4loopEv+0x1e>
   d49d8:	f000 fc48 	bl	d526c <spark_cloud_flag_connected>
		if (Particle.connected()) {
   d49dc:	b170      	cbz	r0, d49fc <_ZN23GoogleMapsDeviceLocator4loopEv+0x78>
   d49de:	f000 fae9 	bl	d4fb4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
   d49e2:	69e3      	ldr	r3, [r4, #28]
   d49e4:	1ac0      	subs	r0, r0, r3
   d49e6:	68a3      	ldr	r3, [r4, #8]
   d49e8:	4298      	cmp	r0, r3
   d49ea:	d3eb      	bcc.n	d49c4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
   d49ec:	f000 fae2 	bl	d4fb4 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d49f0:	61e0      	str	r0, [r4, #28]
				publishLocation();
   d49f2:	4620      	mov	r0, r4
}
   d49f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				publishLocation();
   d49f8:	f7ff bf88 	b.w	d490c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			state = CONNECT_WAIT_STATE;
   d49fc:	6220      	str	r0, [r4, #32]
}
   d49fe:	e7e1      	b.n	d49c4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

000d4a00 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a00:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4a02:	2300      	movs	r3, #0
   d4a04:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4a06:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4a08:	4604      	mov	r4, r0
   d4a0a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4a0c:	b12b      	cbz	r3, d4a1a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4a0e:	2202      	movs	r2, #2
   d4a10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4a12:	68eb      	ldr	r3, [r5, #12]
   d4a14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4a16:	68ab      	ldr	r3, [r5, #8]
   d4a18:	60a3      	str	r3, [r4, #8]
	}
    }
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a20 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d4a20:	b530      	push	{r4, r5, lr}
   d4a22:	b08d      	sub	sp, #52	; 0x34
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d4a24:	68c3      	ldr	r3, [r0, #12]
	this->callback = callback;
   d4a26:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d4a28:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4a2a:	a808      	add	r0, sp, #32
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d4a2c:	9303      	str	r3, [sp, #12]
   d4a2e:	f000 fc25 	bl	d527c <spark_deviceID>
   d4a32:	9a08      	ldr	r2, [sp, #32]
   d4a34:	9b03      	ldr	r3, [sp, #12]
   d4a36:	9200      	str	r2, [sp, #0]
   d4a38:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4a3c:	4a1a      	ldr	r2, [pc, #104]	; (d4aa8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d4a3e:	481b      	ldr	r0, [pc, #108]	; (d4aac <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
   d4a40:	f000 fcb4 	bl	d53ac <snprintf>
   d4a44:	a808      	add	r0, sp, #32
   d4a46:	f001 fa01 	bl	d5e4c <_ZN6StringD1Ev>
    _Function_base() : _M_manager(nullptr) { }
   d4a4a:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a4c:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d4a4e:	9506      	str	r5, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a50:	f7ff fb21 	bl	d4096 <_Znwj>
   d4a54:	b118      	cbz	r0, d4a5e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3e>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4a56:	4b16      	ldr	r3, [pc, #88]	; (d4ab0 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4a58:	6084      	str	r4, [r0, #8]
   d4a5a:	e9c0 3500 	strd	r3, r5, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4a5e:	4b15      	ldr	r3, [pc, #84]	; (d4ab4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a60:	9004      	str	r0, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4a62:	9307      	str	r3, [sp, #28]
        return subscribe_wiring(eventName, handler, scope);
   d4a64:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d4a66:	4b14      	ldr	r3, [pc, #80]	; (d4ab8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
   d4a68:	9306      	str	r3, [sp, #24]
   d4a6a:	a808      	add	r0, sp, #32
   d4a6c:	f7ff ffc8 	bl	d4a00 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
   d4a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4a72:	b17b      	cbz	r3, d4a94 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x74>
            auto wrapper = new wiring_event_handler_t(handler);
   d4a74:	2010      	movs	r0, #16
   d4a76:	f7ff fb0e 	bl	d4096 <_Znwj>
   d4a7a:	4605      	mov	r5, r0
   d4a7c:	b150      	cbz	r0, d4a94 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x74>
   d4a7e:	a908      	add	r1, sp, #32
   d4a80:	f7ff ffbe 	bl	d4a00 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d4a84:	2300      	movs	r3, #0
   d4a86:	e9cd 3300 	strd	r3, r3, [sp]
   d4a8a:	490c      	ldr	r1, [pc, #48]	; (d4abc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x9c>)
   d4a8c:	4807      	ldr	r0, [pc, #28]	; (d4aac <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
   d4a8e:	462a      	mov	r2, r5
   d4a90:	f000 fc04 	bl	d529c <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d4a94:	a808      	add	r0, sp, #32
   d4a96:	f7ff fede 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
   d4a9a:	a804      	add	r0, sp, #16
   d4a9c:	f7ff fedb 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
}
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	b00d      	add	sp, #52	; 0x34
   d4aa4:	bd30      	pop	{r4, r5, pc}
   d4aa6:	bf00      	nop
   d4aa8:	000d8f18 	.word	0x000d8f18
   d4aac:	2003e498 	.word	0x2003e498
   d4ab0:	000d4765 	.word	0x000d4765
   d4ab4:	000d4837 	.word	0x000d4837
   d4ab8:	000d47f9 	.word	0x000d47f9
   d4abc:	000d54d3 	.word	0x000d54d3

000d4ac0 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
        val_(val) {
   d4ac0:	4b01      	ldr	r3, [pc, #4]	; (d4ac8 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
   d4ac2:	2201      	movs	r2, #1
   d4ac4:	701a      	strb	r2, [r3, #0]
}
   d4ac6:	4770      	bx	lr
   d4ac8:	2003e59c 	.word	0x2003e59c

000d4acc <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4acc:	b538      	push	{r3, r4, r5, lr}
   d4ace:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4ad0:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4ad2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4ad4:	b108      	cbz	r0, d4ada <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4ad6:	f000 fc59 	bl	d538c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4ada:	79a3      	ldrb	r3, [r4, #6]
   d4adc:	2b06      	cmp	r3, #6
   d4ade:	bf0c      	ite	eq
   d4ae0:	2004      	moveq	r0, #4
   d4ae2:	2003      	movne	r0, #3
   d4ae4:	fb10 f005 	smulbb	r0, r0, r5
   d4ae8:	b280      	uxth	r0, r0
   d4aea:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4aec:	f000 fc46 	bl	d537c <malloc>
   d4af0:	60e0      	str	r0, [r4, #12]
   d4af2:	b128      	cbz	r0, d4b00 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4af4:	88a2      	ldrh	r2, [r4, #4]
   d4af6:	2100      	movs	r1, #0
   d4af8:	f002 fa5d 	bl	d6fb6 <memset>
    numLEDs = n;
   d4afc:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   d4afe:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   d4b00:	80a0      	strh	r0, [r4, #4]
   d4b02:	8060      	strh	r0, [r4, #2]
}
   d4b04:	e7fb      	b.n	d4afe <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000d4b06 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   d4b06:	b510      	push	{r4, lr}
   d4b08:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4b0a:	2101      	movs	r1, #1
   d4b0c:	79c0      	ldrb	r0, [r0, #7]
   d4b0e:	f001 fcbd 	bl	d648c <pinMode>
  digitalWrite(pin, LOW);
   d4b12:	79e0      	ldrb	r0, [r4, #7]
   d4b14:	2100      	movs	r1, #0
   d4b16:	f001 fcca 	bl	d64ae <digitalWrite>
  begun = true;
   d4b1a:	2301      	movs	r3, #1
   d4b1c:	7023      	strb	r3, [r4, #0]
}
   d4b1e:	bd10      	pop	{r4, pc}

000d4b20 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   d4b22:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4b24:	4605      	mov	r5, r0
   d4b26:	460c      	mov	r4, r1
    if (begun) {
   d4b28:	b11b      	cbz	r3, d4b32 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4b2a:	79c0      	ldrb	r0, [r0, #7]
   d4b2c:	2100      	movs	r1, #0
   d4b2e:	f001 fcad 	bl	d648c <pinMode>
    }
    pin = p;
    if (begun) {
   d4b32:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   d4b34:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4b36:	b15b      	cbz	r3, d4b50 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   d4b38:	b2a0      	uxth	r0, r4
   d4b3a:	2101      	movs	r1, #1
   d4b3c:	9001      	str	r0, [sp, #4]
   d4b3e:	f001 fca5 	bl	d648c <pinMode>
        digitalWrite(p, LOW);
   d4b42:	9801      	ldr	r0, [sp, #4]
   d4b44:	2100      	movs	r1, #0
    }
}
   d4b46:	b003      	add	sp, #12
   d4b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   d4b4c:	f001 bcaf 	b.w	d64ae <digitalWrite>
}
   d4b50:	b003      	add	sp, #12
   d4b52:	bd30      	pop	{r4, r5, pc}

000d4b54 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4b54:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4b56:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4b58:	4604      	mov	r4, r0
   d4b5a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4b5c:	7183      	strb	r3, [r0, #6]
   d4b5e:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d4b62:	7005      	strb	r5, [r0, #0]
   d4b64:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   d4b66:	f7ff ffb1 	bl	d4acc <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	4631      	mov	r1, r6
   d4b6e:	f7ff ffd7 	bl	d4b20 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4b72:	4620      	mov	r0, r4
   d4b74:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4b78 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4b78:	68c3      	ldr	r3, [r0, #12]
   d4b7a:	2b00      	cmp	r3, #0
   d4b7c:	f000 818d 	beq.w	d4e9a <_ZN17Adafruit_NeoPixel4showEv+0x322>
void Adafruit_NeoPixel::show(void) {
   d4b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b84:	7983      	ldrb	r3, [r0, #6]
   d4b86:	3b02      	subs	r3, #2
   d4b88:	b2db      	uxtb	r3, r3
   d4b8a:	2b04      	cmp	r3, #4
   d4b8c:	bf9c      	itt	ls
   d4b8e:	4ac8      	ldrls	r2, [pc, #800]	; (d4eb0 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
   d4b90:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4b94:	b087      	sub	sp, #28
   d4b96:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4b98:	bf88      	it	hi
   d4b9a:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4b9c:	f000 fa02 	bl	d4fa4 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4ba0:	692b      	ldr	r3, [r5, #16]
   d4ba2:	1ac0      	subs	r0, r0, r3
   d4ba4:	42a0      	cmp	r0, r4
   d4ba6:	d3f9      	bcc.n	d4b9c <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4ba8:	4ac2      	ldr	r2, [pc, #776]	; (d4eb4 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4baa:	88ab      	ldrh	r3, [r5, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4bac:	ca07      	ldmia	r2, {r0, r1, r2}
   d4bae:	ac06      	add	r4, sp, #24
   d4bb0:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bb4:	9c03      	ldr	r4, [sp, #12]
   d4bb6:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bba:	b91a      	cbnz	r2, d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bbc:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bc0:	2a00      	cmp	r2, #0
   d4bc2:	db7c      	blt.n	d4cbe <_ZN17Adafruit_NeoPixel4showEv+0x146>
   d4bc4:	9c04      	ldr	r4, [sp, #16]
   d4bc6:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bca:	b922      	cbnz	r2, d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bcc:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bd0:	2a00      	cmp	r2, #0
   d4bd2:	f2c0 8152 	blt.w	d4e7a <_ZN17Adafruit_NeoPixel4showEv+0x302>
   d4bd6:	9c05      	ldr	r4, [sp, #20]
   d4bd8:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bdc:	2a00      	cmp	r2, #0
   d4bde:	f000 8137 	beq.w	d4e50 <_ZN17Adafruit_NeoPixel4showEv+0x2d8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4be2:	4bb5      	ldr	r3, [pc, #724]	; (d4eb8 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4be4:	48b5      	ldr	r0, [pc, #724]	; (d4ebc <_ZN17Adafruit_NeoPixel4showEv+0x344>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4be6:	681c      	ldr	r4, [r3, #0]
   d4be8:	79eb      	ldrb	r3, [r5, #7]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4bea:	68c1      	ldr	r1, [r0, #12]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4bec:	011a      	lsls	r2, r3, #4
   d4bee:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   d4bf2:	5ca7      	ldrb	r7, [r4, r2]
   d4bf4:	7873      	ldrb	r3, [r6, #1]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4bf6:	4cb2      	ldr	r4, [pc, #712]	; (d4ec0 <_ZN17Adafruit_NeoPixel4showEv+0x348>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4bf8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   d4bfc:	60c1      	str	r1, [r0, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4bfe:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c00:	f003 031f 	and.w	r3, r3, #31
   d4c04:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4c08:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4c0a:	433a      	orrs	r2, r7
   d4c0c:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c0e:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4c10:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d4c14:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c18:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   d4c1a:	2900      	cmp	r1, #0
   d4c1c:	d044      	beq.n	d4ca8 <_ZN17Adafruit_NeoPixel4showEv+0x130>
   d4c1e:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   d4c22:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4c24:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   d4c28:	f818 cb01 	ldrb.w	ip, [r8], #1
   d4c2c:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c2e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4c30:	6863      	ldr	r3, [r4, #4]
   d4c32:	1a9b      	subs	r3, r3, r2
   d4c34:	2b46      	cmp	r3, #70	; 0x46
   d4c36:	d9fb      	bls.n	d4c30 <_ZN17Adafruit_NeoPixel4showEv+0xb8>
          cyc  = DWT->CYCCNT;
   d4c38:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   d4c3a:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4c3e:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   d4c42:	ea43 0307 	orr.w	r3, r3, r7
   d4c46:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   d4c4a:	d02f      	beq.n	d4cac <_ZN17Adafruit_NeoPixel4showEv+0x134>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4c4c:	6863      	ldr	r3, [r4, #4]
   d4c4e:	1a9b      	subs	r3, r3, r2
   d4c50:	2b28      	cmp	r3, #40	; 0x28
   d4c52:	d9fb      	bls.n	d4c4c <_ZN17Adafruit_NeoPixel4showEv+0xd4>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4c54:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c58:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   d4c5a:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c5e:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   d4c62:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c66:	d1e3      	bne.n	d4c30 <_ZN17Adafruit_NeoPixel4showEv+0xb8>
      for(uint16_t n=0; n<numBytes; n++) {
   d4c68:	88ab      	ldrh	r3, [r5, #4]
   d4c6a:	f10e 0e01 	add.w	lr, lr, #1
   d4c6e:	fa1f fe8e 	uxth.w	lr, lr
   d4c72:	4573      	cmp	r3, lr
   d4c74:	d8d8      	bhi.n	d4c28 <_ZN17Adafruit_NeoPixel4showEv+0xb0>
   d4c76:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   d4c7a:	fb01 f103 	mul.w	r1, r1, r3
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4c7e:	6863      	ldr	r3, [r4, #4]
   d4c80:	1a9b      	subs	r3, r3, r2
   d4c82:	2b46      	cmp	r3, #70	; 0x46
   d4c84:	d9fb      	bls.n	d4c7e <_ZN17Adafruit_NeoPixel4showEv+0x106>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4c86:	6863      	ldr	r3, [r4, #4]
   d4c88:	eba3 0909 	sub.w	r9, r3, r9
   d4c8c:	4589      	cmp	r9, r1
   d4c8e:	f0c0 80d9 	bcc.w	d4e44 <_ZN17Adafruit_NeoPixel4showEv+0x2cc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4c92:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4c96:	f000 f97d 	bl	d4f94 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   d4c9a:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4c9c:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d4ca0:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   d4ca4:	2900      	cmp	r1, #0
   d4ca6:	d1ba      	bne.n	d4c1e <_ZN17Adafruit_NeoPixel4showEv+0xa6>
      uint32_t cyc = 0;
   d4ca8:	460a      	mov	r2, r1
   d4caa:	e7e8      	b.n	d4c7e <_ZN17Adafruit_NeoPixel4showEv+0x106>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4cac:	6863      	ldr	r3, [r4, #4]
   d4cae:	1a9b      	subs	r3, r3, r2
   d4cb0:	2b11      	cmp	r3, #17
   d4cb2:	d8cf      	bhi.n	d4c54 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
   d4cb4:	6863      	ldr	r3, [r4, #4]
   d4cb6:	1a9b      	subs	r3, r3, r2
   d4cb8:	2b11      	cmp	r3, #17
   d4cba:	d9f7      	bls.n	d4cac <_ZN17Adafruit_NeoPixel4showEv+0x134>
   d4cbc:	e7ca      	b.n	d4c54 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cbe:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cc2:	2a00      	cmp	r2, #0
   d4cc4:	f6bf af7e 	bge.w	d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cc8:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4ccc:	2a00      	cmp	r2, #0
   d4cce:	f6bf af79 	bge.w	d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4cd2:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cd6:	2a00      	cmp	r2, #0
   d4cd8:	f6bf af74 	bge.w	d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4cdc:	011b      	lsls	r3, r3, #4
   d4cde:	3304      	adds	r3, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4ce0:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4ce2:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4ce4:	f000 fb4a 	bl	d537c <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4ce8:	2800      	cmp	r0, #0
   d4cea:	f43f af7a 	beq.w	d4be2 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
    for(uint16_t n=0; n<numBytes; n++) {
   d4cee:	88ab      	ldrh	r3, [r5, #4]
   d4cf0:	2b00      	cmp	r3, #0
   d4cf2:	f000 80da 	beq.w	d4eaa <_ZN17Adafruit_NeoPixel4showEv+0x332>
      uint8_t pix = pixels[n];
   d4cf6:	68ea      	ldr	r2, [r5, #12]
   d4cf8:	3b01      	subs	r3, #1
   d4cfa:	fa12 fe83 	uxtah	lr, r2, r3
   d4cfe:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   d4d02:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d04:	f248 0206 	movw	r2, #32774	; 0x8006
   d4d08:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   d4d0c:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d10:	f017 0f80 	tst.w	r7, #128	; 0x80
   d4d14:	bf0c      	ite	eq
   d4d16:	4690      	moveq	r8, r2
   d4d18:	4688      	movne	r8, r1
   d4d1a:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
        pos++;
   d4d1e:	f103 0801 	add.w	r8, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d22:	f017 0f40 	tst.w	r7, #64	; 0x40
        pos++;
   d4d26:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d2a:	bf0c      	ite	eq
   d4d2c:	4693      	moveq	fp, r2
   d4d2e:	468b      	movne	fp, r1
   d4d30:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   d4d34:	f103 0802 	add.w	r8, r3, #2
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d38:	f017 0f20 	tst.w	r7, #32
        pos++;
   d4d3c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d40:	bf0c      	ite	eq
   d4d42:	4692      	moveq	sl, r2
   d4d44:	468a      	movne	sl, r1
   d4d46:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
        pos++;
   d4d4a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d4e:	f017 0f10 	tst.w	r7, #16
        pos++;
   d4d52:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d56:	bf0c      	ite	eq
   d4d58:	4691      	moveq	r9, r2
   d4d5a:	4689      	movne	r9, r1
   d4d5c:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d4d60:	f103 0904 	add.w	r9, r3, #4
   d4d64:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d68:	f017 0f08 	tst.w	r7, #8
        pos++;
   d4d6c:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d70:	bf0c      	ite	eq
   d4d72:	4692      	moveq	sl, r2
   d4d74:	468a      	movne	sl, r1
        pos++;
   d4d76:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d7a:	f017 0f04 	tst.w	r7, #4
   d4d7e:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
   d4d82:	bf0c      	ite	eq
   d4d84:	4691      	moveq	r9, r2
   d4d86:	4689      	movne	r9, r1
   d4d88:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d4d8c:	f103 0806 	add.w	r8, r3, #6
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d90:	f017 0f02 	tst.w	r7, #2
        pos++;
   d4d94:	fa1f f888 	uxth.w	r8, r8
   d4d98:	f103 0608 	add.w	r6, r3, #8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d9c:	bf0c      	ite	eq
   d4d9e:	4691      	moveq	r9, r2
   d4da0:	4689      	movne	r9, r1
        pos++;
   d4da2:	3307      	adds	r3, #7
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4da4:	07ff      	lsls	r7, r7, #31
   d4da6:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d4daa:	9601      	str	r6, [sp, #4]
   d4dac:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4dae:	d575      	bpl.n	d4e9c <_ZN17Adafruit_NeoPixel4showEv+0x324>
    for(uint16_t n=0; n<numBytes; n++) {
   d4db0:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4db2:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
        pos++;
   d4db6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    for(uint16_t n=0; n<numBytes; n++) {
   d4dba:	d1a7      	bne.n	d4d0c <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d4dbc:	1c59      	adds	r1, r3, #1
   d4dbe:	3302      	adds	r3, #2
   d4dc0:	b289      	uxth	r1, r1
   d4dc2:	b29b      	uxth	r3, r3
   d4dc4:	0049      	lsls	r1, r1, #1
   d4dc6:	005b      	lsls	r3, r3, #1
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4dc8:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4dca:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   d4dce:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4dd0:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4dd2:	4939      	ldr	r1, [pc, #228]	; (d4eb8 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4dd4:	52c7      	strh	r7, [r0, r3]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4dd6:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4dd8:	f04f 0c14 	mov.w	ip, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4ddc:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4de0:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4de4:	f8c4 c508 	str.w	ip, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4de8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   d4dec:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4df0:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4df4:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   d4df8:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4dfc:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e00:	79eb      	ldrb	r3, [r5, #7]
   d4e02:	680e      	ldr	r6, [r1, #0]
   d4e04:	eb06 1703 	add.w	r7, r6, r3, lsl #4
   d4e08:	0119      	lsls	r1, r3, #4
   d4e0a:	787b      	ldrb	r3, [r7, #1]
   d4e0c:	5c71      	ldrb	r1, [r6, r1]
   d4e0e:	f003 031f 	and.w	r3, r3, #31
   d4e12:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    pwm->ENABLE = 1;
   d4e16:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e18:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   d4e1c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   d4e20:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4e24:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   d4e26:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4e2a:	2b00      	cmp	r3, #0
   d4e2c:	d0fb      	beq.n	d4e26 <_ZN17Adafruit_NeoPixel4showEv+0x2ae>
    pwm->EVENTS_SEQEND[0] = 0;
   d4e2e:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   d4e34:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   d4e38:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4e3c:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   d4e40:	f000 faa4 	bl	d538c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4e44:	f000 f8ae 	bl	d4fa4 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4e48:	6128      	str	r0, [r5, #16]
}
   d4e4a:	b007      	add	sp, #28
   d4e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e50:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4e54:	2a00      	cmp	r2, #0
   d4e56:	f6bf aec4 	bge.w	d4be2 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e5a:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e5e:	2a00      	cmp	r2, #0
   d4e60:	f6bf aebf 	bge.w	d4be2 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e64:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e68:	2a00      	cmp	r2, #0
   d4e6a:	f6bf aeba 	bge.w	d4be2 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4e6e:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e72:	2a00      	cmp	r2, #0
   d4e74:	f6bf aeb5 	bge.w	d4be2 <_ZN17Adafruit_NeoPixel4showEv+0x6a>
   d4e78:	e730      	b.n	d4cdc <_ZN17Adafruit_NeoPixel4showEv+0x164>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e7a:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e7e:	2a00      	cmp	r2, #0
   d4e80:	f6bf aea9 	bge.w	d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e84:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e88:	2a00      	cmp	r2, #0
   d4e8a:	f6bf aea4 	bge.w	d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4e8e:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e92:	2a00      	cmp	r2, #0
   d4e94:	f6bf ae9f 	bge.w	d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
   d4e98:	e720      	b.n	d4cdc <_ZN17Adafruit_NeoPixel4showEv+0x164>
   d4e9a:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   d4e9c:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4e9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        pos++;
   d4ea2:	b2b3      	uxth	r3, r6
    for(uint16_t n=0; n<numBytes; n++) {
   d4ea4:	f47f af32 	bne.w	d4d0c <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d4ea8:	e788      	b.n	d4dbc <_ZN17Adafruit_NeoPixel4showEv+0x244>
   d4eaa:	2304      	movs	r3, #4
   d4eac:	2102      	movs	r1, #2
   d4eae:	e78b      	b.n	d4dc8 <_ZN17Adafruit_NeoPixel4showEv+0x250>
   d4eb0:	000d8f48 	.word	0x000d8f48
   d4eb4:	000d8f3c 	.word	0x000d8f3c
   d4eb8:	2003e5a4 	.word	0x2003e5a4
   d4ebc:	e000edf0 	.word	0xe000edf0
   d4ec0:	e0001000 	.word	0xe0001000

000d4ec4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4ec4:	8843      	ldrh	r3, [r0, #2]
   d4ec6:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4eca:	d926      	bls.n	d4f1a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d4ecc:	7a05      	ldrb	r5, [r0, #8]
   d4ece:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4ed2:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d4ed6:	b2d6      	uxtb	r6, r2
   d4ed8:	b13d      	cbz	r5, d4eea <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   d4eda:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d4edc:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d4ede:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
   d4ee0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d4ee4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d4ee8:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4eea:	f890 c006 	ldrb.w	ip, [r0, #6]
   d4eee:	68c7      	ldr	r7, [r0, #12]
   d4ef0:	f1bc 0f06 	cmp.w	ip, #6
   d4ef4:	bf0c      	ite	eq
   d4ef6:	2504      	moveq	r5, #4
   d4ef8:	2503      	movne	r5, #3
   d4efa:	4369      	muls	r1, r5
   d4efc:	f1ac 0c02 	sub.w	ip, ip, #2
   d4f00:	187d      	adds	r5, r7, r1
    switch(type) {
   d4f02:	f1bc 0f06 	cmp.w	ip, #6
   d4f06:	d81d      	bhi.n	d4f44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   d4f08:	e8df f00c 	tbb	[pc, ip]
   d4f0c:	04081c04 	.word	0x04081c04
   d4f10:	040f      	.short	0x040f
   d4f12:	04          	.byte	0x04
   d4f13:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4f14:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d4f16:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4f18:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
   d4f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   d4f1c:	2bfe      	cmp	r3, #254	; 0xfe
   d4f1e:	bf28      	it	cs
   d4f20:	23fe      	movcs	r3, #254	; 0xfe
   d4f22:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4f24:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4f26:	70ac      	strb	r4, [r5, #2]
        } break;
   d4f28:	e7f7      	b.n	d4f1a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
   d4f2a:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4f2c:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d4f2e:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4f30:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   d4f32:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4f34:	b913      	cbnz	r3, d4f3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   d4f36:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4f38:	70ea      	strb	r2, [r5, #3]
        } break;
   d4f3a:	e7ee      	b.n	d4f1a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4f3c:	435a      	muls	r2, r3
   d4f3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d4f42:	e7f9      	b.n	d4f38 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   d4f44:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4f46:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4f48:	70ae      	strb	r6, [r5, #2]
}
   d4f4a:	e7e6      	b.n	d4f1a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

000d4f4c <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d4f4c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
}
   d4f50:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   d4f54:	4770      	bx	lr

000d4f56 <_ZN17Adafruit_NeoPixel5ColorEhhhh>:

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d4f56:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d4f5a:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
}
   d4f5e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4f62:	4770      	bx	lr

000d4f64 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4f64:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4f66:	f000 f82d 	bl	d4fc4 <HAL_Pin_Map>
   d4f6a:	4b01      	ldr	r3, [pc, #4]	; (d4f70 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d4f6c:	6018      	str	r0, [r3, #0]
}
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	2003e5a4 	.word	0x2003e5a4

000d4f74 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <os_mutex_recursive_create+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030248 	.word	0x00030248

000d4f84 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <HAL_RNG_GetRandomNumber+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	685b      	ldr	r3, [r3, #4]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030218 	.word	0x00030218

000d4f94 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_Delay_Microseconds+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	68db      	ldr	r3, [r3, #12]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030218 	.word	0x00030218

000d4fa4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	691b      	ldr	r3, [r3, #16]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030218 	.word	0x00030218

000d4fb4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	695b      	ldr	r3, [r3, #20]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030218 	.word	0x00030218

000d4fc4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_Pin_Map+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	681b      	ldr	r3, [r3, #0]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003022c 	.word	0x0003022c

000d4fd4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_Validate_Pin_Function+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	685b      	ldr	r3, [r3, #4]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003022c 	.word	0x0003022c

000d4fe4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_Pin_Mode+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	689b      	ldr	r3, [r3, #8]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003022c 	.word	0x0003022c

000d4ff4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_Get_Pin_Mode+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	68db      	ldr	r3, [r3, #12]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003022c 	.word	0x0003022c

000d5004 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_GPIO_Write+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	691b      	ldr	r3, [r3, #16]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	0003022c 	.word	0x0003022c

000d5014 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_GPIO_Read+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	695b      	ldr	r3, [r3, #20]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	0003022c 	.word	0x0003022c

000d5024 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <hal_adc_read+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	0003022c 	.word	0x0003022c

000d5034 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <hal_i2c_write+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a1b      	ldr	r3, [r3, #32]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030228 	.word	0x00030228

000d5044 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <hal_i2c_available+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030228 	.word	0x00030228

000d5054 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <hal_i2c_read+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030228 	.word	0x00030228

000d5064 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <hal_i2c_peek+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030228 	.word	0x00030228

000d5074 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <hal_i2c_flush+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030228 	.word	0x00030228

000d5084 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <hal_i2c_is_enabled+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030228 	.word	0x00030228

000d5094 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <hal_i2c_init+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030228 	.word	0x00030228

000d50a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <inet_inet_ntop+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	695b      	ldr	r3, [r3, #20]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030264 	.word	0x00030264

000d50b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <netdb_freeaddrinfo+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	689b      	ldr	r3, [r3, #8]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030268 	.word	0x00030268

000d50c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <netdb_getaddrinfo+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	68db      	ldr	r3, [r3, #12]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030268 	.word	0x00030268

000d50d4 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_Tone_Start+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	681b      	ldr	r3, [r3, #0]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030224 	.word	0x00030224

000d50e4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <hal_spi_init+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	69db      	ldr	r3, [r3, #28]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030230 	.word	0x00030230

000d50f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <hal_spi_is_enabled+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6a1b      	ldr	r3, [r3, #32]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030230 	.word	0x00030230

000d5104 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <hal_usart_init+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	681b      	ldr	r3, [r3, #0]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003023c 	.word	0x0003023c

000d5114 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <hal_usart_write+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	68db      	ldr	r3, [r3, #12]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003023c 	.word	0x0003023c

000d5124 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <hal_usart_available+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	691b      	ldr	r3, [r3, #16]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003023c 	.word	0x0003023c

000d5134 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <hal_usart_read+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	695b      	ldr	r3, [r3, #20]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003023c 	.word	0x0003023c

000d5144 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <hal_usart_peek+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	699b      	ldr	r3, [r3, #24]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003023c 	.word	0x0003023c

000d5154 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <hal_usart_flush+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	69db      	ldr	r3, [r3, #28]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003023c 	.word	0x0003023c

000d5164 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <hal_usart_is_enabled+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	6a1b      	ldr	r3, [r3, #32]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003023c 	.word	0x0003023c

000d5174 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <hal_usart_available_data_for_write+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003023c 	.word	0x0003023c

000d5184 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_USB_USART_Init+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	681b      	ldr	r3, [r3, #0]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003024c 	.word	0x0003024c

000d5194 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_USB_USART_Begin+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	685b      	ldr	r3, [r3, #4]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003024c 	.word	0x0003024c

000d51a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_USB_USART_Available_Data+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	691b      	ldr	r3, [r3, #16]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	0003024c 	.word	0x0003024c

000d51b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	695b      	ldr	r3, [r3, #20]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	0003024c 	.word	0x0003024c

000d51c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <HAL_USB_USART_Receive_Data+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	699b      	ldr	r3, [r3, #24]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	0003024c 	.word	0x0003024c

000d51d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <HAL_USB_USART_Send_Data+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	69db      	ldr	r3, [r3, #28]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	0003024c 	.word	0x0003024c

000d51e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <HAL_USB_USART_Flush_Data+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6a1b      	ldr	r3, [r3, #32]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	0003024c 	.word	0x0003024c

000d51f4 <wlan_scan>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <wlan_scan+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030274 	.word	0x00030274

000d5204 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <set_system_mode+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	685b      	ldr	r3, [r3, #4]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030220 	.word	0x00030220

000d5214 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <system_delay_ms+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	695b      	ldr	r3, [r3, #20]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030220 	.word	0x00030220

000d5224 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <application_thread_current+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030220 	.word	0x00030220

000d5234 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <application_thread_invoke+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030220 	.word	0x00030220

000d5244 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b03      	ldr	r3, [pc, #12]	; (d5254 <system_ctrl_set_app_request_handler+0x10>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d524e:	9301      	str	r3, [sp, #4]
   d5250:	bd08      	pop	{r3, pc}
   d5252:	0000      	.short	0x0000
   d5254:	00030220 	.word	0x00030220

000d5258 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b03      	ldr	r3, [pc, #12]	; (d5268 <system_ctrl_set_result+0x10>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5262:	9301      	str	r3, [sp, #4]
   d5264:	bd08      	pop	{r3, pc}
   d5266:	0000      	.short	0x0000
   d5268:	00030220 	.word	0x00030220

000d526c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <spark_cloud_flag_connected+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	695b      	ldr	r3, [r3, #20]
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030244 	.word	0x00030244

000d527c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <spark_deviceID+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	69db      	ldr	r3, [r3, #28]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030244 	.word	0x00030244

000d528c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <spark_send_event+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6a1b      	ldr	r3, [r3, #32]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030244 	.word	0x00030244

000d529c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <spark_subscribe+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030244 	.word	0x00030244

000d52ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030244 	.word	0x00030244

000d52bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <network_connect+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	685b      	ldr	r3, [r3, #4]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030240 	.word	0x00030240

000d52cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <network_connecting+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	689b      	ldr	r3, [r3, #8]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030240 	.word	0x00030240

000d52dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <network_disconnect+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	68db      	ldr	r3, [r3, #12]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030240 	.word	0x00030240

000d52ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <network_ready+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	691b      	ldr	r3, [r3, #16]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030240 	.word	0x00030240

000d52fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <network_on+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	695b      	ldr	r3, [r3, #20]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030240 	.word	0x00030240

000d530c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <network_off+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	699b      	ldr	r3, [r3, #24]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030240 	.word	0x00030240

000d531c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <network_listen+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	69db      	ldr	r3, [r3, #28]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030240 	.word	0x00030240

000d532c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <network_listening+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6a1b      	ldr	r3, [r3, #32]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030240 	.word	0x00030240

000d533c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <network_set_listen_timeout+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030240 	.word	0x00030240

000d534c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <network_get_listen_timeout+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030240 	.word	0x00030240

000d535c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <network_is_on+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030240 	.word	0x00030240

000d536c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <network_is_off+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030240 	.word	0x00030240

000d537c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <malloc+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	681b      	ldr	r3, [r3, #0]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	0003021c 	.word	0x0003021c

000d538c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <free+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	685b      	ldr	r3, [r3, #4]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	0003021c 	.word	0x0003021c

000d539c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <realloc+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	689b      	ldr	r3, [r3, #8]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	0003021c 	.word	0x0003021c

000d53ac <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <snprintf+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	69db      	ldr	r3, [r3, #28]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	0003021c 	.word	0x0003021c

000d53bc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <vsnprintf+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	0003021c 	.word	0x0003021c

000d53cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <abort+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	0003021c 	.word	0x0003021c

000d53dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <_malloc_r+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	0003021c 	.word	0x0003021c

000d53ec <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <newlib_impure_ptr_callback+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	0003021c 	.word	0x0003021c

000d53fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d53fc:	2100      	movs	r1, #0
   d53fe:	f7ff bf09 	b.w	d5214 <system_delay_ms>

000d5402 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5402:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5404:	6883      	ldr	r3, [r0, #8]
   d5406:	4604      	mov	r4, r0
   d5408:	b90b      	cbnz	r3, d540e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d540a:	f001 f8d5 	bl	d65b8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d540e:	68c3      	ldr	r3, [r0, #12]
   d5410:	4798      	blx	r3
      if (_M_manager)
   d5412:	68a3      	ldr	r3, [r4, #8]
   d5414:	b11b      	cbz	r3, d541e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5416:	2203      	movs	r2, #3
   d5418:	4621      	mov	r1, r4
   d541a:	4620      	mov	r0, r4
   d541c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d541e:	4620      	mov	r0, r4
   d5420:	2110      	movs	r1, #16
}
   d5422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5426:	f001 b8c3 	b.w	d65b0 <_ZdlPvj>

000d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d542a:	680b      	ldr	r3, [r1, #0]
   d542c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d542e:	b113      	cbz	r3, d5436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5430:	685a      	ldr	r2, [r3, #4]
   d5432:	3201      	adds	r2, #1
   d5434:	605a      	str	r2, [r3, #4]
      }
   d5436:	4770      	bx	lr

000d5438 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5438:	4802      	ldr	r0, [pc, #8]	; (d5444 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d543a:	2300      	movs	r3, #0
   d543c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d543e:	f7ff bd99 	b.w	d4f74 <os_mutex_recursive_create>
   d5442:	bf00      	nop
   d5444:	2003e5a8 	.word	0x2003e5a8

000d5448 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5448:	4770      	bx	lr

000d544a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d544a:	2000      	movs	r0, #0
   d544c:	4770      	bx	lr

000d544e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d544e:	b510      	push	{r4, lr}
   d5450:	2110      	movs	r1, #16
   d5452:	4604      	mov	r4, r0
   d5454:	f001 f8ac 	bl	d65b0 <_ZdlPvj>
   d5458:	4620      	mov	r0, r4
   d545a:	bd10      	pop	{r4, pc}

000d545c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d545c:	b508      	push	{r3, lr}
      { delete this; }
   d545e:	f7ff fff6 	bl	d544e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5462:	bd08      	pop	{r3, pc}

000d5464 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5464:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5466:	2200      	movs	r2, #0
   d5468:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d546c:	6002      	str	r2, [r0, #0]
   d546e:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5470:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5472:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5474:	680c      	ldr	r4, [r1, #0]
   d5476:	8085      	strh	r5, [r0, #4]
   d5478:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d547a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d547c:	bd30      	pop	{r4, r5, pc}

000d547e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d547e:	b510      	push	{r4, lr}
   d5480:	4604      	mov	r4, r0
    free((void*)msg_);
   d5482:	6800      	ldr	r0, [r0, #0]
   d5484:	f7ff ff82 	bl	d538c <free>
}
   d5488:	4620      	mov	r0, r4
   d548a:	bd10      	pop	{r4, pc}

000d548c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d548c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d548e:	68c4      	ldr	r4, [r0, #12]
   d5490:	b1f4      	cbz	r4, d54d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5492:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5494:	2b02      	cmp	r3, #2
   d5496:	d103      	bne.n	d54a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5498:	f104 000c 	add.w	r0, r4, #12
   d549c:	f7ff ffef 	bl	d547e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d54a0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d54a2:	b135      	cbz	r5, d54b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d54a4:	4628      	mov	r0, r5
   d54a6:	f7ff f9d6 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
   d54aa:	2110      	movs	r1, #16
   d54ac:	4628      	mov	r0, r5
   d54ae:	f001 f87f 	bl	d65b0 <_ZdlPvj>
   d54b2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d54b4:	b135      	cbz	r5, d54c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d54b6:	4628      	mov	r0, r5
   d54b8:	f7ff f9cd 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
   d54bc:	2110      	movs	r1, #16
   d54be:	4628      	mov	r0, r5
   d54c0:	f001 f876 	bl	d65b0 <_ZdlPvj>
   d54c4:	4620      	mov	r0, r4
   d54c6:	2114      	movs	r1, #20
   d54c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d54cc:	f001 b870 	b.w	d65b0 <_ZdlPvj>
   d54d0:	bd38      	pop	{r3, r4, r5, pc}

000d54d2 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d54d2:	b507      	push	{r0, r1, r2, lr}
   d54d4:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   d54d8:	6882      	ldr	r2, [r0, #8]
   d54da:	b90a      	cbnz	r2, d54e0 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d54dc:	f001 f86c 	bl	d65b8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54e0:	68c3      	ldr	r3, [r0, #12]
   d54e2:	aa01      	add	r2, sp, #4
   d54e4:	4669      	mov	r1, sp
   d54e6:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d54e8:	b003      	add	sp, #12
   d54ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d54ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d54ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54f0:	460e      	mov	r6, r1
   d54f2:	4604      	mov	r4, r0
   d54f4:	f856 3b04 	ldr.w	r3, [r6], #4
   d54f8:	9300      	str	r3, [sp, #0]
   d54fa:	460d      	mov	r5, r1
   d54fc:	a801      	add	r0, sp, #4
   d54fe:	4631      	mov	r1, r6
   d5500:	f7ff ff93 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5504:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5506:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5508:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d550a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d550c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d550e:	2300      	movs	r3, #0
   d5510:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5512:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5514:	f7fe ff32 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5518:	4630      	mov	r0, r6
   d551a:	f7fe ff2f 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d551e:	4628      	mov	r0, r5
   d5520:	2108      	movs	r1, #8
   d5522:	f001 f845 	bl	d65b0 <_ZdlPvj>
        return p;
    }
   d5526:	4620      	mov	r0, r4
   d5528:	b002      	add	sp, #8
   d552a:	bd70      	pop	{r4, r5, r6, pc}

000d552c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d552c:	b513      	push	{r0, r1, r4, lr}
   d552e:	460b      	mov	r3, r1
   d5530:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5532:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5536:	466c      	mov	r4, sp
   d5538:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d553c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5540:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5544:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5548:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d554c:	b002      	add	sp, #8
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5550:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5552:	b510      	push	{r4, lr}
      if (_M_empty())
   d5554:	b90a      	cbnz	r2, d555a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5556:	f001 f82f 	bl	d65b8 <_ZSt25__throw_bad_function_callv>
    }
   d555a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d555e:	68c3      	ldr	r3, [r0, #12]
   d5560:	4718      	bx	r3

000d5562 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5562:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5564:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5566:	f100 0110 	add.w	r1, r0, #16
   d556a:	f7ff fff1 	bl	d5550 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d556e:	bd08      	pop	{r3, pc}

000d5570 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5570:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5572:	b510      	push	{r4, lr}
      if (_M_empty())
   d5574:	b90a      	cbnz	r2, d557a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5576:	f001 f81f 	bl	d65b8 <_ZSt25__throw_bad_function_callv>
    }
   d557a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d557e:	68c3      	ldr	r3, [r0, #12]
   d5580:	4718      	bx	r3

000d5582 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5582:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5584:	6800      	ldr	r0, [r0, #0]
   d5586:	f100 0110 	add.w	r1, r0, #16
   d558a:	f7ff fff1 	bl	d5570 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d558e:	bd08      	pop	{r3, pc}

000d5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5590:	b538      	push	{r3, r4, r5, lr}
   d5592:	2300      	movs	r3, #0
   d5594:	4604      	mov	r4, r0
   d5596:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5598:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d559a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d559c:	f7fe fd7b 	bl	d4096 <_Znwj>
   d55a0:	b128      	cbz	r0, d55ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d55a2:	2301      	movs	r3, #1
   d55a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d55a8:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d55aa:	6003      	str	r3, [r0, #0]
   d55ac:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d55ae:	6020      	str	r0, [r4, #0]
	}
   d55b0:	4620      	mov	r0, r4
   d55b2:	bd38      	pop	{r3, r4, r5, pc}
   d55b4:	000d8f64 	.word	0x000d8f64

000d55b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d55b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d55ba:	2300      	movs	r3, #0
   d55bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d55be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d55c0:	4604      	mov	r4, r0
   d55c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d55c4:	b12b      	cbz	r3, d55d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d55c6:	2202      	movs	r2, #2
   d55c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d55ca:	68eb      	ldr	r3, [r5, #12]
   d55cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d55ce:	68ab      	ldr	r3, [r5, #8]
   d55d0:	60a3      	str	r3, [r4, #8]
    }
   d55d2:	4620      	mov	r0, r4
   d55d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d55d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d55d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55da:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d55dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d55de:	4668      	mov	r0, sp
   d55e0:	f7ff ff40 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d55e4:	f04f 0302 	mov.w	r3, #2
   d55e8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d55ec:	2a00      	cmp	r2, #0
   d55ee:	d103      	bne.n	d55f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d55f0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d55f4:	2900      	cmp	r1, #0
   d55f6:	d1f7      	bne.n	d55e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d55f8:	d125      	bne.n	d5646 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d55fa:	f104 050c 	add.w	r5, r4, #12
   d55fe:	4669      	mov	r1, sp
   d5600:	4628      	mov	r0, r5
   d5602:	f7ff ff2f 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5606:	f3bf 8f5b 	dmb	ish
   d560a:	2301      	movs	r3, #1
   d560c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d560e:	2000      	movs	r0, #0
   d5610:	f104 0308 	add.w	r3, r4, #8
   d5614:	f3bf 8f5b 	dmb	ish
   d5618:	e853 6f00 	ldrex	r6, [r3]
   d561c:	e843 0200 	strex	r2, r0, [r3]
   d5620:	2a00      	cmp	r2, #0
   d5622:	d1f9      	bne.n	d5618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5624:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5628:	b16e      	cbz	r6, d5646 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d562a:	f7ff fdfb 	bl	d5224 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d562e:	b178      	cbz	r0, d5650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5630:	4629      	mov	r1, r5
   d5632:	4630      	mov	r0, r6
   d5634:	f7ff ff8c 	bl	d5550 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5638:	4630      	mov	r0, r6
   d563a:	f7ff f90c 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d563e:	2110      	movs	r1, #16
   d5640:	4630      	mov	r0, r6
   d5642:	f000 ffb5 	bl	d65b0 <_ZdlPvj>
        p_->setError(std::move(error));
   d5646:	4668      	mov	r0, sp
   d5648:	f7ff ff19 	bl	d547e <_ZN8particle5ErrorD1Ev>
    }
   d564c:	b009      	add	sp, #36	; 0x24
   d564e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5650:	4631      	mov	r1, r6
   d5652:	a802      	add	r0, sp, #8
   d5654:	f7ff ffb0 	bl	d55b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5658:	68e0      	ldr	r0, [r4, #12]
   d565a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d565e:	b108      	cbz	r0, d5664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5660:	f001 fce8 	bl	d7034 <strdup>
        type_(type) {
   d5664:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5666:	2010      	movs	r0, #16
   d5668:	f8ad 501c 	strh.w	r5, [sp, #28]
   d566c:	f7fe fd13 	bl	d4096 <_Znwj>
   d5670:	4605      	mov	r5, r0
   d5672:	b1e8      	cbz	r0, d56b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5674:	2700      	movs	r7, #0
   d5676:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5678:	2018      	movs	r0, #24
   d567a:	f7fe fd0c 	bl	d4096 <_Znwj>
   d567e:	4604      	mov	r4, r0
   d5680:	b188      	cbz	r0, d56a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5682:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5684:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5686:	a802      	add	r0, sp, #8
   d5688:	f7ff ff50 	bl	d552c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d568c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d568e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5690:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5692:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5694:	9204      	str	r2, [sp, #16]
   d5696:	a906      	add	r1, sp, #24
   d5698:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d569a:	60e3      	str	r3, [r4, #12]
   d569c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d56a0:	9205      	str	r2, [sp, #20]
   d56a2:	f7ff fedf 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d56a6:	4b08      	ldr	r3, [pc, #32]	; (d56c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d56a8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d56aa:	4b08      	ldr	r3, [pc, #32]	; (d56cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ac:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d56ae:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d56b0:	a806      	add	r0, sp, #24
   d56b2:	f7ff fee4 	bl	d547e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d56b6:	a802      	add	r0, sp, #8
   d56b8:	f7ff f8cd 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d56bc:	2200      	movs	r2, #0
   d56be:	4629      	mov	r1, r5
   d56c0:	4803      	ldr	r0, [pc, #12]	; (d56d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d56c2:	f7ff fdb7 	bl	d5234 <application_thread_invoke>
   d56c6:	e7b7      	b.n	d5638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d56c8:	000d5563 	.word	0x000d5563
   d56cc:	000d57f9 	.word	0x000d57f9
   d56d0:	000d5403 	.word	0x000d5403

000d56d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d56d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d56d8:	b08a      	sub	sp, #40	; 0x28
   d56da:	4605      	mov	r5, r0
   d56dc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d56e0:	460c      	mov	r4, r1
   d56e2:	4617      	mov	r7, r2
   d56e4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d56e6:	f7ff fdc1 	bl	d526c <spark_cloud_flag_connected>
   d56ea:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d56ec:	4682      	mov	sl, r0
   d56ee:	bb38      	cbnz	r0, d5740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d56f0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d56f4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d56f6:	a905      	add	r1, sp, #20
   d56f8:	4630      	mov	r0, r6
   d56fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d56fe:	f7ff feb1 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
   d5702:	2014      	movs	r0, #20
   d5704:	f7fe fcc7 	bl	d4096 <_Znwj>
   d5708:	4604      	mov	r4, r0
   d570a:	b148      	cbz	r0, d5720 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d570c:	2302      	movs	r3, #2
   d570e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5710:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5712:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5716:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5718:	4631      	mov	r1, r6
   d571a:	300c      	adds	r0, #12
   d571c:	f7ff fea2 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5720:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5722:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5724:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5728:	f7ff ff32 	bl	d5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d572c:	4630      	mov	r0, r6
   d572e:	f7ff fea6 	bl	d547e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5732:	a805      	add	r0, sp, #20
   d5734:	f7ff fea3 	bl	d547e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5738:	4628      	mov	r0, r5
   d573a:	b00a      	add	sp, #40	; 0x28
   d573c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5740:	230c      	movs	r3, #12
   d5742:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5746:	2014      	movs	r0, #20
   d5748:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d574c:	9307      	str	r3, [sp, #28]
   d574e:	f7fe fca2 	bl	d4096 <_Znwj>
   d5752:	4601      	mov	r1, r0
   d5754:	b128      	cbz	r0, d5762 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5756:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d575a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d575e:	f880 a001 	strb.w	sl, [r0, #1]
   d5762:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5764:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5766:	f7ff ff13 	bl	d5590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d576a:	4b22      	ldr	r3, [pc, #136]	; (d57f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d576c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d576e:	2008      	movs	r0, #8
   d5770:	f7fe fc91 	bl	d4096 <_Znwj>
   d5774:	4682      	mov	sl, r0
   d5776:	b128      	cbz	r0, d5784 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5778:	9b03      	ldr	r3, [sp, #12]
   d577a:	f840 3b04 	str.w	r3, [r0], #4
   d577e:	a904      	add	r1, sp, #16
   d5780:	f7ff fe53 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5784:	9600      	str	r6, [sp, #0]
   d5786:	fa5f f389 	uxtb.w	r3, r9
   d578a:	4642      	mov	r2, r8
   d578c:	4639      	mov	r1, r7
   d578e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5790:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5794:	f7ff fd7a 	bl	d528c <spark_send_event>
   d5798:	b9b8      	cbnz	r0, d57ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d579a:	9b03      	ldr	r3, [sp, #12]
   d579c:	785b      	ldrb	r3, [r3, #1]
   d579e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d57a2:	b993      	cbnz	r3, d57ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d57a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d57a8:	a905      	add	r1, sp, #20
   d57aa:	a803      	add	r0, sp, #12
   d57ac:	9205      	str	r2, [sp, #20]
   d57ae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d57b2:	f7ff ff11 	bl	d55d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d57b6:	a805      	add	r0, sp, #20
   d57b8:	f7ff fe61 	bl	d547e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d57bc:	a805      	add	r0, sp, #20
   d57be:	9909      	ldr	r1, [sp, #36]	; 0x24
   d57c0:	f7ff fe95 	bl	d54ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d57c4:	a806      	add	r0, sp, #24
   d57c6:	f7fe fdd9 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d57ca:	9b03      	ldr	r3, [sp, #12]
   d57cc:	9305      	str	r3, [sp, #20]
   d57ce:	a904      	add	r1, sp, #16
   d57d0:	a806      	add	r0, sp, #24
   d57d2:	f7ff fe2a 	bl	d542a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d57d6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d57d8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d57da:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d57dc:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d57de:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d57e0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d57e2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d57e4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d57e6:	f7fe fdc9 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57ea:	a804      	add	r0, sp, #16
   d57ec:	f7fe fdc6 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d57f0:	e7a2      	b.n	d5738 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d57f2:	bf00      	nop
   d57f4:	000d58bd 	.word	0x000d58bd

000d57f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d57f8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d57fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57fc:	4605      	mov	r5, r0
	  switch (__op)
   d57fe:	d007      	beq.n	d5810 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5800:	2a03      	cmp	r2, #3
   d5802:	d018      	beq.n	d5836 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5804:	2a01      	cmp	r2, #1
   d5806:	d101      	bne.n	d580c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5808:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d580a:	6003      	str	r3, [r0, #0]
	}
   d580c:	2000      	movs	r0, #0
   d580e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5810:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5812:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5814:	f7fe fc3f 	bl	d4096 <_Znwj>
   d5818:	4604      	mov	r4, r0
   d581a:	b150      	cbz	r0, d5832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   d581c:	4631      	mov	r1, r6
   d581e:	f7ff fecb 	bl	d55b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5822:	6930      	ldr	r0, [r6, #16]
   d5824:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5828:	b108      	cbz	r0, d582e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d582a:	f001 fc03 	bl	d7034 <strdup>
        type_(type) {
   d582e:	6120      	str	r0, [r4, #16]
   d5830:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5832:	602c      	str	r4, [r5, #0]
	}
   d5834:	e7ea      	b.n	d580c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5836:	6804      	ldr	r4, [r0, #0]
   d5838:	2c00      	cmp	r4, #0
   d583a:	d0e7      	beq.n	d580c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d583c:	f104 0010 	add.w	r0, r4, #16
   d5840:	f7ff fe1d 	bl	d547e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5844:	4620      	mov	r0, r4
   d5846:	f7ff f806 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d584a:	2118      	movs	r1, #24
   d584c:	4620      	mov	r0, r4
   d584e:	f000 feaf 	bl	d65b0 <_ZdlPvj>
   d5852:	e7db      	b.n	d580c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5854 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5854:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5856:	2300      	movs	r3, #0
   d5858:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d585a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d585c:	4604      	mov	r4, r0
   d585e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5860:	b12b      	cbz	r3, d586e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5862:	2202      	movs	r2, #2
   d5864:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5866:	68eb      	ldr	r3, [r5, #12]
   d5868:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d586a:	68ab      	ldr	r3, [r5, #8]
   d586c:	60a3      	str	r3, [r4, #8]
    }
   d586e:	4620      	mov	r0, r4
   d5870:	bd38      	pop	{r3, r4, r5, pc}

000d5872 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5872:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5874:	b570      	push	{r4, r5, r6, lr}
   d5876:	4604      	mov	r4, r0
	  switch (__op)
   d5878:	d007      	beq.n	d588a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d587a:	2a03      	cmp	r2, #3
   d587c:	d012      	beq.n	d58a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d587e:	2a01      	cmp	r2, #1
   d5880:	d101      	bne.n	d5886 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5882:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5884:	6003      	str	r3, [r0, #0]
	}
   d5886:	2000      	movs	r0, #0
   d5888:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d588a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d588c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d588e:	f7fe fc02 	bl	d4096 <_Znwj>
   d5892:	4605      	mov	r5, r0
   d5894:	b120      	cbz	r0, d58a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5896:	4631      	mov	r1, r6
   d5898:	f7ff ffdc 	bl	d5854 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d589c:	7c33      	ldrb	r3, [r6, #16]
   d589e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d58a0:	6025      	str	r5, [r4, #0]
	}
   d58a2:	e7f0      	b.n	d5886 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d58a4:	6804      	ldr	r4, [r0, #0]
   d58a6:	2c00      	cmp	r4, #0
   d58a8:	d0ed      	beq.n	d5886 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d58aa:	4620      	mov	r0, r4
   d58ac:	f7fe ffd3 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d58b0:	2114      	movs	r1, #20
   d58b2:	4620      	mov	r0, r4
   d58b4:	f000 fe7c 	bl	d65b0 <_ZdlPvj>
   d58b8:	e7e5      	b.n	d5886 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d58bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d58bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d58be:	b089      	sub	sp, #36	; 0x24
   d58c0:	4604      	mov	r4, r0
   d58c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d58c4:	a801      	add	r0, sp, #4
   d58c6:	4611      	mov	r1, r2
   d58c8:	f7ff fe11 	bl	d54ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d58cc:	b1a4      	cbz	r4, d58f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d58ce:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d58d0:	b11d      	cbz	r5, d58da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d58d2:	4628      	mov	r0, r5
   d58d4:	f001 fbae 	bl	d7034 <strdup>
   d58d8:	4605      	mov	r5, r0
   d58da:	a801      	add	r0, sp, #4
   d58dc:	a903      	add	r1, sp, #12
        type_(type) {
   d58de:	9503      	str	r5, [sp, #12]
   d58e0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d58e4:	f7ff fe78 	bl	d55d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d58e8:	a803      	add	r0, sp, #12
   d58ea:	f7ff fdc8 	bl	d547e <_ZN8particle5ErrorD1Ev>
   d58ee:	a802      	add	r0, sp, #8
   d58f0:	f7fe fd44 	bl	d437c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d58f4:	b009      	add	sp, #36	; 0x24
   d58f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d58f8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d58fa:	2301      	movs	r3, #1
   d58fc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5900:	2a00      	cmp	r2, #0
   d5902:	d103      	bne.n	d590c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5904:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5908:	2900      	cmp	r1, #0
   d590a:	d1f7      	bne.n	d58fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d590c:	d1ef      	bne.n	d58ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d590e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5910:	f3bf 8f5b 	dmb	ish
   d5914:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5916:	1d2b      	adds	r3, r5, #4
   d5918:	f3bf 8f5b 	dmb	ish
   d591c:	e853 6f00 	ldrex	r6, [r3]
   d5920:	e843 4200 	strex	r2, r4, [r3]
   d5924:	2a00      	cmp	r2, #0
   d5926:	d1f9      	bne.n	d591c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5928:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d592c:	2e00      	cmp	r6, #0
   d592e:	d0de      	beq.n	d58ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5930:	4620      	mov	r0, r4
   d5932:	f7ff fc77 	bl	d5224 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5936:	4607      	mov	r7, r0
   d5938:	b160      	cbz	r0, d5954 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d593a:	f105 010c 	add.w	r1, r5, #12
   d593e:	4630      	mov	r0, r6
   d5940:	f7ff fe16 	bl	d5570 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5944:	4630      	mov	r0, r6
   d5946:	f7fe ff86 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d594a:	2110      	movs	r1, #16
   d594c:	4630      	mov	r0, r6
   d594e:	f000 fe2f 	bl	d65b0 <_ZdlPvj>
   d5952:	e7cc      	b.n	d58ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5954:	4631      	mov	r1, r6
   d5956:	a803      	add	r0, sp, #12
   d5958:	f7ff ff7c 	bl	d5854 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d595c:	7b2b      	ldrb	r3, [r5, #12]
   d595e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5962:	2010      	movs	r0, #16
   d5964:	f7fe fb97 	bl	d4096 <_Znwj>
   d5968:	4605      	mov	r5, r0
   d596a:	b1d0      	cbz	r0, d59a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d596c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d596e:	2014      	movs	r0, #20
   d5970:	f7fe fb91 	bl	d4096 <_Znwj>
   d5974:	4604      	mov	r4, r0
   d5976:	b178      	cbz	r0, d5998 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5978:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d597a:	4601      	mov	r1, r0
   d597c:	a803      	add	r0, sp, #12
   d597e:	f7ff fdd5 	bl	d552c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5982:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5984:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5986:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5988:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d598a:	9205      	str	r2, [sp, #20]
   d598c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d598e:	60e3      	str	r3, [r4, #12]
   d5990:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5994:	9206      	str	r2, [sp, #24]
   d5996:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5998:	4b06      	ldr	r3, [pc, #24]	; (d59b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d599a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d599c:	4b06      	ldr	r3, [pc, #24]	; (d59b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d599e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d59a0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d59a2:	a803      	add	r0, sp, #12
   d59a4:	f7fe ff57 	bl	d4856 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d59a8:	2200      	movs	r2, #0
   d59aa:	4629      	mov	r1, r5
   d59ac:	4803      	ldr	r0, [pc, #12]	; (d59bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d59ae:	f7ff fc41 	bl	d5234 <application_thread_invoke>
   d59b2:	e7c7      	b.n	d5944 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d59b4:	000d5583 	.word	0x000d5583
   d59b8:	000d5873 	.word	0x000d5873
   d59bc:	000d5403 	.word	0x000d5403

000d59c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59c0:	2200      	movs	r2, #0
   d59c2:	6840      	ldr	r0, [r0, #4]
   d59c4:	4611      	mov	r1, r2
   d59c6:	f7ff bcb1 	b.w	d532c <network_listening>

000d59ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d59ca:	2200      	movs	r2, #0
   d59cc:	6840      	ldr	r0, [r0, #4]
   d59ce:	4611      	mov	r1, r2
   d59d0:	f7ff bcbc 	b.w	d534c <network_get_listen_timeout>

000d59d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d59d4:	6840      	ldr	r0, [r0, #4]
   d59d6:	2200      	movs	r2, #0
   d59d8:	f7ff bcb0 	b.w	d533c <network_set_listen_timeout>

000d59dc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d59dc:	6840      	ldr	r0, [r0, #4]
   d59de:	2200      	movs	r2, #0
   d59e0:	f081 0101 	eor.w	r1, r1, #1
   d59e4:	f7ff bc9a 	b.w	d531c <network_listen>

000d59e8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d59e8:	2300      	movs	r3, #0
   d59ea:	6840      	ldr	r0, [r0, #4]
   d59ec:	461a      	mov	r2, r3
   d59ee:	4619      	mov	r1, r3
   d59f0:	f7ff bc8c 	b.w	d530c <network_off>

000d59f4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d59f4:	2300      	movs	r3, #0
   d59f6:	6840      	ldr	r0, [r0, #4]
   d59f8:	461a      	mov	r2, r3
   d59fa:	4619      	mov	r1, r3
   d59fc:	f7ff bc7e 	b.w	d52fc <network_on>

000d5a00 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a00:	2200      	movs	r2, #0
   d5a02:	6840      	ldr	r0, [r0, #4]
   d5a04:	4611      	mov	r1, r2
   d5a06:	f7ff bc71 	b.w	d52ec <network_ready>

000d5a0a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5a0a:	2200      	movs	r2, #0
   d5a0c:	6840      	ldr	r0, [r0, #4]
   d5a0e:	4611      	mov	r1, r2
   d5a10:	f7ff bc5c 	b.w	d52cc <network_connecting>

000d5a14 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a14:	6840      	ldr	r0, [r0, #4]
   d5a16:	2200      	movs	r2, #0
   d5a18:	2102      	movs	r1, #2
   d5a1a:	f7ff bc5f 	b.w	d52dc <network_disconnect>

000d5a1e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5a1e:	2300      	movs	r3, #0
   d5a20:	6840      	ldr	r0, [r0, #4]
   d5a22:	461a      	mov	r2, r3
   d5a24:	f7ff bc4a 	b.w	d52bc <network_connect>

000d5a28 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a28:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a2a:	2203      	movs	r2, #3
   d5a2c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a2e:	4a02      	ldr	r2, [pc, #8]	; (d5a38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a30:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5a32:	4770      	bx	lr
   d5a34:	2003e5ac 	.word	0x2003e5ac
   d5a38:	000d8f80 	.word	0x000d8f80

000d5a3c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5a3c:	4770      	bx	lr

000d5a3e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a40:	4606      	mov	r6, r0
   d5a42:	4615      	mov	r5, r2
   d5a44:	460c      	mov	r4, r1
   d5a46:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a48:	42bc      	cmp	r4, r7
   d5a4a:	d006      	beq.n	d5a5a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5a4c:	6833      	ldr	r3, [r6, #0]
   d5a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5a52:	689b      	ldr	r3, [r3, #8]
   d5a54:	4630      	mov	r0, r6
   d5a56:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5a58:	e7f6      	b.n	d5a48 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5a5a:	4628      	mov	r0, r5
   d5a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a5e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5a5e:	7c00      	ldrb	r0, [r0, #16]
   d5a60:	2200      	movs	r2, #0
   d5a62:	f7ff bae7 	b.w	d5034 <hal_i2c_write>

000d5a66 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5a66:	7c00      	ldrb	r0, [r0, #16]
   d5a68:	2100      	movs	r1, #0
   d5a6a:	f7ff baeb 	b.w	d5044 <hal_i2c_available>

000d5a6e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5a6e:	7c00      	ldrb	r0, [r0, #16]
   d5a70:	2100      	movs	r1, #0
   d5a72:	f7ff baef 	b.w	d5054 <hal_i2c_read>

000d5a76 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5a76:	7c00      	ldrb	r0, [r0, #16]
   d5a78:	2100      	movs	r1, #0
   d5a7a:	f7ff baf3 	b.w	d5064 <hal_i2c_peek>

000d5a7e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5a7e:	7c00      	ldrb	r0, [r0, #16]
   d5a80:	2100      	movs	r1, #0
   d5a82:	f7ff baf7 	b.w	d5074 <hal_i2c_flush>

000d5a86 <_ZN7TwoWireD0Ev>:
   d5a86:	b510      	push	{r4, lr}
   d5a88:	2114      	movs	r1, #20
   d5a8a:	4604      	mov	r4, r0
   d5a8c:	f000 fd90 	bl	d65b0 <_ZdlPvj>
   d5a90:	4620      	mov	r0, r4
   d5a92:	bd10      	pop	{r4, pc}

000d5a94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5a94:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a9a:	4604      	mov	r4, r0
   d5a9c:	4608      	mov	r0, r1
   d5a9e:	2100      	movs	r1, #0
   d5aa0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5aa4:	4b03      	ldr	r3, [pc, #12]	; (d5ab4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5aa6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5aa8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5aaa:	4611      	mov	r1, r2
   d5aac:	f7ff faf2 	bl	d5094 <hal_i2c_init>
}
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	bd10      	pop	{r4, pc}
   d5ab4:	000d8fbc 	.word	0x000d8fbc

000d5ab8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5ab8:	4770      	bx	lr

000d5aba <_ZN9IPAddressD0Ev>:
   d5aba:	b510      	push	{r4, lr}
   d5abc:	2118      	movs	r1, #24
   d5abe:	4604      	mov	r4, r0
   d5ac0:	f000 fd76 	bl	d65b0 <_ZdlPvj>
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	bd10      	pop	{r4, pc}

000d5ac8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5aca:	7d03      	ldrb	r3, [r0, #20]
   d5acc:	2b06      	cmp	r3, #6
{
   d5ace:	b08d      	sub	sp, #52	; 0x34
   d5ad0:	460e      	mov	r6, r1
   d5ad2:	f100 0704 	add.w	r7, r0, #4
   d5ad6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5ada:	d012      	beq.n	d5b02 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5adc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5ae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5ae4:	220a      	movs	r2, #10
   d5ae6:	4630      	mov	r0, r6
   d5ae8:	f000 f951 	bl	d5d8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5aec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5aee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5af0:	d019      	beq.n	d5b26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5af2:	2c00      	cmp	r4, #0
   d5af4:	d0f4      	beq.n	d5ae0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5af6:	212e      	movs	r1, #46	; 0x2e
   d5af8:	4630      	mov	r0, r6
   d5afa:	f000 f92f 	bl	d5d5c <_ZN5Print5printEc>
   d5afe:	4404      	add	r4, r0
   d5b00:	e7ee      	b.n	d5ae0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b02:	232f      	movs	r3, #47	; 0x2f
   d5b04:	466a      	mov	r2, sp
   d5b06:	4639      	mov	r1, r7
   d5b08:	200a      	movs	r0, #10
		buf[0] = 0;
   d5b0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b0e:	f7ff fac9 	bl	d50a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5b12:	4668      	mov	r0, sp
   d5b14:	f001 faab 	bl	d706e <strlen>
   d5b18:	6833      	ldr	r3, [r6, #0]
   d5b1a:	4602      	mov	r2, r0
   d5b1c:	68db      	ldr	r3, [r3, #12]
   d5b1e:	4669      	mov	r1, sp
   d5b20:	4630      	mov	r0, r6
   d5b22:	4798      	blx	r3
   d5b24:	4604      	mov	r4, r0
    }
    return n;
}
   d5b26:	4620      	mov	r0, r4
   d5b28:	b00d      	add	sp, #52	; 0x34
   d5b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5b2c:	b510      	push	{r4, lr}
   d5b2e:	4b05      	ldr	r3, [pc, #20]	; (d5b44 <_ZN9IPAddressC1Ev+0x18>)
   d5b30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b32:	2211      	movs	r2, #17
   d5b34:	f840 3b04 	str.w	r3, [r0], #4
   d5b38:	2100      	movs	r1, #0
   d5b3a:	f001 fa3c 	bl	d6fb6 <memset>
}
   d5b3e:	4620      	mov	r0, r4
   d5b40:	bd10      	pop	{r4, pc}
   d5b42:	bf00      	nop
   d5b44:	000d8fe4 	.word	0x000d8fe4

000d5b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b48:	4603      	mov	r3, r0
   d5b4a:	4a07      	ldr	r2, [pc, #28]	; (d5b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5b4c:	b510      	push	{r4, lr}
   d5b4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5b52:	f101 0210 	add.w	r2, r1, #16
   d5b56:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b5a:	f843 4b04 	str.w	r4, [r3], #4
   d5b5e:	4291      	cmp	r1, r2
   d5b60:	d1f9      	bne.n	d5b56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5b62:	780a      	ldrb	r2, [r1, #0]
   d5b64:	701a      	strb	r2, [r3, #0]
}
   d5b66:	bd10      	pop	{r4, pc}
   d5b68:	000d8fe4 	.word	0x000d8fe4

000d5b6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5b6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5b6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5b72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5b76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5b7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5b7e:	2304      	movs	r3, #4
   d5b80:	6041      	str	r1, [r0, #4]
   d5b82:	7503      	strb	r3, [r0, #20]
}
   d5b84:	bd10      	pop	{r4, pc}

000d5b86 <_ZN9IPAddressaSEPKh>:
{
   d5b86:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5b88:	78cb      	ldrb	r3, [r1, #3]
   d5b8a:	9300      	str	r3, [sp, #0]
   d5b8c:	788b      	ldrb	r3, [r1, #2]
   d5b8e:	784a      	ldrb	r2, [r1, #1]
   d5b90:	7809      	ldrb	r1, [r1, #0]
   d5b92:	f7ff ffeb 	bl	d5b6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5b96:	b002      	add	sp, #8
   d5b98:	bd10      	pop	{r4, pc}
	...

000d5b9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5b9c:	4b01      	ldr	r3, [pc, #4]	; (d5ba4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5b9e:	4a02      	ldr	r2, [pc, #8]	; (d5ba8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5ba0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5ba2:	4770      	bx	lr
   d5ba4:	2003e5b4 	.word	0x2003e5b4
   d5ba8:	000d8ff0 	.word	0x000d8ff0

000d5bac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5bac:	2300      	movs	r3, #0
   d5bae:	6840      	ldr	r0, [r0, #4]
   d5bb0:	461a      	mov	r2, r3
   d5bb2:	f7ff bb83 	b.w	d52bc <network_connect>

000d5bb6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5bb6:	6840      	ldr	r0, [r0, #4]
   d5bb8:	2200      	movs	r2, #0
   d5bba:	2102      	movs	r1, #2
   d5bbc:	f7ff bb8e 	b.w	d52dc <network_disconnect>

000d5bc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5bc0:	2200      	movs	r2, #0
   d5bc2:	6840      	ldr	r0, [r0, #4]
   d5bc4:	4611      	mov	r1, r2
   d5bc6:	f7ff bb81 	b.w	d52cc <network_connecting>

000d5bca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5bca:	2200      	movs	r2, #0
   d5bcc:	6840      	ldr	r0, [r0, #4]
   d5bce:	4611      	mov	r1, r2
   d5bd0:	f7ff bb8c 	b.w	d52ec <network_ready>

000d5bd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5bd4:	2300      	movs	r3, #0
   d5bd6:	6840      	ldr	r0, [r0, #4]
   d5bd8:	461a      	mov	r2, r3
   d5bda:	4619      	mov	r1, r3
   d5bdc:	f7ff bb8e 	b.w	d52fc <network_on>

000d5be0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5be0:	2300      	movs	r3, #0
   d5be2:	6840      	ldr	r0, [r0, #4]
   d5be4:	461a      	mov	r2, r3
   d5be6:	4619      	mov	r1, r3
   d5be8:	f7ff bb90 	b.w	d530c <network_off>

000d5bec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5bec:	6840      	ldr	r0, [r0, #4]
   d5bee:	2100      	movs	r1, #0
   d5bf0:	f7ff bbb4 	b.w	d535c <network_is_on>

000d5bf4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5bf4:	6840      	ldr	r0, [r0, #4]
   d5bf6:	2100      	movs	r1, #0
   d5bf8:	f7ff bbb8 	b.w	d536c <network_is_off>

000d5bfc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5bfc:	6840      	ldr	r0, [r0, #4]
   d5bfe:	2200      	movs	r2, #0
   d5c00:	f081 0101 	eor.w	r1, r1, #1
   d5c04:	f7ff bb8a 	b.w	d531c <network_listen>

000d5c08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c08:	6840      	ldr	r0, [r0, #4]
   d5c0a:	2200      	movs	r2, #0
   d5c0c:	f7ff bb96 	b.w	d533c <network_set_listen_timeout>

000d5c10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c10:	2200      	movs	r2, #0
   d5c12:	6840      	ldr	r0, [r0, #4]
   d5c14:	4611      	mov	r1, r2
   d5c16:	f7ff bb99 	b.w	d534c <network_get_listen_timeout>

000d5c1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c1a:	2200      	movs	r2, #0
   d5c1c:	6840      	ldr	r0, [r0, #4]
   d5c1e:	4611      	mov	r1, r2
   d5c20:	f7ff bb84 	b.w	d532c <network_listening>

000d5c24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c28:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5c2a:	b095      	sub	sp, #84	; 0x54
   d5c2c:	4616      	mov	r6, r2
   d5c2e:	460d      	mov	r5, r1
   d5c30:	4607      	mov	r7, r0
    IPAddress addr;
   d5c32:	f7ff ff7b 	bl	d5b2c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5c36:	4621      	mov	r1, r4
   d5c38:	2218      	movs	r2, #24
   d5c3a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5c3c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5c3e:	f001 f9ba 	bl	d6fb6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5c42:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5c44:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5c48:	4621      	mov	r1, r4
   d5c4a:	466b      	mov	r3, sp
   d5c4c:	aa0c      	add	r2, sp, #48	; 0x30
   d5c4e:	4630      	mov	r0, r6
   d5c50:	f7ff fa38 	bl	d50c4 <netdb_getaddrinfo>
    if (!r) {
   d5c54:	4604      	mov	r4, r0
   d5c56:	2800      	cmp	r0, #0
   d5c58:	d146      	bne.n	d5ce8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c5a:	4602      	mov	r2, r0
   d5c5c:	2101      	movs	r1, #1
   d5c5e:	6868      	ldr	r0, [r5, #4]
   d5c60:	f7ff fb44 	bl	d52ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c68:	4622      	mov	r2, r4
   d5c6a:	6868      	ldr	r0, [r5, #4]
   d5c6c:	f7ff fb3e 	bl	d52ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c72:	4681      	mov	r9, r0
        bool ok = false;
   d5c74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c76:	2e00      	cmp	r6, #0
   d5c78:	d036      	beq.n	d5ce8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5c7a:	2900      	cmp	r1, #0
   d5c7c:	d134      	bne.n	d5ce8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5c7e:	6873      	ldr	r3, [r6, #4]
   d5c80:	2b02      	cmp	r3, #2
   d5c82:	d003      	beq.n	d5c8c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5c84:	2b0a      	cmp	r3, #10
   d5c86:	d00b      	beq.n	d5ca0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c88:	69f6      	ldr	r6, [r6, #28]
   d5c8a:	e7f4      	b.n	d5c76 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5c8c:	f1b8 0f00 	cmp.w	r8, #0
   d5c90:	d004      	beq.n	d5c9c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5c92:	6971      	ldr	r1, [r6, #20]
   d5c94:	4638      	mov	r0, r7
   d5c96:	3104      	adds	r1, #4
   d5c98:	f7ff ff75 	bl	d5b86 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5c9c:	4641      	mov	r1, r8
   d5c9e:	e7f3      	b.n	d5c88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5ca0:	f1b9 0f00 	cmp.w	r9, #0
   d5ca4:	d101      	bne.n	d5caa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5ca6:	4649      	mov	r1, r9
   d5ca8:	e7ee      	b.n	d5c88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5caa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5cac:	2210      	movs	r2, #16
   d5cae:	a801      	add	r0, sp, #4
   d5cb0:	f001 f981 	bl	d6fb6 <memset>
                    a.v = 6;
   d5cb4:	2306      	movs	r3, #6
   d5cb6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5cba:	ad01      	add	r5, sp, #4
   d5cbc:	f104 0308 	add.w	r3, r4, #8
   d5cc0:	3418      	adds	r4, #24
   d5cc2:	6818      	ldr	r0, [r3, #0]
   d5cc4:	6859      	ldr	r1, [r3, #4]
   d5cc6:	462a      	mov	r2, r5
   d5cc8:	c203      	stmia	r2!, {r0, r1}
   d5cca:	3308      	adds	r3, #8
   d5ccc:	42a3      	cmp	r3, r4
   d5cce:	4615      	mov	r5, r2
   d5cd0:	d1f7      	bne.n	d5cc2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5cd2:	a901      	add	r1, sp, #4
   d5cd4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5cd6:	ad07      	add	r5, sp, #28
   d5cd8:	f7ff ff36 	bl	d5b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cde:	1d3c      	adds	r4, r7, #4
   d5ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ce2:	682b      	ldr	r3, [r5, #0]
   d5ce4:	7023      	strb	r3, [r4, #0]
   d5ce6:	e7de      	b.n	d5ca6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ce8:	9800      	ldr	r0, [sp, #0]
   d5cea:	f7ff f9e3 	bl	d50b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5cee:	4638      	mov	r0, r7
   d5cf0:	b015      	add	sp, #84	; 0x54
   d5cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5cf8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5cf8:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5cfa:	4a03      	ldr	r2, [pc, #12]	; (d5d08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5cfc:	601a      	str	r2, [r3, #0]
   d5cfe:	2200      	movs	r2, #0
   d5d00:	605a      	str	r2, [r3, #4]

} // spark
   d5d02:	4770      	bx	lr
   d5d04:	2003e5b8 	.word	0x2003e5b8
   d5d08:	000d8ffc 	.word	0x000d8ffc

000d5d0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d0e:	4606      	mov	r6, r0
   d5d10:	460d      	mov	r5, r1
  size_t n = 0;
   d5d12:	188f      	adds	r7, r1, r2
   d5d14:	2400      	movs	r4, #0
  while (size--) {
   d5d16:	42bd      	cmp	r5, r7
   d5d18:	d00c      	beq.n	d5d34 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d1a:	6833      	ldr	r3, [r6, #0]
   d5d1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d20:	689b      	ldr	r3, [r3, #8]
   d5d22:	4630      	mov	r0, r6
   d5d24:	4798      	blx	r3
     if (chunk>=0)
   d5d26:	1e03      	subs	r3, r0, #0
   d5d28:	db01      	blt.n	d5d2e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5d2a:	441c      	add	r4, r3
  while (size--) {
   d5d2c:	e7f3      	b.n	d5d16 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5d2e:	2c00      	cmp	r4, #0
   d5d30:	bf08      	it	eq
   d5d32:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5d34:	4620      	mov	r0, r4
   d5d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d38 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5d38:	b513      	push	{r0, r1, r4, lr}
   d5d3a:	4604      	mov	r4, r0
    }
   d5d3c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5d3e:	b159      	cbz	r1, d5d58 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5d40:	9101      	str	r1, [sp, #4]
   d5d42:	f001 f994 	bl	d706e <strlen>
   d5d46:	6823      	ldr	r3, [r4, #0]
   d5d48:	9901      	ldr	r1, [sp, #4]
   d5d4a:	68db      	ldr	r3, [r3, #12]
   d5d4c:	4602      	mov	r2, r0
   d5d4e:	4620      	mov	r0, r4
    }
   d5d50:	b002      	add	sp, #8
   d5d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5d56:	4718      	bx	r3
    }
   d5d58:	b002      	add	sp, #8
   d5d5a:	bd10      	pop	{r4, pc}

000d5d5c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5d5c:	6803      	ldr	r3, [r0, #0]
   d5d5e:	689b      	ldr	r3, [r3, #8]
   d5d60:	4718      	bx	r3

000d5d62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5d64:	210d      	movs	r1, #13
{
   d5d66:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5d68:	f7ff fff8 	bl	d5d5c <_ZN5Print5printEc>
  n += print('\n');
   d5d6c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5d6e:	4604      	mov	r4, r0
  n += print('\n');
   d5d70:	4628      	mov	r0, r5
   d5d72:	f7ff fff3 	bl	d5d5c <_ZN5Print5printEc>
  return n;
}
   d5d76:	4420      	add	r0, r4
   d5d78:	bd38      	pop	{r3, r4, r5, pc}

000d5d7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5d7a:	b538      	push	{r3, r4, r5, lr}
   d5d7c:	4605      	mov	r5, r0
  return write(str);
   d5d7e:	f7ff ffdb 	bl	d5d38 <_ZN5Print5writeEPKc>
   d5d82:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5d84:	4628      	mov	r0, r5
   d5d86:	f7ff ffec 	bl	d5d62 <_ZN5Print7printlnEv>
  return n;
}
   d5d8a:	4420      	add	r0, r4
   d5d8c:	bd38      	pop	{r3, r4, r5, pc}

000d5d8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d8e:	b530      	push	{r4, r5, lr}
   d5d90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5d92:	2300      	movs	r3, #0
   d5d94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5d98:	2a01      	cmp	r2, #1
   d5d9a:	bf98      	it	ls
   d5d9c:	220a      	movls	r2, #10
   d5d9e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5da0:	460d      	mov	r5, r1
   d5da2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5da6:	fb01 5312 	mls	r3, r1, r2, r5
   d5daa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dae:	2b09      	cmp	r3, #9
   d5db0:	bf94      	ite	ls
   d5db2:	3330      	addls	r3, #48	; 0x30
   d5db4:	3337      	addhi	r3, #55	; 0x37
   d5db6:	b2db      	uxtb	r3, r3
  } while(n);
   d5db8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5dbe:	d9ef      	bls.n	d5da0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5dc0:	4621      	mov	r1, r4
   d5dc2:	f7ff ffb9 	bl	d5d38 <_ZN5Print5writeEPKc>
}
   d5dc6:	b00b      	add	sp, #44	; 0x2c
   d5dc8:	bd30      	pop	{r4, r5, pc}

000d5dca <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5dce:	b086      	sub	sp, #24
   d5dd0:	af00      	add	r7, sp, #0
   d5dd2:	4605      	mov	r5, r0
   d5dd4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5dd6:	1d38      	adds	r0, r7, #4
   d5dd8:	2114      	movs	r1, #20
{
   d5dda:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5ddc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5dde:	f7ff faed 	bl	d53bc <vsnprintf>

    if (n<bufsize)
   d5de2:	2813      	cmp	r0, #19
   d5de4:	d80e      	bhi.n	d5e04 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5de6:	1d39      	adds	r1, r7, #4
   d5de8:	4628      	mov	r0, r5
   d5dea:	f7ff ffa5 	bl	d5d38 <_ZN5Print5writeEPKc>
   d5dee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5df0:	b11e      	cbz	r6, d5dfa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5df2:	4628      	mov	r0, r5
   d5df4:	f7ff ffb5 	bl	d5d62 <_ZN5Print7printlnEv>
   d5df8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	3718      	adds	r7, #24
   d5dfe:	46bd      	mov	sp, r7
   d5e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e04:	f100 0308 	add.w	r3, r0, #8
   d5e08:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e0c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e0e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e12:	4622      	mov	r2, r4
   d5e14:	1c41      	adds	r1, r0, #1
   d5e16:	683b      	ldr	r3, [r7, #0]
   d5e18:	4668      	mov	r0, sp
   d5e1a:	f7ff facf 	bl	d53bc <vsnprintf>
  return write(str);
   d5e1e:	4669      	mov	r1, sp
   d5e20:	4628      	mov	r0, r5
   d5e22:	f7ff ff89 	bl	d5d38 <_ZN5Print5writeEPKc>
   d5e26:	4604      	mov	r4, r0
   d5e28:	46c5      	mov	sp, r8
   d5e2a:	e7e1      	b.n	d5df0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5e2c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5e2c:	4b01      	ldr	r3, [pc, #4]	; (d5e34 <_GLOBAL__sub_I_RGB+0x8>)
   d5e2e:	2200      	movs	r2, #0
   d5e30:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5e32:	4770      	bx	lr
   d5e34:	2003e5c0 	.word	0x2003e5c0

000d5e38 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5e38:	b510      	push	{r4, lr}
   d5e3a:	4604      	mov	r4, r0
   d5e3c:	4608      	mov	r0, r1
{
    _spi = spi;
   d5e3e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5e40:	f7ff f950 	bl	d50e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5e44:	2300      	movs	r3, #0
   d5e46:	6063      	str	r3, [r4, #4]
}
   d5e48:	4620      	mov	r0, r4
   d5e4a:	bd10      	pop	{r4, pc}

000d5e4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5e4c:	b510      	push	{r4, lr}
   d5e4e:	4604      	mov	r4, r0
{
	free(buffer);
   d5e50:	6800      	ldr	r0, [r0, #0]
   d5e52:	f7ff fa9b 	bl	d538c <free>
}
   d5e56:	4620      	mov	r0, r4
   d5e58:	bd10      	pop	{r4, pc}

000d5e5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5e5a:	b510      	push	{r4, lr}
   d5e5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5e5e:	6800      	ldr	r0, [r0, #0]
   d5e60:	b108      	cbz	r0, d5e66 <_ZN6String10invalidateEv+0xc>
   d5e62:	f7ff fa93 	bl	d538c <free>
	buffer = NULL;
   d5e66:	2300      	movs	r3, #0
	capacity = len = 0;
   d5e68:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5e6c:	6023      	str	r3, [r4, #0]
}
   d5e6e:	bd10      	pop	{r4, pc}

000d5e70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5e70:	b538      	push	{r3, r4, r5, lr}
   d5e72:	4604      	mov	r4, r0
   d5e74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5e76:	6800      	ldr	r0, [r0, #0]
   d5e78:	3101      	adds	r1, #1
   d5e7a:	f7ff fa8f 	bl	d539c <realloc>
	if (newbuffer) {
   d5e7e:	b110      	cbz	r0, d5e86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5e80:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5e84:	2001      	movs	r0, #1
	}
	return 0;
}
   d5e86:	bd38      	pop	{r3, r4, r5, pc}

000d5e88 <_ZN6String7reserveEj>:
{
   d5e88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5e8a:	6803      	ldr	r3, [r0, #0]
{
   d5e8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5e8e:	b123      	cbz	r3, d5e9a <_ZN6String7reserveEj+0x12>
   d5e90:	6843      	ldr	r3, [r0, #4]
   d5e92:	428b      	cmp	r3, r1
   d5e94:	d301      	bcc.n	d5e9a <_ZN6String7reserveEj+0x12>
   d5e96:	2001      	movs	r0, #1
}
   d5e98:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5e9a:	4620      	mov	r0, r4
   d5e9c:	f7ff ffe8 	bl	d5e70 <_ZN6String12changeBufferEj>
   d5ea0:	2800      	cmp	r0, #0
   d5ea2:	d0f9      	beq.n	d5e98 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5ea4:	68a3      	ldr	r3, [r4, #8]
   d5ea6:	2b00      	cmp	r3, #0
   d5ea8:	d1f5      	bne.n	d5e96 <_ZN6String7reserveEj+0xe>
   d5eaa:	6822      	ldr	r2, [r4, #0]
   d5eac:	7013      	strb	r3, [r2, #0]
   d5eae:	e7f2      	b.n	d5e96 <_ZN6String7reserveEj+0xe>

000d5eb0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5eb2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5eb4:	4611      	mov	r1, r2
   d5eb6:	9201      	str	r2, [sp, #4]
{
   d5eb8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5eba:	f7ff ffe5 	bl	d5e88 <_ZN6String7reserveEj>
   d5ebe:	9a01      	ldr	r2, [sp, #4]
   d5ec0:	b928      	cbnz	r0, d5ece <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5ec2:	4620      	mov	r0, r4
   d5ec4:	f7ff ffc9 	bl	d5e5a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5ec8:	4620      	mov	r0, r4
   d5eca:	b003      	add	sp, #12
   d5ecc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5ece:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5ed0:	4629      	mov	r1, r5
   d5ed2:	6820      	ldr	r0, [r4, #0]
   d5ed4:	f001 f861 	bl	d6f9a <memcpy>
	buffer[len] = 0;
   d5ed8:	6822      	ldr	r2, [r4, #0]
   d5eda:	68a3      	ldr	r3, [r4, #8]
   d5edc:	2100      	movs	r1, #0
   d5ede:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5ee0:	e7f2      	b.n	d5ec8 <_ZN6String4copyEPKcj+0x18>

000d5ee2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5ee2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5ee4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5ee6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5eea:	4604      	mov	r4, r0
	len = 0;
   d5eec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5eee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5ef0:	b141      	cbz	r1, d5f04 <_ZN6StringC1EPKc+0x22>
   d5ef2:	4608      	mov	r0, r1
   d5ef4:	9101      	str	r1, [sp, #4]
   d5ef6:	f001 f8ba 	bl	d706e <strlen>
   d5efa:	9901      	ldr	r1, [sp, #4]
   d5efc:	4602      	mov	r2, r0
   d5efe:	4620      	mov	r0, r4
   d5f00:	f7ff ffd6 	bl	d5eb0 <_ZN6String4copyEPKcj>
}
   d5f04:	4620      	mov	r0, r4
   d5f06:	b002      	add	sp, #8
   d5f08:	bd10      	pop	{r4, pc}

000d5f0a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5f0a:	b513      	push	{r0, r1, r4, lr}
   d5f0c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5f0e:	b159      	cbz	r1, d5f28 <_ZN6StringaSEPKc+0x1e>
   d5f10:	4608      	mov	r0, r1
   d5f12:	9101      	str	r1, [sp, #4]
   d5f14:	f001 f8ab 	bl	d706e <strlen>
   d5f18:	9901      	ldr	r1, [sp, #4]
   d5f1a:	4602      	mov	r2, r0
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	f7ff ffc7 	bl	d5eb0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5f22:	4620      	mov	r0, r4
   d5f24:	b002      	add	sp, #8
   d5f26:	bd10      	pop	{r4, pc}
	else invalidate();
   d5f28:	f7ff ff97 	bl	d5e5a <_ZN6String10invalidateEv>
   d5f2c:	e7f9      	b.n	d5f22 <_ZN6StringaSEPKc+0x18>

000d5f2e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d5f2e:	b510      	push	{r4, lr}
   d5f30:	4604      	mov	r4, r0
   d5f32:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5f34:	2300      	movs	r3, #0
	capacity = 0;
   d5f36:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5f3a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5f3c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d5f3e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d5f40:	a901      	add	r1, sp, #4
   d5f42:	f000 f9b3 	bl	d62ac <itoa>
	*this = buf;
   d5f46:	a901      	add	r1, sp, #4
   d5f48:	4620      	mov	r0, r4
   d5f4a:	f7ff ffde 	bl	d5f0a <_ZN6StringaSEPKc>
}
   d5f4e:	4620      	mov	r0, r4
   d5f50:	b00a      	add	sp, #40	; 0x28
   d5f52:	bd10      	pop	{r4, pc}

000d5f54 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5f54:	4b05      	ldr	r3, [pc, #20]	; (d5f6c <_GLOBAL__sub_I_System+0x18>)
   d5f56:	2202      	movs	r2, #2
   d5f58:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5f5a:	4b05      	ldr	r3, [pc, #20]	; (d5f70 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5f5c:	4a05      	ldr	r2, [pc, #20]	; (d5f74 <_GLOBAL__sub_I_System+0x20>)
   d5f5e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5f60:	2000      	movs	r0, #0
   d5f62:	6018      	str	r0, [r3, #0]
   d5f64:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d5f66:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f68:	f7ff b94c 	b.w	d5204 <set_system_mode>
   d5f6c:	2003e5dc 	.word	0x2003e5dc
   d5f70:	2003e5d0 	.word	0x2003e5d0
   d5f74:	ffff0000 	.word	0xffff0000

000d5f78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f78:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f7a:	681a      	ldr	r2, [r3, #0]
   d5f7c:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f7e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5f80:	4770      	bx	lr
   d5f82:	bf00      	nop
   d5f84:	2003e24c 	.word	0x2003e24c
   d5f88:	2003e5e0 	.word	0x2003e5e0

000d5f8c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d5f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d5f8e:	b287      	uxth	r7, r0
{
   d5f90:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d5f92:	4638      	mov	r0, r7
{
   d5f94:	460d      	mov	r5, r1
   d5f96:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d5f98:	f000 fa3a 	bl	d6410 <pinAvailable>
   d5f9c:	b160      	cbz	r0, d5fb8 <tone+0x2c>
   d5f9e:	2102      	movs	r1, #2
   d5fa0:	4638      	mov	r0, r7
   d5fa2:	f7ff f817 	bl	d4fd4 <HAL_Validate_Pin_Function>
   d5fa6:	2802      	cmp	r0, #2
   d5fa8:	d106      	bne.n	d5fb8 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d5faa:	4632      	mov	r2, r6
   d5fac:	4629      	mov	r1, r5
   d5fae:	4620      	mov	r0, r4
    }
}
   d5fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   d5fb4:	f7ff b88e 	b.w	d50d4 <HAL_Tone_Start>
}
   d5fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fba <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5fba:	4770      	bx	lr

000d5fbc <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5fbc:	7441      	strb	r1, [r0, #17]
}
   d5fbe:	4770      	bx	lr

000d5fc0 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5fc0:	4770      	bx	lr

000d5fc2 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5fc2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5fc4:	7c00      	ldrb	r0, [r0, #16]
   d5fc6:	f7ff f8d5 	bl	d5174 <hal_usart_available_data_for_write>
}
   d5fca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fce:	bd08      	pop	{r3, pc}

000d5fd0 <_ZN11USARTSerial9availableEv>:
{
   d5fd0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5fd2:	7c00      	ldrb	r0, [r0, #16]
   d5fd4:	f7ff f8a6 	bl	d5124 <hal_usart_available>
}
   d5fd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fdc:	bd08      	pop	{r3, pc}

000d5fde <_ZN11USARTSerial4peekEv>:
{
   d5fde:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5fe0:	7c00      	ldrb	r0, [r0, #16]
   d5fe2:	f7ff f8af 	bl	d5144 <hal_usart_peek>
}
   d5fe6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fea:	bd08      	pop	{r3, pc}

000d5fec <_ZN11USARTSerial4readEv>:
{
   d5fec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5fee:	7c00      	ldrb	r0, [r0, #16]
   d5ff0:	f7ff f8a0 	bl	d5134 <hal_usart_read>
}
   d5ff4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5ff8:	bd08      	pop	{r3, pc}

000d5ffa <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5ffa:	7c00      	ldrb	r0, [r0, #16]
   d5ffc:	f7ff b8aa 	b.w	d5154 <hal_usart_flush>

000d6000 <_ZN11USARTSerial5writeEh>:
{
   d6000:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6002:	7c45      	ldrb	r5, [r0, #17]
{
   d6004:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6006:	b12d      	cbz	r5, d6014 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d6008:	7c20      	ldrb	r0, [r4, #16]
}
   d600a:	b003      	add	sp, #12
   d600c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6010:	f7ff b880 	b.w	d5114 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6014:	7c00      	ldrb	r0, [r0, #16]
   d6016:	9101      	str	r1, [sp, #4]
   d6018:	f7ff f8ac 	bl	d5174 <hal_usart_available_data_for_write>
   d601c:	2800      	cmp	r0, #0
   d601e:	9901      	ldr	r1, [sp, #4]
   d6020:	dcf2      	bgt.n	d6008 <_ZN11USARTSerial5writeEh+0x8>
}
   d6022:	4628      	mov	r0, r5
   d6024:	b003      	add	sp, #12
   d6026:	bd30      	pop	{r4, r5, pc}

000d6028 <_ZN11USARTSerialD0Ev>:
   d6028:	b510      	push	{r4, lr}
   d602a:	2114      	movs	r1, #20
   d602c:	4604      	mov	r4, r0
   d602e:	f000 fabf 	bl	d65b0 <_ZdlPvj>
   d6032:	4620      	mov	r0, r4
   d6034:	bd10      	pop	{r4, pc}
	...

000d6038 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6038:	b510      	push	{r4, lr}
   d603a:	f04f 0c00 	mov.w	ip, #0
   d603e:	4604      	mov	r4, r0
   d6040:	4608      	mov	r0, r1
   d6042:	4611      	mov	r1, r2
   d6044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6048:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d604c:	4a04      	ldr	r2, [pc, #16]	; (d6060 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d604e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6050:	2201      	movs	r2, #1
  _serial = serial;
   d6052:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6054:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6056:	461a      	mov	r2, r3
   d6058:	f7ff f854 	bl	d5104 <hal_usart_init>
}
   d605c:	4620      	mov	r0, r4
   d605e:	bd10      	pop	{r4, pc}
   d6060:	000d9054 	.word	0x000d9054

000d6064 <_Z22__fetch_global_Serial1v>:
{
   d6064:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6066:	4c0d      	ldr	r4, [pc, #52]	; (d609c <_Z22__fetch_global_Serial1v+0x38>)
   d6068:	7821      	ldrb	r1, [r4, #0]
   d606a:	f3bf 8f5b 	dmb	ish
   d606e:	f011 0101 	ands.w	r1, r1, #1
   d6072:	d110      	bne.n	d6096 <_Z22__fetch_global_Serial1v+0x32>
   d6074:	4620      	mov	r0, r4
   d6076:	9101      	str	r1, [sp, #4]
   d6078:	f7fe f813 	bl	d40a2 <__cxa_guard_acquire>
   d607c:	9901      	ldr	r1, [sp, #4]
   d607e:	b150      	cbz	r0, d6096 <_Z22__fetch_global_Serial1v+0x32>
   d6080:	4b07      	ldr	r3, [pc, #28]	; (d60a0 <_Z22__fetch_global_Serial1v+0x3c>)
   d6082:	4a08      	ldr	r2, [pc, #32]	; (d60a4 <_Z22__fetch_global_Serial1v+0x40>)
   d6084:	4808      	ldr	r0, [pc, #32]	; (d60a8 <_Z22__fetch_global_Serial1v+0x44>)
   d6086:	f7ff ffd7 	bl	d6038 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d608a:	4620      	mov	r0, r4
   d608c:	f7fe f80e 	bl	d40ac <__cxa_guard_release>
   d6090:	4806      	ldr	r0, [pc, #24]	; (d60ac <_Z22__fetch_global_Serial1v+0x48>)
   d6092:	f000 ff79 	bl	d6f88 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6096:	4804      	ldr	r0, [pc, #16]	; (d60a8 <_Z22__fetch_global_Serial1v+0x44>)
   d6098:	b002      	add	sp, #8
   d609a:	bd10      	pop	{r4, pc}
   d609c:	2003e5e4 	.word	0x2003e5e4
   d60a0:	2003e66c 	.word	0x2003e66c
   d60a4:	2003e5e8 	.word	0x2003e5e8
   d60a8:	2003e6f0 	.word	0x2003e6f0
   d60ac:	000d5fc1 	.word	0x000d5fc1

000d60b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60b0:	7441      	strb	r1, [r0, #17]
}
   d60b2:	4770      	bx	lr

000d60b4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d60b4:	4770      	bx	lr

000d60b6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d60b6:	4770      	bx	lr

000d60b8 <_ZN9USBSerial4readEv>:
{
   d60b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d60ba:	2100      	movs	r1, #0
   d60bc:	7c00      	ldrb	r0, [r0, #16]
   d60be:	f7ff f881 	bl	d51c4 <HAL_USB_USART_Receive_Data>
}
   d60c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60c6:	bd08      	pop	{r3, pc}

000d60c8 <_ZN9USBSerial4peekEv>:
{
   d60c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d60ca:	2101      	movs	r1, #1
   d60cc:	7c00      	ldrb	r0, [r0, #16]
   d60ce:	f7ff f879 	bl	d51c4 <HAL_USB_USART_Receive_Data>
}
   d60d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60d6:	bd08      	pop	{r3, pc}

000d60d8 <_ZN9USBSerial17availableForWriteEv>:
{
   d60d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d60da:	7c00      	ldrb	r0, [r0, #16]
   d60dc:	f7ff f86a 	bl	d51b4 <HAL_USB_USART_Available_Data_For_Write>
}
   d60e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60e4:	bd08      	pop	{r3, pc}

000d60e6 <_ZN9USBSerial9availableEv>:
{
   d60e6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	f7ff f85b 	bl	d51a4 <HAL_USB_USART_Available_Data>
}
   d60ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60f2:	bd08      	pop	{r3, pc}

000d60f4 <_ZN9USBSerial5writeEh>:
{
   d60f4:	b513      	push	{r0, r1, r4, lr}
   d60f6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d60f8:	7c00      	ldrb	r0, [r0, #16]
{
   d60fa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d60fc:	f7ff f85a 	bl	d51b4 <HAL_USB_USART_Available_Data_For_Write>
   d6100:	2800      	cmp	r0, #0
   d6102:	9901      	ldr	r1, [sp, #4]
   d6104:	dc01      	bgt.n	d610a <_ZN9USBSerial5writeEh+0x16>
   d6106:	7c60      	ldrb	r0, [r4, #17]
   d6108:	b120      	cbz	r0, d6114 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d610a:	7c20      	ldrb	r0, [r4, #16]
   d610c:	f7ff f862 	bl	d51d4 <HAL_USB_USART_Send_Data>
   d6110:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6114:	b002      	add	sp, #8
   d6116:	bd10      	pop	{r4, pc}

000d6118 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6118:	7c00      	ldrb	r0, [r0, #16]
   d611a:	f7ff b863 	b.w	d51e4 <HAL_USB_USART_Flush_Data>

000d611e <_ZN9USBSerialD0Ev>:
   d611e:	b510      	push	{r4, lr}
   d6120:	2114      	movs	r1, #20
   d6122:	4604      	mov	r4, r0
   d6124:	f000 fa44 	bl	d65b0 <_ZdlPvj>
   d6128:	4620      	mov	r0, r4
   d612a:	bd10      	pop	{r4, pc}

000d612c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d612c:	b510      	push	{r4, lr}
   d612e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6132:	4604      	mov	r4, r0
   d6134:	4608      	mov	r0, r1
   d6136:	2100      	movs	r1, #0
   d6138:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d613c:	4b04      	ldr	r3, [pc, #16]	; (d6150 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d613e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6140:	2301      	movs	r3, #1
  _serial = serial;
   d6142:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6144:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6146:	4611      	mov	r1, r2
   d6148:	f7ff f81c 	bl	d5184 <HAL_USB_USART_Init>
}
   d614c:	4620      	mov	r0, r4
   d614e:	bd10      	pop	{r4, pc}
   d6150:	000d9084 	.word	0x000d9084

000d6154 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6154:	7c00      	ldrb	r0, [r0, #16]
   d6156:	2200      	movs	r2, #0
   d6158:	f7ff b81c 	b.w	d5194 <HAL_USB_USART_Begin>

000d615c <_Z19acquireSerialBufferv>:
{
   d615c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d615e:	2214      	movs	r2, #20
{
   d6160:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6162:	2100      	movs	r1, #0
   d6164:	f000 ff27 	bl	d6fb6 <memset>
}
   d6168:	4620      	mov	r0, r4
   d616a:	bd10      	pop	{r4, pc}

000d616c <_Z16_fetch_usbserialv>:
{
   d616c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d616e:	4c0f      	ldr	r4, [pc, #60]	; (d61ac <_Z16_fetch_usbserialv+0x40>)
{
   d6170:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6172:	a803      	add	r0, sp, #12
   d6174:	f7ff fff2 	bl	d615c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6178:	7821      	ldrb	r1, [r4, #0]
   d617a:	f3bf 8f5b 	dmb	ish
   d617e:	f011 0101 	ands.w	r1, r1, #1
   d6182:	d10f      	bne.n	d61a4 <_Z16_fetch_usbserialv+0x38>
   d6184:	4620      	mov	r0, r4
   d6186:	9101      	str	r1, [sp, #4]
   d6188:	f7fd ff8b 	bl	d40a2 <__cxa_guard_acquire>
   d618c:	9901      	ldr	r1, [sp, #4]
   d618e:	b148      	cbz	r0, d61a4 <_Z16_fetch_usbserialv+0x38>
   d6190:	aa03      	add	r2, sp, #12
   d6192:	4807      	ldr	r0, [pc, #28]	; (d61b0 <_Z16_fetch_usbserialv+0x44>)
   d6194:	f7ff ffca 	bl	d612c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6198:	4620      	mov	r0, r4
   d619a:	f7fd ff87 	bl	d40ac <__cxa_guard_release>
   d619e:	4805      	ldr	r0, [pc, #20]	; (d61b4 <_Z16_fetch_usbserialv+0x48>)
   d61a0:	f000 fef2 	bl	d6f88 <atexit>
	return _usbserial;
}
   d61a4:	4802      	ldr	r0, [pc, #8]	; (d61b0 <_Z16_fetch_usbserialv+0x44>)
   d61a6:	b008      	add	sp, #32
   d61a8:	bd10      	pop	{r4, pc}
   d61aa:	bf00      	nop
   d61ac:	2003e704 	.word	0x2003e704
   d61b0:	2003e708 	.word	0x2003e708
   d61b4:	000d60b5 	.word	0x000d60b5

000d61b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d61b8:	2200      	movs	r2, #0
   d61ba:	6840      	ldr	r0, [r0, #4]
   d61bc:	4611      	mov	r1, r2
   d61be:	f7ff b895 	b.w	d52ec <network_ready>

000d61c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61c2:	2200      	movs	r2, #0
   d61c4:	6840      	ldr	r0, [r0, #4]
   d61c6:	4611      	mov	r1, r2
   d61c8:	f7ff b8b0 	b.w	d532c <network_listening>

000d61cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d61cc:	2200      	movs	r2, #0
   d61ce:	6840      	ldr	r0, [r0, #4]
   d61d0:	4611      	mov	r1, r2
   d61d2:	f7ff b8bb 	b.w	d534c <network_get_listen_timeout>

000d61d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d61d6:	6840      	ldr	r0, [r0, #4]
   d61d8:	2200      	movs	r2, #0
   d61da:	f7ff b8af 	b.w	d533c <network_set_listen_timeout>

000d61de <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d61de:	6840      	ldr	r0, [r0, #4]
   d61e0:	2200      	movs	r2, #0
   d61e2:	f081 0101 	eor.w	r1, r1, #1
   d61e6:	f7ff b899 	b.w	d531c <network_listen>

000d61ea <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d61ea:	2300      	movs	r3, #0
   d61ec:	6840      	ldr	r0, [r0, #4]
   d61ee:	461a      	mov	r2, r3
   d61f0:	4619      	mov	r1, r3
   d61f2:	f7ff b88b 	b.w	d530c <network_off>

000d61f6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d61f6:	2300      	movs	r3, #0
   d61f8:	6840      	ldr	r0, [r0, #4]
   d61fa:	461a      	mov	r2, r3
   d61fc:	4619      	mov	r1, r3
   d61fe:	f7ff b87d 	b.w	d52fc <network_on>

000d6202 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6202:	2200      	movs	r2, #0
   d6204:	6840      	ldr	r0, [r0, #4]
   d6206:	4611      	mov	r1, r2
   d6208:	f7ff b860 	b.w	d52cc <network_connecting>

000d620c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d620c:	6840      	ldr	r0, [r0, #4]
   d620e:	2200      	movs	r2, #0
   d6210:	2102      	movs	r1, #2
   d6212:	f7ff b863 	b.w	d52dc <network_disconnect>

000d6216 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6216:	2300      	movs	r3, #0
   d6218:	6840      	ldr	r0, [r0, #4]
   d621a:	461a      	mov	r2, r3
   d621c:	f7ff b84e 	b.w	d52bc <network_connect>

000d6220 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6220:	4b02      	ldr	r3, [pc, #8]	; (d622c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6222:	2204      	movs	r2, #4
   d6224:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6226:	4a02      	ldr	r2, [pc, #8]	; (d6230 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6228:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d622a:	4770      	bx	lr
   d622c:	2003e71c 	.word	0x2003e71c
   d6230:	000d90b4 	.word	0x000d90b4

000d6234 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6234:	b510      	push	{r4, lr}
   d6236:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6238:	f000 ff19 	bl	d706e <strlen>
   d623c:	3801      	subs	r0, #1
   d623e:	1823      	adds	r3, r4, r0
   d6240:	4620      	mov	r0, r4
	while(i<j){
   d6242:	4283      	cmp	r3, r0
   d6244:	d906      	bls.n	d6254 <_Z11str_reversePc+0x20>
		c = *i;
   d6246:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6248:	7819      	ldrb	r1, [r3, #0]
   d624a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d624e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6252:	e7f6      	b.n	d6242 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6254:	bd10      	pop	{r4, pc}

000d6256 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6256:	b570      	push	{r4, r5, r6, lr}
   d6258:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d625a:	1e91      	subs	r1, r2, #2
   d625c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d625e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6260:	d822      	bhi.n	d62a8 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6262:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6264:	b16d      	cbz	r5, d6282 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6266:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d626a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d626e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6270:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6272:	bf94      	ite	ls
   d6274:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6276:	3157      	addhi	r1, #87	; 0x57
   d6278:	b2c9      	uxtb	r1, r1
   d627a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d627e:	4635      	mov	r5, r6
	while(a){
   d6280:	e7f0      	b.n	d6264 <ultoa+0xe>
   d6282:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6284:	4423      	add	r3, r4
            *ptr++ = '0';
   d6286:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6288:	4293      	cmp	r3, r2
   d628a:	d902      	bls.n	d6292 <ultoa+0x3c>
            *ptr++ = '0';
   d628c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6290:	e7fa      	b.n	d6288 <ultoa+0x32>
   d6292:	1a1a      	subs	r2, r3, r0
   d6294:	4283      	cmp	r3, r0
   d6296:	bf38      	it	cc
   d6298:	2200      	movcc	r2, #0

	*ptr = '\0';
   d629a:	2300      	movs	r3, #0
   d629c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d629e:	4620      	mov	r0, r4
   d62a0:	f7ff ffc8 	bl	d6234 <_Z11str_reversePc>
	return buffer;
   d62a4:	4620      	mov	r0, r4
}
   d62a6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d62a8:	2000      	movs	r0, #0
   d62aa:	e7fc      	b.n	d62a6 <ultoa+0x50>

000d62ac <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d62ac:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d62ae:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d62b0:	460c      	mov	r4, r1
   d62b2:	4615      	mov	r5, r2
	if(a<0){
   d62b4:	da0e      	bge.n	d62d4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d62b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d62ba:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d62be:	bf14      	ite	ne
   d62c0:	4258      	negne	r0, r3
   d62c2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d62c4:	2301      	movs	r3, #1
		*buffer = '-';
   d62c6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d62c8:	462a      	mov	r2, r5
   d62ca:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d62cc:	f7ff ffc3 	bl	d6256 <ultoa>
	}
	return buffer;
}
   d62d0:	4620      	mov	r0, r4
   d62d2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d62d4:	2301      	movs	r3, #1
   d62d6:	e7f9      	b.n	d62cc <itoa+0x20>

000d62d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d62d8:	4b01      	ldr	r3, [pc, #4]	; (d62e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d62da:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d62dc:	4770      	bx	lr
   d62de:	bf00      	nop
   d62e0:	2003e250 	.word	0x2003e250

000d62e4 <serialEventRun>:
{
   d62e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d62e6:	4b0b      	ldr	r3, [pc, #44]	; (d6314 <serialEventRun+0x30>)
   d62e8:	b143      	cbz	r3, d62fc <serialEventRun+0x18>
   d62ea:	f7ff ff3f 	bl	d616c <_Z16_fetch_usbserialv>
   d62ee:	6803      	ldr	r3, [r0, #0]
   d62f0:	691b      	ldr	r3, [r3, #16]
   d62f2:	4798      	blx	r3
   d62f4:	2800      	cmp	r0, #0
   d62f6:	dd01      	ble.n	d62fc <serialEventRun+0x18>
        serialEvent();
   d62f8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d62fc:	4b06      	ldr	r3, [pc, #24]	; (d6318 <serialEventRun+0x34>)
   d62fe:	b143      	cbz	r3, d6312 <serialEventRun+0x2e>
   d6300:	f7ff feb0 	bl	d6064 <_Z22__fetch_global_Serial1v>
   d6304:	6803      	ldr	r3, [r0, #0]
   d6306:	691b      	ldr	r3, [r3, #16]
   d6308:	4798      	blx	r3
   d630a:	2800      	cmp	r0, #0
   d630c:	dd01      	ble.n	d6312 <serialEventRun+0x2e>
        serialEvent1();
   d630e:	f3af 8000 	nop.w
}
   d6312:	bd08      	pop	{r3, pc}
	...

000d631c <_post_loop>:
{
   d631c:	b508      	push	{r3, lr}
	serialEventRun();
   d631e:	f7ff ffe1 	bl	d62e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6322:	f7fe fe47 	bl	d4fb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6326:	4b01      	ldr	r3, [pc, #4]	; (d632c <_post_loop+0x10>)
   d6328:	6018      	str	r0, [r3, #0]
}
   d632a:	bd08      	pop	{r3, pc}
   d632c:	2003e738 	.word	0x2003e738

000d6330 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6330:	4805      	ldr	r0, [pc, #20]	; (d6348 <_Z33system_initialize_user_backup_ramv+0x18>)
   d6332:	4a06      	ldr	r2, [pc, #24]	; (d634c <_Z33system_initialize_user_backup_ramv+0x1c>)
   d6334:	4906      	ldr	r1, [pc, #24]	; (d6350 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d6336:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6338:	1a12      	subs	r2, r2, r0
   d633a:	f000 fe2e 	bl	d6f9a <memcpy>
    __backup_sram_signature = signature;
   d633e:	4b05      	ldr	r3, [pc, #20]	; (d6354 <_Z33system_initialize_user_backup_ramv+0x24>)
   d6340:	4a05      	ldr	r2, [pc, #20]	; (d6358 <_Z33system_initialize_user_backup_ramv+0x28>)
   d6342:	601a      	str	r2, [r3, #0]
}
   d6344:	bd08      	pop	{r3, pc}
   d6346:	bf00      	nop
   d6348:	2003f400 	.word	0x2003f400
   d634c:	2003f404 	.word	0x2003f404
   d6350:	000d9390 	.word	0x000d9390
   d6354:	2003f400 	.word	0x2003f400
   d6358:	9a271c1e 	.word	0x9a271c1e

000d635c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d635c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d635e:	2300      	movs	r3, #0
   d6360:	9300      	str	r3, [sp, #0]
   d6362:	461a      	mov	r2, r3
   d6364:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6368:	f7fe ff76 	bl	d5258 <system_ctrl_set_result>
}
   d636c:	b003      	add	sp, #12
   d636e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6374 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6374:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6376:	8843      	ldrh	r3, [r0, #2]
   d6378:	2b0a      	cmp	r3, #10
   d637a:	d008      	beq.n	d638e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d637c:	2b50      	cmp	r3, #80	; 0x50
   d637e:	d10b      	bne.n	d6398 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6380:	4b09      	ldr	r3, [pc, #36]	; (d63a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6382:	681b      	ldr	r3, [r3, #0]
   d6384:	b14b      	cbz	r3, d639a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6386:	b003      	add	sp, #12
   d6388:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d638c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d638e:	f7ff ffe5 	bl	d635c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6392:	b003      	add	sp, #12
   d6394:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6398:	2300      	movs	r3, #0
   d639a:	9300      	str	r3, [sp, #0]
   d639c:	461a      	mov	r2, r3
   d639e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d63a2:	f7fe ff59 	bl	d5258 <system_ctrl_set_result>
}
   d63a6:	e7f4      	b.n	d6392 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d63a8:	2003e728 	.word	0x2003e728

000d63ac <module_user_init_hook>:
{
   d63ac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d63ae:	4812      	ldr	r0, [pc, #72]	; (d63f8 <module_user_init_hook+0x4c>)
   d63b0:	2100      	movs	r1, #0
   d63b2:	f7ff f81b 	bl	d53ec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d63b6:	4b11      	ldr	r3, [pc, #68]	; (d63fc <module_user_init_hook+0x50>)
   d63b8:	681a      	ldr	r2, [r3, #0]
   d63ba:	4b11      	ldr	r3, [pc, #68]	; (d6400 <module_user_init_hook+0x54>)
   d63bc:	429a      	cmp	r2, r3
   d63be:	4b11      	ldr	r3, [pc, #68]	; (d6404 <module_user_init_hook+0x58>)
   d63c0:	bf0c      	ite	eq
   d63c2:	2201      	moveq	r2, #1
   d63c4:	2200      	movne	r2, #0
   d63c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d63c8:	d001      	beq.n	d63ce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d63ca:	f7ff ffb1 	bl	d6330 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d63ce:	f7fe fdd9 	bl	d4f84 <HAL_RNG_GetRandomNumber>
   d63d2:	4604      	mov	r4, r0
    srand(seed);
   d63d4:	f000 fdf8 	bl	d6fc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d63d8:	4b0b      	ldr	r3, [pc, #44]	; (d6408 <module_user_init_hook+0x5c>)
   d63da:	b113      	cbz	r3, d63e2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d63dc:	4620      	mov	r0, r4
   d63de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d63e2:	2100      	movs	r1, #0
   d63e4:	4808      	ldr	r0, [pc, #32]	; (d6408 <module_user_init_hook+0x5c>)
   d63e6:	f7fe ff61 	bl	d52ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d63ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d63ee:	4807      	ldr	r0, [pc, #28]	; (d640c <module_user_init_hook+0x60>)
   d63f0:	2100      	movs	r1, #0
   d63f2:	f7fe bf27 	b.w	d5244 <system_ctrl_set_app_request_handler>
   d63f6:	bf00      	nop
   d63f8:	000d62d9 	.word	0x000d62d9
   d63fc:	2003f400 	.word	0x2003f400
   d6400:	9a271c1e 	.word	0x9a271c1e
   d6404:	2003e724 	.word	0x2003e724
   d6408:	00000000 	.word	0x00000000
   d640c:	000d6375 	.word	0x000d6375

000d6410 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6410:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6412:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6414:	d902      	bls.n	d641c <pinAvailable+0xc>
    return false;
   d6416:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6418:	b002      	add	sp, #8
   d641a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d641c:	f1a0 030b 	sub.w	r3, r0, #11
   d6420:	2b02      	cmp	r3, #2
   d6422:	d81a      	bhi.n	d645a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6424:	4c17      	ldr	r4, [pc, #92]	; (d6484 <pinAvailable+0x74>)
   d6426:	7821      	ldrb	r1, [r4, #0]
   d6428:	f3bf 8f5b 	dmb	ish
   d642c:	f011 0101 	ands.w	r1, r1, #1
   d6430:	d10b      	bne.n	d644a <pinAvailable+0x3a>
   d6432:	4620      	mov	r0, r4
   d6434:	9101      	str	r1, [sp, #4]
   d6436:	f7fd fe34 	bl	d40a2 <__cxa_guard_acquire>
   d643a:	9901      	ldr	r1, [sp, #4]
   d643c:	b128      	cbz	r0, d644a <pinAvailable+0x3a>
   d643e:	4812      	ldr	r0, [pc, #72]	; (d6488 <pinAvailable+0x78>)
   d6440:	f7ff fcfa 	bl	d5e38 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6444:	4620      	mov	r0, r4
   d6446:	f7fd fe31 	bl	d40ac <__cxa_guard_release>
   d644a:	4b0f      	ldr	r3, [pc, #60]	; (d6488 <pinAvailable+0x78>)
   d644c:	7818      	ldrb	r0, [r3, #0]
   d644e:	f7fe fe51 	bl	d50f4 <hal_spi_is_enabled>
   d6452:	2800      	cmp	r0, #0
   d6454:	d1df      	bne.n	d6416 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6456:	2001      	movs	r0, #1
   d6458:	e7de      	b.n	d6418 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d645a:	2801      	cmp	r0, #1
   d645c:	d809      	bhi.n	d6472 <pinAvailable+0x62>
   d645e:	f000 f883 	bl	d6568 <_Z19__fetch_global_Wirev>
   d6462:	2100      	movs	r1, #0
   d6464:	7c00      	ldrb	r0, [r0, #16]
   d6466:	f7fe fe0d 	bl	d5084 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d646a:	f080 0001 	eor.w	r0, r0, #1
   d646e:	b2c0      	uxtb	r0, r0
   d6470:	e7d2      	b.n	d6418 <pinAvailable+0x8>
   d6472:	3809      	subs	r0, #9
   d6474:	2801      	cmp	r0, #1
   d6476:	d8ee      	bhi.n	d6456 <pinAvailable+0x46>
   d6478:	f7ff fdf4 	bl	d6064 <_Z22__fetch_global_Serial1v>
   d647c:	7c00      	ldrb	r0, [r0, #16]
   d647e:	f7fe fe71 	bl	d5164 <hal_usart_is_enabled>
   d6482:	e7f2      	b.n	d646a <pinAvailable+0x5a>
   d6484:	2003e72c 	.word	0x2003e72c
   d6488:	2003e730 	.word	0x2003e730

000d648c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d648c:	2823      	cmp	r0, #35	; 0x23
{
   d648e:	b538      	push	{r3, r4, r5, lr}
   d6490:	4604      	mov	r4, r0
   d6492:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6494:	d80a      	bhi.n	d64ac <pinMode+0x20>
   d6496:	29ff      	cmp	r1, #255	; 0xff
   d6498:	d008      	beq.n	d64ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d649a:	f7ff ffb9 	bl	d6410 <pinAvailable>
   d649e:	b128      	cbz	r0, d64ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d64a0:	4629      	mov	r1, r5
   d64a2:	4620      	mov	r0, r4
}
   d64a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d64a8:	f7fe bd9c 	b.w	d4fe4 <HAL_Pin_Mode>
}
   d64ac:	bd38      	pop	{r3, r4, r5, pc}

000d64ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d64ae:	b538      	push	{r3, r4, r5, lr}
   d64b0:	4604      	mov	r4, r0
   d64b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d64b4:	f7fe fd9e 	bl	d4ff4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d64b8:	28ff      	cmp	r0, #255	; 0xff
   d64ba:	d010      	beq.n	d64de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d64bc:	2806      	cmp	r0, #6
   d64be:	d804      	bhi.n	d64ca <digitalWrite+0x1c>
   d64c0:	234d      	movs	r3, #77	; 0x4d
   d64c2:	fa23 f000 	lsr.w	r0, r3, r0
   d64c6:	07c3      	lsls	r3, r0, #31
   d64c8:	d409      	bmi.n	d64de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d64ca:	4620      	mov	r0, r4
   d64cc:	f7ff ffa0 	bl	d6410 <pinAvailable>
   d64d0:	b128      	cbz	r0, d64de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d64d2:	4629      	mov	r1, r5
   d64d4:	4620      	mov	r0, r4
}
   d64d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d64da:	f7fe bd93 	b.w	d5004 <HAL_GPIO_Write>
}
   d64de:	bd38      	pop	{r3, r4, r5, pc}

000d64e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d64e0:	b510      	push	{r4, lr}
   d64e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d64e4:	f7fe fd86 	bl	d4ff4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d64e8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d64ea:	b2db      	uxtb	r3, r3
   d64ec:	2b01      	cmp	r3, #1
   d64ee:	d908      	bls.n	d6502 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d64f0:	4620      	mov	r0, r4
   d64f2:	f7ff ff8d 	bl	d6410 <pinAvailable>
   d64f6:	b120      	cbz	r0, d6502 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d64f8:	4620      	mov	r0, r4
}
   d64fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d64fe:	f7fe bd89 	b.w	d5014 <HAL_GPIO_Read>
}
   d6502:	2000      	movs	r0, #0
   d6504:	bd10      	pop	{r4, pc}

000d6506 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6506:	280d      	cmp	r0, #13
{
   d6508:	b510      	push	{r4, lr}
   d650a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d650c:	bf9c      	itt	ls
   d650e:	340e      	addls	r4, #14
   d6510:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6512:	4620      	mov	r0, r4
   d6514:	f7ff ff7c 	bl	d6410 <pinAvailable>
   d6518:	b150      	cbz	r0, d6530 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d651a:	2103      	movs	r1, #3
   d651c:	4620      	mov	r0, r4
   d651e:	f7fe fd59 	bl	d4fd4 <HAL_Validate_Pin_Function>
   d6522:	2803      	cmp	r0, #3
   d6524:	d104      	bne.n	d6530 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6526:	4620      	mov	r0, r4
}
   d6528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d652c:	f7fe bd7a 	b.w	d5024 <hal_adc_read>
}
   d6530:	2000      	movs	r0, #0
   d6532:	bd10      	pop	{r4, pc}

000d6534 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6534:	4770      	bx	lr
	...

000d6538 <_Z17acquireWireBufferv>:
{
   d6538:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d653a:	2300      	movs	r3, #0
   d653c:	2520      	movs	r5, #32
   d653e:	8043      	strh	r3, [r0, #2]
   d6540:	2314      	movs	r3, #20
{
   d6542:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6544:	8003      	strh	r3, [r0, #0]
   d6546:	6085      	str	r5, [r0, #8]
   d6548:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d654a:	4906      	ldr	r1, [pc, #24]	; (d6564 <_Z17acquireWireBufferv+0x2c>)
   d654c:	4628      	mov	r0, r5
   d654e:	f000 f831 	bl	d65b4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6552:	4904      	ldr	r1, [pc, #16]	; (d6564 <_Z17acquireWireBufferv+0x2c>)
	};
   d6554:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6556:	4628      	mov	r0, r5
   d6558:	f000 f82c 	bl	d65b4 <_ZnajRKSt9nothrow_t>
	};
   d655c:	60e0      	str	r0, [r4, #12]
}
   d655e:	4620      	mov	r0, r4
   d6560:	bd38      	pop	{r3, r4, r5, pc}
   d6562:	bf00      	nop
   d6564:	000d90e8 	.word	0x000d90e8

000d6568 <_Z19__fetch_global_Wirev>:
{
   d6568:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d656a:	4d0e      	ldr	r5, [pc, #56]	; (d65a4 <_Z19__fetch_global_Wirev+0x3c>)
   d656c:	7829      	ldrb	r1, [r5, #0]
   d656e:	f3bf 8f5b 	dmb	ish
   d6572:	f011 0401 	ands.w	r4, r1, #1
{
   d6576:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6578:	d111      	bne.n	d659e <_Z19__fetch_global_Wirev+0x36>
   d657a:	4628      	mov	r0, r5
   d657c:	f7fd fd91 	bl	d40a2 <__cxa_guard_acquire>
   d6580:	b168      	cbz	r0, d659e <_Z19__fetch_global_Wirev+0x36>
   d6582:	a801      	add	r0, sp, #4
   d6584:	f7ff ffd8 	bl	d6538 <_Z17acquireWireBufferv>
   d6588:	aa01      	add	r2, sp, #4
   d658a:	4621      	mov	r1, r4
   d658c:	4806      	ldr	r0, [pc, #24]	; (d65a8 <_Z19__fetch_global_Wirev+0x40>)
   d658e:	f7ff fa81 	bl	d5a94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6592:	4628      	mov	r0, r5
   d6594:	f7fd fd8a 	bl	d40ac <__cxa_guard_release>
   d6598:	4804      	ldr	r0, [pc, #16]	; (d65ac <_Z19__fetch_global_Wirev+0x44>)
   d659a:	f000 fcf5 	bl	d6f88 <atexit>
	return wire;
}
   d659e:	4802      	ldr	r0, [pc, #8]	; (d65a8 <_Z19__fetch_global_Wirev+0x40>)
   d65a0:	b007      	add	sp, #28
   d65a2:	bd30      	pop	{r4, r5, pc}
   d65a4:	2003e73c 	.word	0x2003e73c
   d65a8:	2003e740 	.word	0x2003e740
   d65ac:	000d6535 	.word	0x000d6535

000d65b0 <_ZdlPvj>:
   d65b0:	f7fd bd75 	b.w	d409e <_ZdlPv>

000d65b4 <_ZnajRKSt9nothrow_t>:
   d65b4:	f7fd bd71 	b.w	d409a <_Znaj>

000d65b8 <_ZSt25__throw_bad_function_callv>:
   d65b8:	b508      	push	{r3, lr}
   d65ba:	f7fe ff07 	bl	d53cc <abort>
	...

000d65c0 <__aeabi_drsub>:
   d65c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d65c4:	e002      	b.n	d65cc <__adddf3>
   d65c6:	bf00      	nop

000d65c8 <__aeabi_dsub>:
   d65c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d65cc <__adddf3>:
   d65cc:	b530      	push	{r4, r5, lr}
   d65ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d65d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d65d6:	ea94 0f05 	teq	r4, r5
   d65da:	bf08      	it	eq
   d65dc:	ea90 0f02 	teqeq	r0, r2
   d65e0:	bf1f      	itttt	ne
   d65e2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d65e6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d65ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d65ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d65f2:	f000 80e2 	beq.w	d67ba <__adddf3+0x1ee>
   d65f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d65fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d65fe:	bfb8      	it	lt
   d6600:	426d      	neglt	r5, r5
   d6602:	dd0c      	ble.n	d661e <__adddf3+0x52>
   d6604:	442c      	add	r4, r5
   d6606:	ea80 0202 	eor.w	r2, r0, r2
   d660a:	ea81 0303 	eor.w	r3, r1, r3
   d660e:	ea82 0000 	eor.w	r0, r2, r0
   d6612:	ea83 0101 	eor.w	r1, r3, r1
   d6616:	ea80 0202 	eor.w	r2, r0, r2
   d661a:	ea81 0303 	eor.w	r3, r1, r3
   d661e:	2d36      	cmp	r5, #54	; 0x36
   d6620:	bf88      	it	hi
   d6622:	bd30      	pophi	{r4, r5, pc}
   d6624:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6628:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d662c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6630:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6634:	d002      	beq.n	d663c <__adddf3+0x70>
   d6636:	4240      	negs	r0, r0
   d6638:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d663c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6640:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6644:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6648:	d002      	beq.n	d6650 <__adddf3+0x84>
   d664a:	4252      	negs	r2, r2
   d664c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6650:	ea94 0f05 	teq	r4, r5
   d6654:	f000 80a7 	beq.w	d67a6 <__adddf3+0x1da>
   d6658:	f1a4 0401 	sub.w	r4, r4, #1
   d665c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6660:	db0d      	blt.n	d667e <__adddf3+0xb2>
   d6662:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6666:	fa22 f205 	lsr.w	r2, r2, r5
   d666a:	1880      	adds	r0, r0, r2
   d666c:	f141 0100 	adc.w	r1, r1, #0
   d6670:	fa03 f20e 	lsl.w	r2, r3, lr
   d6674:	1880      	adds	r0, r0, r2
   d6676:	fa43 f305 	asr.w	r3, r3, r5
   d667a:	4159      	adcs	r1, r3
   d667c:	e00e      	b.n	d669c <__adddf3+0xd0>
   d667e:	f1a5 0520 	sub.w	r5, r5, #32
   d6682:	f10e 0e20 	add.w	lr, lr, #32
   d6686:	2a01      	cmp	r2, #1
   d6688:	fa03 fc0e 	lsl.w	ip, r3, lr
   d668c:	bf28      	it	cs
   d668e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6692:	fa43 f305 	asr.w	r3, r3, r5
   d6696:	18c0      	adds	r0, r0, r3
   d6698:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d669c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d66a0:	d507      	bpl.n	d66b2 <__adddf3+0xe6>
   d66a2:	f04f 0e00 	mov.w	lr, #0
   d66a6:	f1dc 0c00 	rsbs	ip, ip, #0
   d66aa:	eb7e 0000 	sbcs.w	r0, lr, r0
   d66ae:	eb6e 0101 	sbc.w	r1, lr, r1
   d66b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d66b6:	d31b      	bcc.n	d66f0 <__adddf3+0x124>
   d66b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d66bc:	d30c      	bcc.n	d66d8 <__adddf3+0x10c>
   d66be:	0849      	lsrs	r1, r1, #1
   d66c0:	ea5f 0030 	movs.w	r0, r0, rrx
   d66c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d66c8:	f104 0401 	add.w	r4, r4, #1
   d66cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d66d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d66d4:	f080 809a 	bcs.w	d680c <__adddf3+0x240>
   d66d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d66dc:	bf08      	it	eq
   d66de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d66e2:	f150 0000 	adcs.w	r0, r0, #0
   d66e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d66ea:	ea41 0105 	orr.w	r1, r1, r5
   d66ee:	bd30      	pop	{r4, r5, pc}
   d66f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d66f4:	4140      	adcs	r0, r0
   d66f6:	eb41 0101 	adc.w	r1, r1, r1
   d66fa:	3c01      	subs	r4, #1
   d66fc:	bf28      	it	cs
   d66fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6702:	d2e9      	bcs.n	d66d8 <__adddf3+0x10c>
   d6704:	f091 0f00 	teq	r1, #0
   d6708:	bf04      	itt	eq
   d670a:	4601      	moveq	r1, r0
   d670c:	2000      	moveq	r0, #0
   d670e:	fab1 f381 	clz	r3, r1
   d6712:	bf08      	it	eq
   d6714:	3320      	addeq	r3, #32
   d6716:	f1a3 030b 	sub.w	r3, r3, #11
   d671a:	f1b3 0220 	subs.w	r2, r3, #32
   d671e:	da0c      	bge.n	d673a <__adddf3+0x16e>
   d6720:	320c      	adds	r2, #12
   d6722:	dd08      	ble.n	d6736 <__adddf3+0x16a>
   d6724:	f102 0c14 	add.w	ip, r2, #20
   d6728:	f1c2 020c 	rsb	r2, r2, #12
   d672c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6730:	fa21 f102 	lsr.w	r1, r1, r2
   d6734:	e00c      	b.n	d6750 <__adddf3+0x184>
   d6736:	f102 0214 	add.w	r2, r2, #20
   d673a:	bfd8      	it	le
   d673c:	f1c2 0c20 	rsble	ip, r2, #32
   d6740:	fa01 f102 	lsl.w	r1, r1, r2
   d6744:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6748:	bfdc      	itt	le
   d674a:	ea41 010c 	orrle.w	r1, r1, ip
   d674e:	4090      	lslle	r0, r2
   d6750:	1ae4      	subs	r4, r4, r3
   d6752:	bfa2      	ittt	ge
   d6754:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6758:	4329      	orrge	r1, r5
   d675a:	bd30      	popge	{r4, r5, pc}
   d675c:	ea6f 0404 	mvn.w	r4, r4
   d6760:	3c1f      	subs	r4, #31
   d6762:	da1c      	bge.n	d679e <__adddf3+0x1d2>
   d6764:	340c      	adds	r4, #12
   d6766:	dc0e      	bgt.n	d6786 <__adddf3+0x1ba>
   d6768:	f104 0414 	add.w	r4, r4, #20
   d676c:	f1c4 0220 	rsb	r2, r4, #32
   d6770:	fa20 f004 	lsr.w	r0, r0, r4
   d6774:	fa01 f302 	lsl.w	r3, r1, r2
   d6778:	ea40 0003 	orr.w	r0, r0, r3
   d677c:	fa21 f304 	lsr.w	r3, r1, r4
   d6780:	ea45 0103 	orr.w	r1, r5, r3
   d6784:	bd30      	pop	{r4, r5, pc}
   d6786:	f1c4 040c 	rsb	r4, r4, #12
   d678a:	f1c4 0220 	rsb	r2, r4, #32
   d678e:	fa20 f002 	lsr.w	r0, r0, r2
   d6792:	fa01 f304 	lsl.w	r3, r1, r4
   d6796:	ea40 0003 	orr.w	r0, r0, r3
   d679a:	4629      	mov	r1, r5
   d679c:	bd30      	pop	{r4, r5, pc}
   d679e:	fa21 f004 	lsr.w	r0, r1, r4
   d67a2:	4629      	mov	r1, r5
   d67a4:	bd30      	pop	{r4, r5, pc}
   d67a6:	f094 0f00 	teq	r4, #0
   d67aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d67ae:	bf06      	itte	eq
   d67b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d67b4:	3401      	addeq	r4, #1
   d67b6:	3d01      	subne	r5, #1
   d67b8:	e74e      	b.n	d6658 <__adddf3+0x8c>
   d67ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67be:	bf18      	it	ne
   d67c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d67c4:	d029      	beq.n	d681a <__adddf3+0x24e>
   d67c6:	ea94 0f05 	teq	r4, r5
   d67ca:	bf08      	it	eq
   d67cc:	ea90 0f02 	teqeq	r0, r2
   d67d0:	d005      	beq.n	d67de <__adddf3+0x212>
   d67d2:	ea54 0c00 	orrs.w	ip, r4, r0
   d67d6:	bf04      	itt	eq
   d67d8:	4619      	moveq	r1, r3
   d67da:	4610      	moveq	r0, r2
   d67dc:	bd30      	pop	{r4, r5, pc}
   d67de:	ea91 0f03 	teq	r1, r3
   d67e2:	bf1e      	ittt	ne
   d67e4:	2100      	movne	r1, #0
   d67e6:	2000      	movne	r0, #0
   d67e8:	bd30      	popne	{r4, r5, pc}
   d67ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d67ee:	d105      	bne.n	d67fc <__adddf3+0x230>
   d67f0:	0040      	lsls	r0, r0, #1
   d67f2:	4149      	adcs	r1, r1
   d67f4:	bf28      	it	cs
   d67f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d67fa:	bd30      	pop	{r4, r5, pc}
   d67fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6800:	bf3c      	itt	cc
   d6802:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6806:	bd30      	popcc	{r4, r5, pc}
   d6808:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d680c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6810:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6814:	f04f 0000 	mov.w	r0, #0
   d6818:	bd30      	pop	{r4, r5, pc}
   d681a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d681e:	bf1a      	itte	ne
   d6820:	4619      	movne	r1, r3
   d6822:	4610      	movne	r0, r2
   d6824:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6828:	bf1c      	itt	ne
   d682a:	460b      	movne	r3, r1
   d682c:	4602      	movne	r2, r0
   d682e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6832:	bf06      	itte	eq
   d6834:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6838:	ea91 0f03 	teqeq	r1, r3
   d683c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6840:	bd30      	pop	{r4, r5, pc}
   d6842:	bf00      	nop

000d6844 <__aeabi_ui2d>:
   d6844:	f090 0f00 	teq	r0, #0
   d6848:	bf04      	itt	eq
   d684a:	2100      	moveq	r1, #0
   d684c:	4770      	bxeq	lr
   d684e:	b530      	push	{r4, r5, lr}
   d6850:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6854:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6858:	f04f 0500 	mov.w	r5, #0
   d685c:	f04f 0100 	mov.w	r1, #0
   d6860:	e750      	b.n	d6704 <__adddf3+0x138>
   d6862:	bf00      	nop

000d6864 <__aeabi_i2d>:
   d6864:	f090 0f00 	teq	r0, #0
   d6868:	bf04      	itt	eq
   d686a:	2100      	moveq	r1, #0
   d686c:	4770      	bxeq	lr
   d686e:	b530      	push	{r4, r5, lr}
   d6870:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6874:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6878:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d687c:	bf48      	it	mi
   d687e:	4240      	negmi	r0, r0
   d6880:	f04f 0100 	mov.w	r1, #0
   d6884:	e73e      	b.n	d6704 <__adddf3+0x138>
   d6886:	bf00      	nop

000d6888 <__aeabi_f2d>:
   d6888:	0042      	lsls	r2, r0, #1
   d688a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d688e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6892:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6896:	bf1f      	itttt	ne
   d6898:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d689c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d68a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d68a4:	4770      	bxne	lr
   d68a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d68aa:	bf08      	it	eq
   d68ac:	4770      	bxeq	lr
   d68ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d68b2:	bf04      	itt	eq
   d68b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d68b8:	4770      	bxeq	lr
   d68ba:	b530      	push	{r4, r5, lr}
   d68bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d68c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d68c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d68c8:	e71c      	b.n	d6704 <__adddf3+0x138>
   d68ca:	bf00      	nop

000d68cc <__aeabi_ul2d>:
   d68cc:	ea50 0201 	orrs.w	r2, r0, r1
   d68d0:	bf08      	it	eq
   d68d2:	4770      	bxeq	lr
   d68d4:	b530      	push	{r4, r5, lr}
   d68d6:	f04f 0500 	mov.w	r5, #0
   d68da:	e00a      	b.n	d68f2 <__aeabi_l2d+0x16>

000d68dc <__aeabi_l2d>:
   d68dc:	ea50 0201 	orrs.w	r2, r0, r1
   d68e0:	bf08      	it	eq
   d68e2:	4770      	bxeq	lr
   d68e4:	b530      	push	{r4, r5, lr}
   d68e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d68ea:	d502      	bpl.n	d68f2 <__aeabi_l2d+0x16>
   d68ec:	4240      	negs	r0, r0
   d68ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d68f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d68f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d68fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d68fe:	f43f aed8 	beq.w	d66b2 <__adddf3+0xe6>
   d6902:	f04f 0203 	mov.w	r2, #3
   d6906:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d690a:	bf18      	it	ne
   d690c:	3203      	addne	r2, #3
   d690e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6912:	bf18      	it	ne
   d6914:	3203      	addne	r2, #3
   d6916:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d691a:	f1c2 0320 	rsb	r3, r2, #32
   d691e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6922:	fa20 f002 	lsr.w	r0, r0, r2
   d6926:	fa01 fe03 	lsl.w	lr, r1, r3
   d692a:	ea40 000e 	orr.w	r0, r0, lr
   d692e:	fa21 f102 	lsr.w	r1, r1, r2
   d6932:	4414      	add	r4, r2
   d6934:	e6bd      	b.n	d66b2 <__adddf3+0xe6>
   d6936:	bf00      	nop

000d6938 <__aeabi_dmul>:
   d6938:	b570      	push	{r4, r5, r6, lr}
   d693a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d693e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6942:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6946:	bf1d      	ittte	ne
   d6948:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d694c:	ea94 0f0c 	teqne	r4, ip
   d6950:	ea95 0f0c 	teqne	r5, ip
   d6954:	f000 f8de 	bleq	d6b14 <__aeabi_dmul+0x1dc>
   d6958:	442c      	add	r4, r5
   d695a:	ea81 0603 	eor.w	r6, r1, r3
   d695e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6962:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6966:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d696a:	bf18      	it	ne
   d696c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6978:	d038      	beq.n	d69ec <__aeabi_dmul+0xb4>
   d697a:	fba0 ce02 	umull	ip, lr, r0, r2
   d697e:	f04f 0500 	mov.w	r5, #0
   d6982:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6986:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d698a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d698e:	f04f 0600 	mov.w	r6, #0
   d6992:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6996:	f09c 0f00 	teq	ip, #0
   d699a:	bf18      	it	ne
   d699c:	f04e 0e01 	orrne.w	lr, lr, #1
   d69a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d69a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d69a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d69ac:	d204      	bcs.n	d69b8 <__aeabi_dmul+0x80>
   d69ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d69b2:	416d      	adcs	r5, r5
   d69b4:	eb46 0606 	adc.w	r6, r6, r6
   d69b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d69bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d69c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d69c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d69c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d69cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d69d0:	bf88      	it	hi
   d69d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d69d6:	d81e      	bhi.n	d6a16 <__aeabi_dmul+0xde>
   d69d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d69dc:	bf08      	it	eq
   d69de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d69e2:	f150 0000 	adcs.w	r0, r0, #0
   d69e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d69ea:	bd70      	pop	{r4, r5, r6, pc}
   d69ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d69f0:	ea46 0101 	orr.w	r1, r6, r1
   d69f4:	ea40 0002 	orr.w	r0, r0, r2
   d69f8:	ea81 0103 	eor.w	r1, r1, r3
   d69fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6a00:	bfc2      	ittt	gt
   d6a02:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a0a:	bd70      	popgt	{r4, r5, r6, pc}
   d6a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a10:	f04f 0e00 	mov.w	lr, #0
   d6a14:	3c01      	subs	r4, #1
   d6a16:	f300 80ab 	bgt.w	d6b70 <__aeabi_dmul+0x238>
   d6a1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6a1e:	bfde      	ittt	le
   d6a20:	2000      	movle	r0, #0
   d6a22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6a26:	bd70      	pople	{r4, r5, r6, pc}
   d6a28:	f1c4 0400 	rsb	r4, r4, #0
   d6a2c:	3c20      	subs	r4, #32
   d6a2e:	da35      	bge.n	d6a9c <__aeabi_dmul+0x164>
   d6a30:	340c      	adds	r4, #12
   d6a32:	dc1b      	bgt.n	d6a6c <__aeabi_dmul+0x134>
   d6a34:	f104 0414 	add.w	r4, r4, #20
   d6a38:	f1c4 0520 	rsb	r5, r4, #32
   d6a3c:	fa00 f305 	lsl.w	r3, r0, r5
   d6a40:	fa20 f004 	lsr.w	r0, r0, r4
   d6a44:	fa01 f205 	lsl.w	r2, r1, r5
   d6a48:	ea40 0002 	orr.w	r0, r0, r2
   d6a4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6a50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a58:	fa21 f604 	lsr.w	r6, r1, r4
   d6a5c:	eb42 0106 	adc.w	r1, r2, r6
   d6a60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a64:	bf08      	it	eq
   d6a66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a6a:	bd70      	pop	{r4, r5, r6, pc}
   d6a6c:	f1c4 040c 	rsb	r4, r4, #12
   d6a70:	f1c4 0520 	rsb	r5, r4, #32
   d6a74:	fa00 f304 	lsl.w	r3, r0, r4
   d6a78:	fa20 f005 	lsr.w	r0, r0, r5
   d6a7c:	fa01 f204 	lsl.w	r2, r1, r4
   d6a80:	ea40 0002 	orr.w	r0, r0, r2
   d6a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a8c:	f141 0100 	adc.w	r1, r1, #0
   d6a90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a94:	bf08      	it	eq
   d6a96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a9a:	bd70      	pop	{r4, r5, r6, pc}
   d6a9c:	f1c4 0520 	rsb	r5, r4, #32
   d6aa0:	fa00 f205 	lsl.w	r2, r0, r5
   d6aa4:	ea4e 0e02 	orr.w	lr, lr, r2
   d6aa8:	fa20 f304 	lsr.w	r3, r0, r4
   d6aac:	fa01 f205 	lsl.w	r2, r1, r5
   d6ab0:	ea43 0302 	orr.w	r3, r3, r2
   d6ab4:	fa21 f004 	lsr.w	r0, r1, r4
   d6ab8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6abc:	fa21 f204 	lsr.w	r2, r1, r4
   d6ac0:	ea20 0002 	bic.w	r0, r0, r2
   d6ac4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6ac8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6acc:	bf08      	it	eq
   d6ace:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6ad2:	bd70      	pop	{r4, r5, r6, pc}
   d6ad4:	f094 0f00 	teq	r4, #0
   d6ad8:	d10f      	bne.n	d6afa <__aeabi_dmul+0x1c2>
   d6ada:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6ade:	0040      	lsls	r0, r0, #1
   d6ae0:	eb41 0101 	adc.w	r1, r1, r1
   d6ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ae8:	bf08      	it	eq
   d6aea:	3c01      	subeq	r4, #1
   d6aec:	d0f7      	beq.n	d6ade <__aeabi_dmul+0x1a6>
   d6aee:	ea41 0106 	orr.w	r1, r1, r6
   d6af2:	f095 0f00 	teq	r5, #0
   d6af6:	bf18      	it	ne
   d6af8:	4770      	bxne	lr
   d6afa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6afe:	0052      	lsls	r2, r2, #1
   d6b00:	eb43 0303 	adc.w	r3, r3, r3
   d6b04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6b08:	bf08      	it	eq
   d6b0a:	3d01      	subeq	r5, #1
   d6b0c:	d0f7      	beq.n	d6afe <__aeabi_dmul+0x1c6>
   d6b0e:	ea43 0306 	orr.w	r3, r3, r6
   d6b12:	4770      	bx	lr
   d6b14:	ea94 0f0c 	teq	r4, ip
   d6b18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6b1c:	bf18      	it	ne
   d6b1e:	ea95 0f0c 	teqne	r5, ip
   d6b22:	d00c      	beq.n	d6b3e <__aeabi_dmul+0x206>
   d6b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b28:	bf18      	it	ne
   d6b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b2e:	d1d1      	bne.n	d6ad4 <__aeabi_dmul+0x19c>
   d6b30:	ea81 0103 	eor.w	r1, r1, r3
   d6b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b38:	f04f 0000 	mov.w	r0, #0
   d6b3c:	bd70      	pop	{r4, r5, r6, pc}
   d6b3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b42:	bf06      	itte	eq
   d6b44:	4610      	moveq	r0, r2
   d6b46:	4619      	moveq	r1, r3
   d6b48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b4c:	d019      	beq.n	d6b82 <__aeabi_dmul+0x24a>
   d6b4e:	ea94 0f0c 	teq	r4, ip
   d6b52:	d102      	bne.n	d6b5a <__aeabi_dmul+0x222>
   d6b54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6b58:	d113      	bne.n	d6b82 <__aeabi_dmul+0x24a>
   d6b5a:	ea95 0f0c 	teq	r5, ip
   d6b5e:	d105      	bne.n	d6b6c <__aeabi_dmul+0x234>
   d6b60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6b64:	bf1c      	itt	ne
   d6b66:	4610      	movne	r0, r2
   d6b68:	4619      	movne	r1, r3
   d6b6a:	d10a      	bne.n	d6b82 <__aeabi_dmul+0x24a>
   d6b6c:	ea81 0103 	eor.w	r1, r1, r3
   d6b70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b7c:	f04f 0000 	mov.w	r0, #0
   d6b80:	bd70      	pop	{r4, r5, r6, pc}
   d6b82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6b8a:	bd70      	pop	{r4, r5, r6, pc}

000d6b8c <__aeabi_ddiv>:
   d6b8c:	b570      	push	{r4, r5, r6, lr}
   d6b8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b9a:	bf1d      	ittte	ne
   d6b9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ba0:	ea94 0f0c 	teqne	r4, ip
   d6ba4:	ea95 0f0c 	teqne	r5, ip
   d6ba8:	f000 f8a7 	bleq	d6cfa <__aeabi_ddiv+0x16e>
   d6bac:	eba4 0405 	sub.w	r4, r4, r5
   d6bb0:	ea81 0e03 	eor.w	lr, r1, r3
   d6bb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6bb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6bbc:	f000 8088 	beq.w	d6cd0 <__aeabi_ddiv+0x144>
   d6bc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6bc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6bc8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6bcc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6bd0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6bd4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6bd8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6bdc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6be0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6be4:	429d      	cmp	r5, r3
   d6be6:	bf08      	it	eq
   d6be8:	4296      	cmpeq	r6, r2
   d6bea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6bee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6bf2:	d202      	bcs.n	d6bfa <__aeabi_ddiv+0x6e>
   d6bf4:	085b      	lsrs	r3, r3, #1
   d6bf6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bfa:	1ab6      	subs	r6, r6, r2
   d6bfc:	eb65 0503 	sbc.w	r5, r5, r3
   d6c00:	085b      	lsrs	r3, r3, #1
   d6c02:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6c0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6c0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c16:	bf22      	ittt	cs
   d6c18:	1ab6      	subcs	r6, r6, r2
   d6c1a:	4675      	movcs	r5, lr
   d6c1c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6c20:	085b      	lsrs	r3, r3, #1
   d6c22:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c26:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c2e:	bf22      	ittt	cs
   d6c30:	1ab6      	subcs	r6, r6, r2
   d6c32:	4675      	movcs	r5, lr
   d6c34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6c38:	085b      	lsrs	r3, r3, #1
   d6c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c46:	bf22      	ittt	cs
   d6c48:	1ab6      	subcs	r6, r6, r2
   d6c4a:	4675      	movcs	r5, lr
   d6c4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6c50:	085b      	lsrs	r3, r3, #1
   d6c52:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c56:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c5e:	bf22      	ittt	cs
   d6c60:	1ab6      	subcs	r6, r6, r2
   d6c62:	4675      	movcs	r5, lr
   d6c64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6c68:	ea55 0e06 	orrs.w	lr, r5, r6
   d6c6c:	d018      	beq.n	d6ca0 <__aeabi_ddiv+0x114>
   d6c6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6c72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6c76:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6c7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6c7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6c82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6c86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6c8a:	d1c0      	bne.n	d6c0e <__aeabi_ddiv+0x82>
   d6c8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c90:	d10b      	bne.n	d6caa <__aeabi_ddiv+0x11e>
   d6c92:	ea41 0100 	orr.w	r1, r1, r0
   d6c96:	f04f 0000 	mov.w	r0, #0
   d6c9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6c9e:	e7b6      	b.n	d6c0e <__aeabi_ddiv+0x82>
   d6ca0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ca4:	bf04      	itt	eq
   d6ca6:	4301      	orreq	r1, r0
   d6ca8:	2000      	moveq	r0, #0
   d6caa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6cae:	bf88      	it	hi
   d6cb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6cb4:	f63f aeaf 	bhi.w	d6a16 <__aeabi_dmul+0xde>
   d6cb8:	ebb5 0c03 	subs.w	ip, r5, r3
   d6cbc:	bf04      	itt	eq
   d6cbe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6cc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6cc6:	f150 0000 	adcs.w	r0, r0, #0
   d6cca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6cce:	bd70      	pop	{r4, r5, r6, pc}
   d6cd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6cd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6cd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6cdc:	bfc2      	ittt	gt
   d6cde:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6ce2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ce6:	bd70      	popgt	{r4, r5, r6, pc}
   d6ce8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6cec:	f04f 0e00 	mov.w	lr, #0
   d6cf0:	3c01      	subs	r4, #1
   d6cf2:	e690      	b.n	d6a16 <__aeabi_dmul+0xde>
   d6cf4:	ea45 0e06 	orr.w	lr, r5, r6
   d6cf8:	e68d      	b.n	d6a16 <__aeabi_dmul+0xde>
   d6cfa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6cfe:	ea94 0f0c 	teq	r4, ip
   d6d02:	bf08      	it	eq
   d6d04:	ea95 0f0c 	teqeq	r5, ip
   d6d08:	f43f af3b 	beq.w	d6b82 <__aeabi_dmul+0x24a>
   d6d0c:	ea94 0f0c 	teq	r4, ip
   d6d10:	d10a      	bne.n	d6d28 <__aeabi_ddiv+0x19c>
   d6d12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6d16:	f47f af34 	bne.w	d6b82 <__aeabi_dmul+0x24a>
   d6d1a:	ea95 0f0c 	teq	r5, ip
   d6d1e:	f47f af25 	bne.w	d6b6c <__aeabi_dmul+0x234>
   d6d22:	4610      	mov	r0, r2
   d6d24:	4619      	mov	r1, r3
   d6d26:	e72c      	b.n	d6b82 <__aeabi_dmul+0x24a>
   d6d28:	ea95 0f0c 	teq	r5, ip
   d6d2c:	d106      	bne.n	d6d3c <__aeabi_ddiv+0x1b0>
   d6d2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6d32:	f43f aefd 	beq.w	d6b30 <__aeabi_dmul+0x1f8>
   d6d36:	4610      	mov	r0, r2
   d6d38:	4619      	mov	r1, r3
   d6d3a:	e722      	b.n	d6b82 <__aeabi_dmul+0x24a>
   d6d3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d40:	bf18      	it	ne
   d6d42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d46:	f47f aec5 	bne.w	d6ad4 <__aeabi_dmul+0x19c>
   d6d4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6d4e:	f47f af0d 	bne.w	d6b6c <__aeabi_dmul+0x234>
   d6d52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6d56:	f47f aeeb 	bne.w	d6b30 <__aeabi_dmul+0x1f8>
   d6d5a:	e712      	b.n	d6b82 <__aeabi_dmul+0x24a>

000d6d5c <__gedf2>:
   d6d5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6d60:	e006      	b.n	d6d70 <__cmpdf2+0x4>
   d6d62:	bf00      	nop

000d6d64 <__ledf2>:
   d6d64:	f04f 0c01 	mov.w	ip, #1
   d6d68:	e002      	b.n	d6d70 <__cmpdf2+0x4>
   d6d6a:	bf00      	nop

000d6d6c <__cmpdf2>:
   d6d6c:	f04f 0c01 	mov.w	ip, #1
   d6d70:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6d74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d80:	bf18      	it	ne
   d6d82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6d86:	d01b      	beq.n	d6dc0 <__cmpdf2+0x54>
   d6d88:	b001      	add	sp, #4
   d6d8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6d8e:	bf0c      	ite	eq
   d6d90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6d94:	ea91 0f03 	teqne	r1, r3
   d6d98:	bf02      	ittt	eq
   d6d9a:	ea90 0f02 	teqeq	r0, r2
   d6d9e:	2000      	moveq	r0, #0
   d6da0:	4770      	bxeq	lr
   d6da2:	f110 0f00 	cmn.w	r0, #0
   d6da6:	ea91 0f03 	teq	r1, r3
   d6daa:	bf58      	it	pl
   d6dac:	4299      	cmppl	r1, r3
   d6dae:	bf08      	it	eq
   d6db0:	4290      	cmpeq	r0, r2
   d6db2:	bf2c      	ite	cs
   d6db4:	17d8      	asrcs	r0, r3, #31
   d6db6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6dba:	f040 0001 	orr.w	r0, r0, #1
   d6dbe:	4770      	bx	lr
   d6dc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6dc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6dc8:	d102      	bne.n	d6dd0 <__cmpdf2+0x64>
   d6dca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6dce:	d107      	bne.n	d6de0 <__cmpdf2+0x74>
   d6dd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6dd8:	d1d6      	bne.n	d6d88 <__cmpdf2+0x1c>
   d6dda:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6dde:	d0d3      	beq.n	d6d88 <__cmpdf2+0x1c>
   d6de0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6de4:	4770      	bx	lr
   d6de6:	bf00      	nop

000d6de8 <__aeabi_cdrcmple>:
   d6de8:	4684      	mov	ip, r0
   d6dea:	4610      	mov	r0, r2
   d6dec:	4662      	mov	r2, ip
   d6dee:	468c      	mov	ip, r1
   d6df0:	4619      	mov	r1, r3
   d6df2:	4663      	mov	r3, ip
   d6df4:	e000      	b.n	d6df8 <__aeabi_cdcmpeq>
   d6df6:	bf00      	nop

000d6df8 <__aeabi_cdcmpeq>:
   d6df8:	b501      	push	{r0, lr}
   d6dfa:	f7ff ffb7 	bl	d6d6c <__cmpdf2>
   d6dfe:	2800      	cmp	r0, #0
   d6e00:	bf48      	it	mi
   d6e02:	f110 0f00 	cmnmi.w	r0, #0
   d6e06:	bd01      	pop	{r0, pc}

000d6e08 <__aeabi_dcmpeq>:
   d6e08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e0c:	f7ff fff4 	bl	d6df8 <__aeabi_cdcmpeq>
   d6e10:	bf0c      	ite	eq
   d6e12:	2001      	moveq	r0, #1
   d6e14:	2000      	movne	r0, #0
   d6e16:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e1a:	bf00      	nop

000d6e1c <__aeabi_dcmplt>:
   d6e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e20:	f7ff ffea 	bl	d6df8 <__aeabi_cdcmpeq>
   d6e24:	bf34      	ite	cc
   d6e26:	2001      	movcc	r0, #1
   d6e28:	2000      	movcs	r0, #0
   d6e2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e2e:	bf00      	nop

000d6e30 <__aeabi_dcmple>:
   d6e30:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e34:	f7ff ffe0 	bl	d6df8 <__aeabi_cdcmpeq>
   d6e38:	bf94      	ite	ls
   d6e3a:	2001      	movls	r0, #1
   d6e3c:	2000      	movhi	r0, #0
   d6e3e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e42:	bf00      	nop

000d6e44 <__aeabi_dcmpge>:
   d6e44:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e48:	f7ff ffce 	bl	d6de8 <__aeabi_cdrcmple>
   d6e4c:	bf94      	ite	ls
   d6e4e:	2001      	movls	r0, #1
   d6e50:	2000      	movhi	r0, #0
   d6e52:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e56:	bf00      	nop

000d6e58 <__aeabi_dcmpgt>:
   d6e58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e5c:	f7ff ffc4 	bl	d6de8 <__aeabi_cdrcmple>
   d6e60:	bf34      	ite	cc
   d6e62:	2001      	movcc	r0, #1
   d6e64:	2000      	movcs	r0, #0
   d6e66:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e6a:	bf00      	nop

000d6e6c <__aeabi_d2uiz>:
   d6e6c:	004a      	lsls	r2, r1, #1
   d6e6e:	d211      	bcs.n	d6e94 <__aeabi_d2uiz+0x28>
   d6e70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e74:	d211      	bcs.n	d6e9a <__aeabi_d2uiz+0x2e>
   d6e76:	d50d      	bpl.n	d6e94 <__aeabi_d2uiz+0x28>
   d6e78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e80:	d40e      	bmi.n	d6ea0 <__aeabi_d2uiz+0x34>
   d6e82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e8e:	fa23 f002 	lsr.w	r0, r3, r2
   d6e92:	4770      	bx	lr
   d6e94:	f04f 0000 	mov.w	r0, #0
   d6e98:	4770      	bx	lr
   d6e9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e9e:	d102      	bne.n	d6ea6 <__aeabi_d2uiz+0x3a>
   d6ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6ea4:	4770      	bx	lr
   d6ea6:	f04f 0000 	mov.w	r0, #0
   d6eaa:	4770      	bx	lr

000d6eac <__aeabi_d2f>:
   d6eac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6eb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6eb4:	bf24      	itt	cs
   d6eb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6eba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6ebe:	d90d      	bls.n	d6edc <__aeabi_d2f+0x30>
   d6ec0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6ec4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6ec8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6ecc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6ed0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6ed4:	bf08      	it	eq
   d6ed6:	f020 0001 	biceq.w	r0, r0, #1
   d6eda:	4770      	bx	lr
   d6edc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6ee0:	d121      	bne.n	d6f26 <__aeabi_d2f+0x7a>
   d6ee2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6ee6:	bfbc      	itt	lt
   d6ee8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6eec:	4770      	bxlt	lr
   d6eee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ef2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6ef6:	f1c2 0218 	rsb	r2, r2, #24
   d6efa:	f1c2 0c20 	rsb	ip, r2, #32
   d6efe:	fa10 f30c 	lsls.w	r3, r0, ip
   d6f02:	fa20 f002 	lsr.w	r0, r0, r2
   d6f06:	bf18      	it	ne
   d6f08:	f040 0001 	orrne.w	r0, r0, #1
   d6f0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6f14:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6f18:	ea40 000c 	orr.w	r0, r0, ip
   d6f1c:	fa23 f302 	lsr.w	r3, r3, r2
   d6f20:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6f24:	e7cc      	b.n	d6ec0 <__aeabi_d2f+0x14>
   d6f26:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6f2a:	d107      	bne.n	d6f3c <__aeabi_d2f+0x90>
   d6f2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6f30:	bf1e      	ittt	ne
   d6f32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6f36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6f3a:	4770      	bxne	lr
   d6f3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6f40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6f44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6f48:	4770      	bx	lr
   d6f4a:	bf00      	nop

000d6f4c <__aeabi_d2ulz>:
   d6f4c:	b5d0      	push	{r4, r6, r7, lr}
   d6f4e:	4b0c      	ldr	r3, [pc, #48]	; (d6f80 <__aeabi_d2ulz+0x34>)
   d6f50:	2200      	movs	r2, #0
   d6f52:	4606      	mov	r6, r0
   d6f54:	460f      	mov	r7, r1
   d6f56:	f7ff fcef 	bl	d6938 <__aeabi_dmul>
   d6f5a:	f7ff ff87 	bl	d6e6c <__aeabi_d2uiz>
   d6f5e:	4604      	mov	r4, r0
   d6f60:	f7ff fc70 	bl	d6844 <__aeabi_ui2d>
   d6f64:	4b07      	ldr	r3, [pc, #28]	; (d6f84 <__aeabi_d2ulz+0x38>)
   d6f66:	2200      	movs	r2, #0
   d6f68:	f7ff fce6 	bl	d6938 <__aeabi_dmul>
   d6f6c:	4602      	mov	r2, r0
   d6f6e:	460b      	mov	r3, r1
   d6f70:	4630      	mov	r0, r6
   d6f72:	4639      	mov	r1, r7
   d6f74:	f7ff fb28 	bl	d65c8 <__aeabi_dsub>
   d6f78:	f7ff ff78 	bl	d6e6c <__aeabi_d2uiz>
   d6f7c:	4621      	mov	r1, r4
   d6f7e:	bdd0      	pop	{r4, r6, r7, pc}
   d6f80:	3df00000 	.word	0x3df00000
   d6f84:	41f00000 	.word	0x41f00000

000d6f88 <atexit>:
   d6f88:	2300      	movs	r3, #0
   d6f8a:	4601      	mov	r1, r0
   d6f8c:	461a      	mov	r2, r3
   d6f8e:	4618      	mov	r0, r3
   d6f90:	f000 bee8 	b.w	d7d64 <__register_exitproc>

000d6f94 <atof>:
   d6f94:	2100      	movs	r1, #0
   d6f96:	f000 bead 	b.w	d7cf4 <strtod>

000d6f9a <memcpy>:
   d6f9a:	440a      	add	r2, r1
   d6f9c:	4291      	cmp	r1, r2
   d6f9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6fa2:	d100      	bne.n	d6fa6 <memcpy+0xc>
   d6fa4:	4770      	bx	lr
   d6fa6:	b510      	push	{r4, lr}
   d6fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6fac:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6fb0:	4291      	cmp	r1, r2
   d6fb2:	d1f9      	bne.n	d6fa8 <memcpy+0xe>
   d6fb4:	bd10      	pop	{r4, pc}

000d6fb6 <memset>:
   d6fb6:	4402      	add	r2, r0
   d6fb8:	4603      	mov	r3, r0
   d6fba:	4293      	cmp	r3, r2
   d6fbc:	d100      	bne.n	d6fc0 <memset+0xa>
   d6fbe:	4770      	bx	lr
   d6fc0:	f803 1b01 	strb.w	r1, [r3], #1
   d6fc4:	e7f9      	b.n	d6fba <memset+0x4>
	...

000d6fc8 <srand>:
   d6fc8:	b538      	push	{r3, r4, r5, lr}
   d6fca:	4b0d      	ldr	r3, [pc, #52]	; (d7000 <srand+0x38>)
   d6fcc:	681d      	ldr	r5, [r3, #0]
   d6fce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	b97b      	cbnz	r3, d6ff4 <srand+0x2c>
   d6fd4:	2018      	movs	r0, #24
   d6fd6:	f7fe f9d1 	bl	d537c <malloc>
   d6fda:	4a0a      	ldr	r2, [pc, #40]	; (d7004 <srand+0x3c>)
   d6fdc:	4b0a      	ldr	r3, [pc, #40]	; (d7008 <srand+0x40>)
   d6fde:	63a8      	str	r0, [r5, #56]	; 0x38
   d6fe0:	e9c0 2300 	strd	r2, r3, [r0]
   d6fe4:	4b09      	ldr	r3, [pc, #36]	; (d700c <srand+0x44>)
   d6fe6:	6083      	str	r3, [r0, #8]
   d6fe8:	230b      	movs	r3, #11
   d6fea:	8183      	strh	r3, [r0, #12]
   d6fec:	2201      	movs	r2, #1
   d6fee:	2300      	movs	r3, #0
   d6ff0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6ff4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6ff6:	2200      	movs	r2, #0
   d6ff8:	611c      	str	r4, [r3, #16]
   d6ffa:	615a      	str	r2, [r3, #20]
   d6ffc:	bd38      	pop	{r3, r4, r5, pc}
   d6ffe:	bf00      	nop
   d7000:	2003e250 	.word	0x2003e250
   d7004:	abcd330e 	.word	0xabcd330e
   d7008:	e66d1234 	.word	0xe66d1234
   d700c:	0005deec 	.word	0x0005deec

000d7010 <strcmp>:
   d7010:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7014:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7018:	2a01      	cmp	r2, #1
   d701a:	bf28      	it	cs
   d701c:	429a      	cmpcs	r2, r3
   d701e:	d0f7      	beq.n	d7010 <strcmp>
   d7020:	1ad0      	subs	r0, r2, r3
   d7022:	4770      	bx	lr

000d7024 <strcpy>:
   d7024:	4603      	mov	r3, r0
   d7026:	f811 2b01 	ldrb.w	r2, [r1], #1
   d702a:	f803 2b01 	strb.w	r2, [r3], #1
   d702e:	2a00      	cmp	r2, #0
   d7030:	d1f9      	bne.n	d7026 <strcpy+0x2>
   d7032:	4770      	bx	lr

000d7034 <strdup>:
   d7034:	4b02      	ldr	r3, [pc, #8]	; (d7040 <strdup+0xc>)
   d7036:	4601      	mov	r1, r0
   d7038:	6818      	ldr	r0, [r3, #0]
   d703a:	f000 b803 	b.w	d7044 <_strdup_r>
   d703e:	bf00      	nop
   d7040:	2003e250 	.word	0x2003e250

000d7044 <_strdup_r>:
   d7044:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7046:	4604      	mov	r4, r0
   d7048:	4608      	mov	r0, r1
   d704a:	460d      	mov	r5, r1
   d704c:	f000 f80f 	bl	d706e <strlen>
   d7050:	1c42      	adds	r2, r0, #1
   d7052:	4611      	mov	r1, r2
   d7054:	4620      	mov	r0, r4
   d7056:	9201      	str	r2, [sp, #4]
   d7058:	f7fe f9c0 	bl	d53dc <_malloc_r>
   d705c:	4604      	mov	r4, r0
   d705e:	b118      	cbz	r0, d7068 <_strdup_r+0x24>
   d7060:	9a01      	ldr	r2, [sp, #4]
   d7062:	4629      	mov	r1, r5
   d7064:	f7ff ff99 	bl	d6f9a <memcpy>
   d7068:	4620      	mov	r0, r4
   d706a:	b003      	add	sp, #12
   d706c:	bd30      	pop	{r4, r5, pc}

000d706e <strlen>:
   d706e:	4603      	mov	r3, r0
   d7070:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7074:	2a00      	cmp	r2, #0
   d7076:	d1fb      	bne.n	d7070 <strlen+0x2>
   d7078:	1a18      	subs	r0, r3, r0
   d707a:	3801      	subs	r0, #1
   d707c:	4770      	bx	lr

000d707e <strncmp>:
   d707e:	b510      	push	{r4, lr}
   d7080:	b16a      	cbz	r2, d709e <strncmp+0x20>
   d7082:	3901      	subs	r1, #1
   d7084:	1884      	adds	r4, r0, r2
   d7086:	f810 3b01 	ldrb.w	r3, [r0], #1
   d708a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d708e:	4293      	cmp	r3, r2
   d7090:	d103      	bne.n	d709a <strncmp+0x1c>
   d7092:	42a0      	cmp	r0, r4
   d7094:	d001      	beq.n	d709a <strncmp+0x1c>
   d7096:	2b00      	cmp	r3, #0
   d7098:	d1f5      	bne.n	d7086 <strncmp+0x8>
   d709a:	1a98      	subs	r0, r3, r2
   d709c:	bd10      	pop	{r4, pc}
   d709e:	4610      	mov	r0, r2
   d70a0:	e7fc      	b.n	d709c <strncmp+0x1e>

000d70a2 <sulp>:
   d70a2:	b570      	push	{r4, r5, r6, lr}
   d70a4:	4604      	mov	r4, r0
   d70a6:	460d      	mov	r5, r1
   d70a8:	ec45 4b10 	vmov	d0, r4, r5
   d70ac:	4616      	mov	r6, r2
   d70ae:	f001 fd2b 	bl	d8b08 <__ulp>
   d70b2:	ec51 0b10 	vmov	r0, r1, d0
   d70b6:	b17e      	cbz	r6, d70d8 <sulp+0x36>
   d70b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d70bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d70c0:	2b00      	cmp	r3, #0
   d70c2:	dd09      	ble.n	d70d8 <sulp+0x36>
   d70c4:	051b      	lsls	r3, r3, #20
   d70c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d70ca:	2400      	movs	r4, #0
   d70cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d70d0:	4622      	mov	r2, r4
   d70d2:	462b      	mov	r3, r5
   d70d4:	f7ff fc30 	bl	d6938 <__aeabi_dmul>
   d70d8:	bd70      	pop	{r4, r5, r6, pc}
   d70da:	0000      	movs	r0, r0
   d70dc:	0000      	movs	r0, r0
	...

000d70e0 <_strtod_l>:
   d70e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d70e4:	b0a3      	sub	sp, #140	; 0x8c
   d70e6:	461f      	mov	r7, r3
   d70e8:	2300      	movs	r3, #0
   d70ea:	931e      	str	r3, [sp, #120]	; 0x78
   d70ec:	4ba4      	ldr	r3, [pc, #656]	; (d7380 <_strtod_l+0x2a0>)
   d70ee:	9219      	str	r2, [sp, #100]	; 0x64
   d70f0:	681b      	ldr	r3, [r3, #0]
   d70f2:	9307      	str	r3, [sp, #28]
   d70f4:	4604      	mov	r4, r0
   d70f6:	4618      	mov	r0, r3
   d70f8:	4688      	mov	r8, r1
   d70fa:	f7ff ffb8 	bl	d706e <strlen>
   d70fe:	f04f 0a00 	mov.w	sl, #0
   d7102:	4605      	mov	r5, r0
   d7104:	f04f 0b00 	mov.w	fp, #0
   d7108:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d710c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d710e:	781a      	ldrb	r2, [r3, #0]
   d7110:	2a2b      	cmp	r2, #43	; 0x2b
   d7112:	d04c      	beq.n	d71ae <_strtod_l+0xce>
   d7114:	d839      	bhi.n	d718a <_strtod_l+0xaa>
   d7116:	2a0d      	cmp	r2, #13
   d7118:	d832      	bhi.n	d7180 <_strtod_l+0xa0>
   d711a:	2a08      	cmp	r2, #8
   d711c:	d832      	bhi.n	d7184 <_strtod_l+0xa4>
   d711e:	2a00      	cmp	r2, #0
   d7120:	d03c      	beq.n	d719c <_strtod_l+0xbc>
   d7122:	2300      	movs	r3, #0
   d7124:	930e      	str	r3, [sp, #56]	; 0x38
   d7126:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d7128:	7833      	ldrb	r3, [r6, #0]
   d712a:	2b30      	cmp	r3, #48	; 0x30
   d712c:	f040 80b4 	bne.w	d7298 <_strtod_l+0x1b8>
   d7130:	7873      	ldrb	r3, [r6, #1]
   d7132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d7136:	2b58      	cmp	r3, #88	; 0x58
   d7138:	d16c      	bne.n	d7214 <_strtod_l+0x134>
   d713a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	ab1e      	add	r3, sp, #120	; 0x78
   d7140:	9702      	str	r7, [sp, #8]
   d7142:	9300      	str	r3, [sp, #0]
   d7144:	4a8f      	ldr	r2, [pc, #572]	; (d7384 <_strtod_l+0x2a4>)
   d7146:	ab1f      	add	r3, sp, #124	; 0x7c
   d7148:	a91d      	add	r1, sp, #116	; 0x74
   d714a:	4620      	mov	r0, r4
   d714c:	f000 fed4 	bl	d7ef8 <__gethex>
   d7150:	f010 0707 	ands.w	r7, r0, #7
   d7154:	4605      	mov	r5, r0
   d7156:	d005      	beq.n	d7164 <_strtod_l+0x84>
   d7158:	2f06      	cmp	r7, #6
   d715a:	d12a      	bne.n	d71b2 <_strtod_l+0xd2>
   d715c:	3601      	adds	r6, #1
   d715e:	2300      	movs	r3, #0
   d7160:	961d      	str	r6, [sp, #116]	; 0x74
   d7162:	930e      	str	r3, [sp, #56]	; 0x38
   d7164:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7166:	2b00      	cmp	r3, #0
   d7168:	f040 8596 	bne.w	d7c98 <_strtod_l+0xbb8>
   d716c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d716e:	b1db      	cbz	r3, d71a8 <_strtod_l+0xc8>
   d7170:	4652      	mov	r2, sl
   d7172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7176:	ec43 2b10 	vmov	d0, r2, r3
   d717a:	b023      	add	sp, #140	; 0x8c
   d717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7180:	2a20      	cmp	r2, #32
   d7182:	d1ce      	bne.n	d7122 <_strtod_l+0x42>
   d7184:	3301      	adds	r3, #1
   d7186:	931d      	str	r3, [sp, #116]	; 0x74
   d7188:	e7c0      	b.n	d710c <_strtod_l+0x2c>
   d718a:	2a2d      	cmp	r2, #45	; 0x2d
   d718c:	d1c9      	bne.n	d7122 <_strtod_l+0x42>
   d718e:	2201      	movs	r2, #1
   d7190:	920e      	str	r2, [sp, #56]	; 0x38
   d7192:	1c5a      	adds	r2, r3, #1
   d7194:	921d      	str	r2, [sp, #116]	; 0x74
   d7196:	785b      	ldrb	r3, [r3, #1]
   d7198:	2b00      	cmp	r3, #0
   d719a:	d1c4      	bne.n	d7126 <_strtod_l+0x46>
   d719c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d719e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d71a2:	2b00      	cmp	r3, #0
   d71a4:	f040 8576 	bne.w	d7c94 <_strtod_l+0xbb4>
   d71a8:	4652      	mov	r2, sl
   d71aa:	465b      	mov	r3, fp
   d71ac:	e7e3      	b.n	d7176 <_strtod_l+0x96>
   d71ae:	2200      	movs	r2, #0
   d71b0:	e7ee      	b.n	d7190 <_strtod_l+0xb0>
   d71b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d71b4:	b13a      	cbz	r2, d71c6 <_strtod_l+0xe6>
   d71b6:	2135      	movs	r1, #53	; 0x35
   d71b8:	a820      	add	r0, sp, #128	; 0x80
   d71ba:	f001 fda4 	bl	d8d06 <__copybits>
   d71be:	991e      	ldr	r1, [sp, #120]	; 0x78
   d71c0:	4620      	mov	r0, r4
   d71c2:	f001 f9d8 	bl	d8576 <_Bfree>
   d71c6:	3f01      	subs	r7, #1
   d71c8:	2f05      	cmp	r7, #5
   d71ca:	d807      	bhi.n	d71dc <_strtod_l+0xfc>
   d71cc:	e8df f007 	tbb	[pc, r7]
   d71d0:	1d180b0e 	.word	0x1d180b0e
   d71d4:	030e      	.short	0x030e
   d71d6:	f04f 0b00 	mov.w	fp, #0
   d71da:	46da      	mov	sl, fp
   d71dc:	0728      	lsls	r0, r5, #28
   d71de:	d5c1      	bpl.n	d7164 <_strtod_l+0x84>
   d71e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d71e4:	e7be      	b.n	d7164 <_strtod_l+0x84>
   d71e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d71ea:	e7f7      	b.n	d71dc <_strtod_l+0xfc>
   d71ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d71f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d71f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d71f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d71fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d71fe:	e7ed      	b.n	d71dc <_strtod_l+0xfc>
   d7200:	f8df b184 	ldr.w	fp, [pc, #388]	; d7388 <_strtod_l+0x2a8>
   d7204:	f04f 0a00 	mov.w	sl, #0
   d7208:	e7e8      	b.n	d71dc <_strtod_l+0xfc>
   d720a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d720e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7212:	e7e3      	b.n	d71dc <_strtod_l+0xfc>
   d7214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7216:	1c5a      	adds	r2, r3, #1
   d7218:	921d      	str	r2, [sp, #116]	; 0x74
   d721a:	785b      	ldrb	r3, [r3, #1]
   d721c:	2b30      	cmp	r3, #48	; 0x30
   d721e:	d0f9      	beq.n	d7214 <_strtod_l+0x134>
   d7220:	2b00      	cmp	r3, #0
   d7222:	d09f      	beq.n	d7164 <_strtod_l+0x84>
   d7224:	2301      	movs	r3, #1
   d7226:	f04f 0900 	mov.w	r9, #0
   d722a:	9304      	str	r3, [sp, #16]
   d722c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d722e:	930a      	str	r3, [sp, #40]	; 0x28
   d7230:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d7234:	464f      	mov	r7, r9
   d7236:	220a      	movs	r2, #10
   d7238:	981d      	ldr	r0, [sp, #116]	; 0x74
   d723a:	7806      	ldrb	r6, [r0, #0]
   d723c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7240:	b2d9      	uxtb	r1, r3
   d7242:	2909      	cmp	r1, #9
   d7244:	d92a      	bls.n	d729c <_strtod_l+0x1bc>
   d7246:	9907      	ldr	r1, [sp, #28]
   d7248:	462a      	mov	r2, r5
   d724a:	f7ff ff18 	bl	d707e <strncmp>
   d724e:	b398      	cbz	r0, d72b8 <_strtod_l+0x1d8>
   d7250:	2000      	movs	r0, #0
   d7252:	4633      	mov	r3, r6
   d7254:	463d      	mov	r5, r7
   d7256:	9007      	str	r0, [sp, #28]
   d7258:	4602      	mov	r2, r0
   d725a:	2b65      	cmp	r3, #101	; 0x65
   d725c:	d001      	beq.n	d7262 <_strtod_l+0x182>
   d725e:	2b45      	cmp	r3, #69	; 0x45
   d7260:	d118      	bne.n	d7294 <_strtod_l+0x1b4>
   d7262:	b91d      	cbnz	r5, d726c <_strtod_l+0x18c>
   d7264:	9b04      	ldr	r3, [sp, #16]
   d7266:	4303      	orrs	r3, r0
   d7268:	d098      	beq.n	d719c <_strtod_l+0xbc>
   d726a:	2500      	movs	r5, #0
   d726c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d7270:	f108 0301 	add.w	r3, r8, #1
   d7274:	931d      	str	r3, [sp, #116]	; 0x74
   d7276:	f898 3001 	ldrb.w	r3, [r8, #1]
   d727a:	2b2b      	cmp	r3, #43	; 0x2b
   d727c:	d075      	beq.n	d736a <_strtod_l+0x28a>
   d727e:	2b2d      	cmp	r3, #45	; 0x2d
   d7280:	d07b      	beq.n	d737a <_strtod_l+0x29a>
   d7282:	f04f 0c00 	mov.w	ip, #0
   d7286:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d728a:	2909      	cmp	r1, #9
   d728c:	f240 8082 	bls.w	d7394 <_strtod_l+0x2b4>
   d7290:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7294:	2600      	movs	r6, #0
   d7296:	e09d      	b.n	d73d4 <_strtod_l+0x2f4>
   d7298:	2300      	movs	r3, #0
   d729a:	e7c4      	b.n	d7226 <_strtod_l+0x146>
   d729c:	2f08      	cmp	r7, #8
   d729e:	bfd8      	it	le
   d72a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d72a2:	f100 0001 	add.w	r0, r0, #1
   d72a6:	bfda      	itte	le
   d72a8:	fb02 3301 	mlale	r3, r2, r1, r3
   d72ac:	9309      	strle	r3, [sp, #36]	; 0x24
   d72ae:	fb02 3909 	mlagt	r9, r2, r9, r3
   d72b2:	3701      	adds	r7, #1
   d72b4:	901d      	str	r0, [sp, #116]	; 0x74
   d72b6:	e7bf      	b.n	d7238 <_strtod_l+0x158>
   d72b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d72ba:	195a      	adds	r2, r3, r5
   d72bc:	921d      	str	r2, [sp, #116]	; 0x74
   d72be:	5d5b      	ldrb	r3, [r3, r5]
   d72c0:	2f00      	cmp	r7, #0
   d72c2:	d037      	beq.n	d7334 <_strtod_l+0x254>
   d72c4:	9007      	str	r0, [sp, #28]
   d72c6:	463d      	mov	r5, r7
   d72c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d72cc:	2a09      	cmp	r2, #9
   d72ce:	d912      	bls.n	d72f6 <_strtod_l+0x216>
   d72d0:	2201      	movs	r2, #1
   d72d2:	e7c2      	b.n	d725a <_strtod_l+0x17a>
   d72d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d72d6:	1c5a      	adds	r2, r3, #1
   d72d8:	921d      	str	r2, [sp, #116]	; 0x74
   d72da:	785b      	ldrb	r3, [r3, #1]
   d72dc:	3001      	adds	r0, #1
   d72de:	2b30      	cmp	r3, #48	; 0x30
   d72e0:	d0f8      	beq.n	d72d4 <_strtod_l+0x1f4>
   d72e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d72e6:	2a08      	cmp	r2, #8
   d72e8:	f200 84db 	bhi.w	d7ca2 <_strtod_l+0xbc2>
   d72ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d72ee:	9007      	str	r0, [sp, #28]
   d72f0:	2000      	movs	r0, #0
   d72f2:	920a      	str	r2, [sp, #40]	; 0x28
   d72f4:	4605      	mov	r5, r0
   d72f6:	3b30      	subs	r3, #48	; 0x30
   d72f8:	f100 0201 	add.w	r2, r0, #1
   d72fc:	d014      	beq.n	d7328 <_strtod_l+0x248>
   d72fe:	9907      	ldr	r1, [sp, #28]
   d7300:	4411      	add	r1, r2
   d7302:	9107      	str	r1, [sp, #28]
   d7304:	462a      	mov	r2, r5
   d7306:	eb00 0e05 	add.w	lr, r0, r5
   d730a:	210a      	movs	r1, #10
   d730c:	4572      	cmp	r2, lr
   d730e:	d113      	bne.n	d7338 <_strtod_l+0x258>
   d7310:	182a      	adds	r2, r5, r0
   d7312:	2a08      	cmp	r2, #8
   d7314:	f105 0501 	add.w	r5, r5, #1
   d7318:	4405      	add	r5, r0
   d731a:	dc1c      	bgt.n	d7356 <_strtod_l+0x276>
   d731c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d731e:	220a      	movs	r2, #10
   d7320:	fb02 3301 	mla	r3, r2, r1, r3
   d7324:	9309      	str	r3, [sp, #36]	; 0x24
   d7326:	2200      	movs	r2, #0
   d7328:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d732a:	1c59      	adds	r1, r3, #1
   d732c:	911d      	str	r1, [sp, #116]	; 0x74
   d732e:	785b      	ldrb	r3, [r3, #1]
   d7330:	4610      	mov	r0, r2
   d7332:	e7c9      	b.n	d72c8 <_strtod_l+0x1e8>
   d7334:	4638      	mov	r0, r7
   d7336:	e7d2      	b.n	d72de <_strtod_l+0x1fe>
   d7338:	2a08      	cmp	r2, #8
   d733a:	dc04      	bgt.n	d7346 <_strtod_l+0x266>
   d733c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d733e:	434e      	muls	r6, r1
   d7340:	9609      	str	r6, [sp, #36]	; 0x24
   d7342:	3201      	adds	r2, #1
   d7344:	e7e2      	b.n	d730c <_strtod_l+0x22c>
   d7346:	f102 0c01 	add.w	ip, r2, #1
   d734a:	f1bc 0f10 	cmp.w	ip, #16
   d734e:	bfd8      	it	le
   d7350:	fb01 f909 	mulle.w	r9, r1, r9
   d7354:	e7f5      	b.n	d7342 <_strtod_l+0x262>
   d7356:	2d10      	cmp	r5, #16
   d7358:	bfdc      	itt	le
   d735a:	220a      	movle	r2, #10
   d735c:	fb02 3909 	mlale	r9, r2, r9, r3
   d7360:	e7e1      	b.n	d7326 <_strtod_l+0x246>
   d7362:	2300      	movs	r3, #0
   d7364:	9307      	str	r3, [sp, #28]
   d7366:	2201      	movs	r2, #1
   d7368:	e77c      	b.n	d7264 <_strtod_l+0x184>
   d736a:	f04f 0c00 	mov.w	ip, #0
   d736e:	f108 0302 	add.w	r3, r8, #2
   d7372:	931d      	str	r3, [sp, #116]	; 0x74
   d7374:	f898 3002 	ldrb.w	r3, [r8, #2]
   d7378:	e785      	b.n	d7286 <_strtod_l+0x1a6>
   d737a:	f04f 0c01 	mov.w	ip, #1
   d737e:	e7f6      	b.n	d736e <_strtod_l+0x28e>
   d7380:	000d924c 	.word	0x000d924c
   d7384:	000d90f8 	.word	0x000d90f8
   d7388:	7ff00000 	.word	0x7ff00000
   d738c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d738e:	1c59      	adds	r1, r3, #1
   d7390:	911d      	str	r1, [sp, #116]	; 0x74
   d7392:	785b      	ldrb	r3, [r3, #1]
   d7394:	2b30      	cmp	r3, #48	; 0x30
   d7396:	d0f9      	beq.n	d738c <_strtod_l+0x2ac>
   d7398:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d739c:	2908      	cmp	r1, #8
   d739e:	f63f af79 	bhi.w	d7294 <_strtod_l+0x1b4>
   d73a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d73a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d73a8:	9308      	str	r3, [sp, #32]
   d73aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d73ac:	1c59      	adds	r1, r3, #1
   d73ae:	911d      	str	r1, [sp, #116]	; 0x74
   d73b0:	785b      	ldrb	r3, [r3, #1]
   d73b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d73b6:	2e09      	cmp	r6, #9
   d73b8:	d937      	bls.n	d742a <_strtod_l+0x34a>
   d73ba:	9e08      	ldr	r6, [sp, #32]
   d73bc:	1b89      	subs	r1, r1, r6
   d73be:	2908      	cmp	r1, #8
   d73c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d73c4:	dc02      	bgt.n	d73cc <_strtod_l+0x2ec>
   d73c6:	4576      	cmp	r6, lr
   d73c8:	bfa8      	it	ge
   d73ca:	4676      	movge	r6, lr
   d73cc:	f1bc 0f00 	cmp.w	ip, #0
   d73d0:	d000      	beq.n	d73d4 <_strtod_l+0x2f4>
   d73d2:	4276      	negs	r6, r6
   d73d4:	2d00      	cmp	r5, #0
   d73d6:	d14f      	bne.n	d7478 <_strtod_l+0x398>
   d73d8:	9904      	ldr	r1, [sp, #16]
   d73da:	4301      	orrs	r1, r0
   d73dc:	f47f aec2 	bne.w	d7164 <_strtod_l+0x84>
   d73e0:	2a00      	cmp	r2, #0
   d73e2:	f47f aedb 	bne.w	d719c <_strtod_l+0xbc>
   d73e6:	2b69      	cmp	r3, #105	; 0x69
   d73e8:	d027      	beq.n	d743a <_strtod_l+0x35a>
   d73ea:	dc24      	bgt.n	d7436 <_strtod_l+0x356>
   d73ec:	2b49      	cmp	r3, #73	; 0x49
   d73ee:	d024      	beq.n	d743a <_strtod_l+0x35a>
   d73f0:	2b4e      	cmp	r3, #78	; 0x4e
   d73f2:	f47f aed3 	bne.w	d719c <_strtod_l+0xbc>
   d73f6:	499e      	ldr	r1, [pc, #632]	; (d7670 <_strtod_l+0x590>)
   d73f8:	a81d      	add	r0, sp, #116	; 0x74
   d73fa:	f000 ffc3 	bl	d8384 <__match>
   d73fe:	2800      	cmp	r0, #0
   d7400:	f43f aecc 	beq.w	d719c <_strtod_l+0xbc>
   d7404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7406:	781b      	ldrb	r3, [r3, #0]
   d7408:	2b28      	cmp	r3, #40	; 0x28
   d740a:	d12d      	bne.n	d7468 <_strtod_l+0x388>
   d740c:	4999      	ldr	r1, [pc, #612]	; (d7674 <_strtod_l+0x594>)
   d740e:	aa20      	add	r2, sp, #128	; 0x80
   d7410:	a81d      	add	r0, sp, #116	; 0x74
   d7412:	f000 ffcb 	bl	d83ac <__hexnan>
   d7416:	2805      	cmp	r0, #5
   d7418:	d126      	bne.n	d7468 <_strtod_l+0x388>
   d741a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d741c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d7420:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7424:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7428:	e69c      	b.n	d7164 <_strtod_l+0x84>
   d742a:	210a      	movs	r1, #10
   d742c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d7430:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7434:	e7b9      	b.n	d73aa <_strtod_l+0x2ca>
   d7436:	2b6e      	cmp	r3, #110	; 0x6e
   d7438:	e7db      	b.n	d73f2 <_strtod_l+0x312>
   d743a:	498f      	ldr	r1, [pc, #572]	; (d7678 <_strtod_l+0x598>)
   d743c:	a81d      	add	r0, sp, #116	; 0x74
   d743e:	f000 ffa1 	bl	d8384 <__match>
   d7442:	2800      	cmp	r0, #0
   d7444:	f43f aeaa 	beq.w	d719c <_strtod_l+0xbc>
   d7448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d744a:	498c      	ldr	r1, [pc, #560]	; (d767c <_strtod_l+0x59c>)
   d744c:	3b01      	subs	r3, #1
   d744e:	a81d      	add	r0, sp, #116	; 0x74
   d7450:	931d      	str	r3, [sp, #116]	; 0x74
   d7452:	f000 ff97 	bl	d8384 <__match>
   d7456:	b910      	cbnz	r0, d745e <_strtod_l+0x37e>
   d7458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d745a:	3301      	adds	r3, #1
   d745c:	931d      	str	r3, [sp, #116]	; 0x74
   d745e:	f8df b22c 	ldr.w	fp, [pc, #556]	; d768c <_strtod_l+0x5ac>
   d7462:	f04f 0a00 	mov.w	sl, #0
   d7466:	e67d      	b.n	d7164 <_strtod_l+0x84>
   d7468:	4885      	ldr	r0, [pc, #532]	; (d7680 <_strtod_l+0x5a0>)
   d746a:	f001 fca1 	bl	d8db0 <nan>
   d746e:	ed8d 0b04 	vstr	d0, [sp, #16]
   d7472:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7476:	e675      	b.n	d7164 <_strtod_l+0x84>
   d7478:	9b07      	ldr	r3, [sp, #28]
   d747a:	9809      	ldr	r0, [sp, #36]	; 0x24
   d747c:	1af3      	subs	r3, r6, r3
   d747e:	2f00      	cmp	r7, #0
   d7480:	bf08      	it	eq
   d7482:	462f      	moveq	r7, r5
   d7484:	2d10      	cmp	r5, #16
   d7486:	9308      	str	r3, [sp, #32]
   d7488:	46a8      	mov	r8, r5
   d748a:	bfa8      	it	ge
   d748c:	f04f 0810 	movge.w	r8, #16
   d7490:	f7ff f9d8 	bl	d6844 <__aeabi_ui2d>
   d7494:	2d09      	cmp	r5, #9
   d7496:	4682      	mov	sl, r0
   d7498:	468b      	mov	fp, r1
   d749a:	dd13      	ble.n	d74c4 <_strtod_l+0x3e4>
   d749c:	4b79      	ldr	r3, [pc, #484]	; (d7684 <_strtod_l+0x5a4>)
   d749e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d74a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d74a6:	f7ff fa47 	bl	d6938 <__aeabi_dmul>
   d74aa:	4682      	mov	sl, r0
   d74ac:	4648      	mov	r0, r9
   d74ae:	468b      	mov	fp, r1
   d74b0:	f7ff f9c8 	bl	d6844 <__aeabi_ui2d>
   d74b4:	4602      	mov	r2, r0
   d74b6:	460b      	mov	r3, r1
   d74b8:	4650      	mov	r0, sl
   d74ba:	4659      	mov	r1, fp
   d74bc:	f7ff f886 	bl	d65cc <__adddf3>
   d74c0:	4682      	mov	sl, r0
   d74c2:	468b      	mov	fp, r1
   d74c4:	2d0f      	cmp	r5, #15
   d74c6:	dc38      	bgt.n	d753a <_strtod_l+0x45a>
   d74c8:	9b08      	ldr	r3, [sp, #32]
   d74ca:	2b00      	cmp	r3, #0
   d74cc:	f43f ae4a 	beq.w	d7164 <_strtod_l+0x84>
   d74d0:	dd24      	ble.n	d751c <_strtod_l+0x43c>
   d74d2:	2b16      	cmp	r3, #22
   d74d4:	dc0b      	bgt.n	d74ee <_strtod_l+0x40e>
   d74d6:	4d6b      	ldr	r5, [pc, #428]	; (d7684 <_strtod_l+0x5a4>)
   d74d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d74dc:	e9d5 0100 	ldrd	r0, r1, [r5]
   d74e0:	4652      	mov	r2, sl
   d74e2:	465b      	mov	r3, fp
   d74e4:	f7ff fa28 	bl	d6938 <__aeabi_dmul>
   d74e8:	4682      	mov	sl, r0
   d74ea:	468b      	mov	fp, r1
   d74ec:	e63a      	b.n	d7164 <_strtod_l+0x84>
   d74ee:	9a08      	ldr	r2, [sp, #32]
   d74f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d74f4:	4293      	cmp	r3, r2
   d74f6:	db20      	blt.n	d753a <_strtod_l+0x45a>
   d74f8:	4c62      	ldr	r4, [pc, #392]	; (d7684 <_strtod_l+0x5a4>)
   d74fa:	f1c5 050f 	rsb	r5, r5, #15
   d74fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7502:	4652      	mov	r2, sl
   d7504:	465b      	mov	r3, fp
   d7506:	e9d1 0100 	ldrd	r0, r1, [r1]
   d750a:	f7ff fa15 	bl	d6938 <__aeabi_dmul>
   d750e:	9b08      	ldr	r3, [sp, #32]
   d7510:	1b5d      	subs	r5, r3, r5
   d7512:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7516:	e9d4 2300 	ldrd	r2, r3, [r4]
   d751a:	e7e3      	b.n	d74e4 <_strtod_l+0x404>
   d751c:	9b08      	ldr	r3, [sp, #32]
   d751e:	3316      	adds	r3, #22
   d7520:	db0b      	blt.n	d753a <_strtod_l+0x45a>
   d7522:	9b07      	ldr	r3, [sp, #28]
   d7524:	4a57      	ldr	r2, [pc, #348]	; (d7684 <_strtod_l+0x5a4>)
   d7526:	1b9e      	subs	r6, r3, r6
   d7528:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d752c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7530:	4650      	mov	r0, sl
   d7532:	4659      	mov	r1, fp
   d7534:	f7ff fb2a 	bl	d6b8c <__aeabi_ddiv>
   d7538:	e7d6      	b.n	d74e8 <_strtod_l+0x408>
   d753a:	9b08      	ldr	r3, [sp, #32]
   d753c:	eba5 0808 	sub.w	r8, r5, r8
   d7540:	4498      	add	r8, r3
   d7542:	f1b8 0f00 	cmp.w	r8, #0
   d7546:	dd71      	ble.n	d762c <_strtod_l+0x54c>
   d7548:	f018 030f 	ands.w	r3, r8, #15
   d754c:	d00a      	beq.n	d7564 <_strtod_l+0x484>
   d754e:	494d      	ldr	r1, [pc, #308]	; (d7684 <_strtod_l+0x5a4>)
   d7550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d7554:	4652      	mov	r2, sl
   d7556:	465b      	mov	r3, fp
   d7558:	e9d1 0100 	ldrd	r0, r1, [r1]
   d755c:	f7ff f9ec 	bl	d6938 <__aeabi_dmul>
   d7560:	4682      	mov	sl, r0
   d7562:	468b      	mov	fp, r1
   d7564:	f038 080f 	bics.w	r8, r8, #15
   d7568:	d04d      	beq.n	d7606 <_strtod_l+0x526>
   d756a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d756e:	dd22      	ble.n	d75b6 <_strtod_l+0x4d6>
   d7570:	2500      	movs	r5, #0
   d7572:	462e      	mov	r6, r5
   d7574:	9509      	str	r5, [sp, #36]	; 0x24
   d7576:	9507      	str	r5, [sp, #28]
   d7578:	2322      	movs	r3, #34	; 0x22
   d757a:	f8df b110 	ldr.w	fp, [pc, #272]	; d768c <_strtod_l+0x5ac>
   d757e:	6023      	str	r3, [r4, #0]
   d7580:	f04f 0a00 	mov.w	sl, #0
   d7584:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7586:	2b00      	cmp	r3, #0
   d7588:	f43f adec 	beq.w	d7164 <_strtod_l+0x84>
   d758c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d758e:	4620      	mov	r0, r4
   d7590:	f000 fff1 	bl	d8576 <_Bfree>
   d7594:	9907      	ldr	r1, [sp, #28]
   d7596:	4620      	mov	r0, r4
   d7598:	f000 ffed 	bl	d8576 <_Bfree>
   d759c:	4631      	mov	r1, r6
   d759e:	4620      	mov	r0, r4
   d75a0:	f000 ffe9 	bl	d8576 <_Bfree>
   d75a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d75a6:	4620      	mov	r0, r4
   d75a8:	f000 ffe5 	bl	d8576 <_Bfree>
   d75ac:	4629      	mov	r1, r5
   d75ae:	4620      	mov	r0, r4
   d75b0:	f000 ffe1 	bl	d8576 <_Bfree>
   d75b4:	e5d6      	b.n	d7164 <_strtod_l+0x84>
   d75b6:	2300      	movs	r3, #0
   d75b8:	ea4f 1828 	mov.w	r8, r8, asr #4
   d75bc:	4650      	mov	r0, sl
   d75be:	4659      	mov	r1, fp
   d75c0:	4699      	mov	r9, r3
   d75c2:	f1b8 0f01 	cmp.w	r8, #1
   d75c6:	dc21      	bgt.n	d760c <_strtod_l+0x52c>
   d75c8:	b10b      	cbz	r3, d75ce <_strtod_l+0x4ee>
   d75ca:	4682      	mov	sl, r0
   d75cc:	468b      	mov	fp, r1
   d75ce:	4b2e      	ldr	r3, [pc, #184]	; (d7688 <_strtod_l+0x5a8>)
   d75d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d75d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d75d8:	4652      	mov	r2, sl
   d75da:	465b      	mov	r3, fp
   d75dc:	e9d9 0100 	ldrd	r0, r1, [r9]
   d75e0:	f7ff f9aa 	bl	d6938 <__aeabi_dmul>
   d75e4:	4b29      	ldr	r3, [pc, #164]	; (d768c <_strtod_l+0x5ac>)
   d75e6:	460a      	mov	r2, r1
   d75e8:	400b      	ands	r3, r1
   d75ea:	4929      	ldr	r1, [pc, #164]	; (d7690 <_strtod_l+0x5b0>)
   d75ec:	428b      	cmp	r3, r1
   d75ee:	4682      	mov	sl, r0
   d75f0:	d8be      	bhi.n	d7570 <_strtod_l+0x490>
   d75f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d75f6:	428b      	cmp	r3, r1
   d75f8:	bf86      	itte	hi
   d75fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d7694 <_strtod_l+0x5b4>
   d75fe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7602:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7606:	2300      	movs	r3, #0
   d7608:	9304      	str	r3, [sp, #16]
   d760a:	e081      	b.n	d7710 <_strtod_l+0x630>
   d760c:	f018 0f01 	tst.w	r8, #1
   d7610:	d007      	beq.n	d7622 <_strtod_l+0x542>
   d7612:	4b1d      	ldr	r3, [pc, #116]	; (d7688 <_strtod_l+0x5a8>)
   d7614:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d7618:	e9d3 2300 	ldrd	r2, r3, [r3]
   d761c:	f7ff f98c 	bl	d6938 <__aeabi_dmul>
   d7620:	2301      	movs	r3, #1
   d7622:	f109 0901 	add.w	r9, r9, #1
   d7626:	ea4f 0868 	mov.w	r8, r8, asr #1
   d762a:	e7ca      	b.n	d75c2 <_strtod_l+0x4e2>
   d762c:	d0eb      	beq.n	d7606 <_strtod_l+0x526>
   d762e:	f1c8 0800 	rsb	r8, r8, #0
   d7632:	f018 020f 	ands.w	r2, r8, #15
   d7636:	d00a      	beq.n	d764e <_strtod_l+0x56e>
   d7638:	4b12      	ldr	r3, [pc, #72]	; (d7684 <_strtod_l+0x5a4>)
   d763a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d763e:	4650      	mov	r0, sl
   d7640:	4659      	mov	r1, fp
   d7642:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7646:	f7ff faa1 	bl	d6b8c <__aeabi_ddiv>
   d764a:	4682      	mov	sl, r0
   d764c:	468b      	mov	fp, r1
   d764e:	ea5f 1828 	movs.w	r8, r8, asr #4
   d7652:	d0d8      	beq.n	d7606 <_strtod_l+0x526>
   d7654:	f1b8 0f1f 	cmp.w	r8, #31
   d7658:	dd1e      	ble.n	d7698 <_strtod_l+0x5b8>
   d765a:	2500      	movs	r5, #0
   d765c:	462e      	mov	r6, r5
   d765e:	9509      	str	r5, [sp, #36]	; 0x24
   d7660:	9507      	str	r5, [sp, #28]
   d7662:	2322      	movs	r3, #34	; 0x22
   d7664:	f04f 0a00 	mov.w	sl, #0
   d7668:	f04f 0b00 	mov.w	fp, #0
   d766c:	6023      	str	r3, [r4, #0]
   d766e:	e789      	b.n	d7584 <_strtod_l+0x4a4>
   d7670:	000d90f2 	.word	0x000d90f2
   d7674:	000d910c 	.word	0x000d910c
   d7678:	000d90e9 	.word	0x000d90e9
   d767c:	000d90ec 	.word	0x000d90ec
   d7680:	000d8ea7 	.word	0x000d8ea7
   d7684:	000d9288 	.word	0x000d9288
   d7688:	000d9260 	.word	0x000d9260
   d768c:	7ff00000 	.word	0x7ff00000
   d7690:	7ca00000 	.word	0x7ca00000
   d7694:	7fefffff 	.word	0x7fefffff
   d7698:	f018 0310 	ands.w	r3, r8, #16
   d769c:	bf18      	it	ne
   d769e:	236a      	movne	r3, #106	; 0x6a
   d76a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d7a58 <_strtod_l+0x978>
   d76a4:	9304      	str	r3, [sp, #16]
   d76a6:	4650      	mov	r0, sl
   d76a8:	4659      	mov	r1, fp
   d76aa:	2300      	movs	r3, #0
   d76ac:	f018 0f01 	tst.w	r8, #1
   d76b0:	d004      	beq.n	d76bc <_strtod_l+0x5dc>
   d76b2:	e9d9 2300 	ldrd	r2, r3, [r9]
   d76b6:	f7ff f93f 	bl	d6938 <__aeabi_dmul>
   d76ba:	2301      	movs	r3, #1
   d76bc:	ea5f 0868 	movs.w	r8, r8, asr #1
   d76c0:	f109 0908 	add.w	r9, r9, #8
   d76c4:	d1f2      	bne.n	d76ac <_strtod_l+0x5cc>
   d76c6:	b10b      	cbz	r3, d76cc <_strtod_l+0x5ec>
   d76c8:	4682      	mov	sl, r0
   d76ca:	468b      	mov	fp, r1
   d76cc:	9b04      	ldr	r3, [sp, #16]
   d76ce:	b1bb      	cbz	r3, d7700 <_strtod_l+0x620>
   d76d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d76d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d76d8:	2b00      	cmp	r3, #0
   d76da:	4659      	mov	r1, fp
   d76dc:	dd10      	ble.n	d7700 <_strtod_l+0x620>
   d76de:	2b1f      	cmp	r3, #31
   d76e0:	f340 8128 	ble.w	d7934 <_strtod_l+0x854>
   d76e4:	2b34      	cmp	r3, #52	; 0x34
   d76e6:	bfde      	ittt	le
   d76e8:	3b20      	suble	r3, #32
   d76ea:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d76ee:	fa02 f303 	lslle.w	r3, r2, r3
   d76f2:	f04f 0a00 	mov.w	sl, #0
   d76f6:	bfcc      	ite	gt
   d76f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d76fc:	ea03 0b01 	andle.w	fp, r3, r1
   d7700:	2200      	movs	r2, #0
   d7702:	2300      	movs	r3, #0
   d7704:	4650      	mov	r0, sl
   d7706:	4659      	mov	r1, fp
   d7708:	f7ff fb7e 	bl	d6e08 <__aeabi_dcmpeq>
   d770c:	2800      	cmp	r0, #0
   d770e:	d1a4      	bne.n	d765a <_strtod_l+0x57a>
   d7710:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7712:	9300      	str	r3, [sp, #0]
   d7714:	990a      	ldr	r1, [sp, #40]	; 0x28
   d7716:	462b      	mov	r3, r5
   d7718:	463a      	mov	r2, r7
   d771a:	4620      	mov	r0, r4
   d771c:	f000 ff80 	bl	d8620 <__s2b>
   d7720:	9009      	str	r0, [sp, #36]	; 0x24
   d7722:	2800      	cmp	r0, #0
   d7724:	f43f af24 	beq.w	d7570 <_strtod_l+0x490>
   d7728:	9b07      	ldr	r3, [sp, #28]
   d772a:	1b9e      	subs	r6, r3, r6
   d772c:	9b08      	ldr	r3, [sp, #32]
   d772e:	2b00      	cmp	r3, #0
   d7730:	bfb4      	ite	lt
   d7732:	4633      	movlt	r3, r6
   d7734:	2300      	movge	r3, #0
   d7736:	9310      	str	r3, [sp, #64]	; 0x40
   d7738:	9b08      	ldr	r3, [sp, #32]
   d773a:	2500      	movs	r5, #0
   d773c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d7740:	9318      	str	r3, [sp, #96]	; 0x60
   d7742:	462e      	mov	r6, r5
   d7744:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7746:	4620      	mov	r0, r4
   d7748:	6859      	ldr	r1, [r3, #4]
   d774a:	f000 fee0 	bl	d850e <_Balloc>
   d774e:	9007      	str	r0, [sp, #28]
   d7750:	2800      	cmp	r0, #0
   d7752:	f43f af11 	beq.w	d7578 <_strtod_l+0x498>
   d7756:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7758:	691a      	ldr	r2, [r3, #16]
   d775a:	3202      	adds	r2, #2
   d775c:	f103 010c 	add.w	r1, r3, #12
   d7760:	0092      	lsls	r2, r2, #2
   d7762:	300c      	adds	r0, #12
   d7764:	f7ff fc19 	bl	d6f9a <memcpy>
   d7768:	ec4b ab10 	vmov	d0, sl, fp
   d776c:	aa20      	add	r2, sp, #128	; 0x80
   d776e:	a91f      	add	r1, sp, #124	; 0x7c
   d7770:	4620      	mov	r0, r4
   d7772:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d7776:	f001 fa43 	bl	d8c00 <__d2b>
   d777a:	901e      	str	r0, [sp, #120]	; 0x78
   d777c:	2800      	cmp	r0, #0
   d777e:	f43f aefb 	beq.w	d7578 <_strtod_l+0x498>
   d7782:	2101      	movs	r1, #1
   d7784:	4620      	mov	r0, r4
   d7786:	f000 ffd9 	bl	d873c <__i2b>
   d778a:	4606      	mov	r6, r0
   d778c:	2800      	cmp	r0, #0
   d778e:	f43f aef3 	beq.w	d7578 <_strtod_l+0x498>
   d7792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d7794:	9904      	ldr	r1, [sp, #16]
   d7796:	2b00      	cmp	r3, #0
   d7798:	bfab      	itete	ge
   d779a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d779c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d779e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d77a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d77a4:	bfac      	ite	ge
   d77a6:	eb03 0902 	addge.w	r9, r3, r2
   d77aa:	1ad7      	sublt	r7, r2, r3
   d77ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d77ae:	eba3 0801 	sub.w	r8, r3, r1
   d77b2:	4490      	add	r8, r2
   d77b4:	4ba3      	ldr	r3, [pc, #652]	; (d7a44 <_strtod_l+0x964>)
   d77b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d77ba:	4598      	cmp	r8, r3
   d77bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d77c0:	f280 80cc 	bge.w	d795c <_strtod_l+0x87c>
   d77c4:	eba3 0308 	sub.w	r3, r3, r8
   d77c8:	2b1f      	cmp	r3, #31
   d77ca:	eba2 0203 	sub.w	r2, r2, r3
   d77ce:	f04f 0101 	mov.w	r1, #1
   d77d2:	f300 80b6 	bgt.w	d7942 <_strtod_l+0x862>
   d77d6:	fa01 f303 	lsl.w	r3, r1, r3
   d77da:	9311      	str	r3, [sp, #68]	; 0x44
   d77dc:	2300      	movs	r3, #0
   d77de:	930c      	str	r3, [sp, #48]	; 0x30
   d77e0:	eb09 0802 	add.w	r8, r9, r2
   d77e4:	9b04      	ldr	r3, [sp, #16]
   d77e6:	45c1      	cmp	r9, r8
   d77e8:	4417      	add	r7, r2
   d77ea:	441f      	add	r7, r3
   d77ec:	464b      	mov	r3, r9
   d77ee:	bfa8      	it	ge
   d77f0:	4643      	movge	r3, r8
   d77f2:	42bb      	cmp	r3, r7
   d77f4:	bfa8      	it	ge
   d77f6:	463b      	movge	r3, r7
   d77f8:	2b00      	cmp	r3, #0
   d77fa:	bfc2      	ittt	gt
   d77fc:	eba8 0803 	subgt.w	r8, r8, r3
   d7800:	1aff      	subgt	r7, r7, r3
   d7802:	eba9 0903 	subgt.w	r9, r9, r3
   d7806:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7808:	2b00      	cmp	r3, #0
   d780a:	dd17      	ble.n	d783c <_strtod_l+0x75c>
   d780c:	4631      	mov	r1, r6
   d780e:	461a      	mov	r2, r3
   d7810:	4620      	mov	r0, r4
   d7812:	f001 f839 	bl	d8888 <__pow5mult>
   d7816:	4606      	mov	r6, r0
   d7818:	2800      	cmp	r0, #0
   d781a:	f43f aead 	beq.w	d7578 <_strtod_l+0x498>
   d781e:	4601      	mov	r1, r0
   d7820:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7822:	4620      	mov	r0, r4
   d7824:	f000 ff93 	bl	d874e <__multiply>
   d7828:	900f      	str	r0, [sp, #60]	; 0x3c
   d782a:	2800      	cmp	r0, #0
   d782c:	f43f aea4 	beq.w	d7578 <_strtod_l+0x498>
   d7830:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7832:	4620      	mov	r0, r4
   d7834:	f000 fe9f 	bl	d8576 <_Bfree>
   d7838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d783a:	931e      	str	r3, [sp, #120]	; 0x78
   d783c:	f1b8 0f00 	cmp.w	r8, #0
   d7840:	f300 8091 	bgt.w	d7966 <_strtod_l+0x886>
   d7844:	9b08      	ldr	r3, [sp, #32]
   d7846:	2b00      	cmp	r3, #0
   d7848:	dd08      	ble.n	d785c <_strtod_l+0x77c>
   d784a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d784c:	9907      	ldr	r1, [sp, #28]
   d784e:	4620      	mov	r0, r4
   d7850:	f001 f81a 	bl	d8888 <__pow5mult>
   d7854:	9007      	str	r0, [sp, #28]
   d7856:	2800      	cmp	r0, #0
   d7858:	f43f ae8e 	beq.w	d7578 <_strtod_l+0x498>
   d785c:	2f00      	cmp	r7, #0
   d785e:	dd08      	ble.n	d7872 <_strtod_l+0x792>
   d7860:	9907      	ldr	r1, [sp, #28]
   d7862:	463a      	mov	r2, r7
   d7864:	4620      	mov	r0, r4
   d7866:	f001 f85d 	bl	d8924 <__lshift>
   d786a:	9007      	str	r0, [sp, #28]
   d786c:	2800      	cmp	r0, #0
   d786e:	f43f ae83 	beq.w	d7578 <_strtod_l+0x498>
   d7872:	f1b9 0f00 	cmp.w	r9, #0
   d7876:	dd08      	ble.n	d788a <_strtod_l+0x7aa>
   d7878:	4631      	mov	r1, r6
   d787a:	464a      	mov	r2, r9
   d787c:	4620      	mov	r0, r4
   d787e:	f001 f851 	bl	d8924 <__lshift>
   d7882:	4606      	mov	r6, r0
   d7884:	2800      	cmp	r0, #0
   d7886:	f43f ae77 	beq.w	d7578 <_strtod_l+0x498>
   d788a:	9a07      	ldr	r2, [sp, #28]
   d788c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d788e:	4620      	mov	r0, r4
   d7890:	f001 f8c3 	bl	d8a1a <__mdiff>
   d7894:	4605      	mov	r5, r0
   d7896:	2800      	cmp	r0, #0
   d7898:	f43f ae6e 	beq.w	d7578 <_strtod_l+0x498>
   d789c:	68c3      	ldr	r3, [r0, #12]
   d789e:	930f      	str	r3, [sp, #60]	; 0x3c
   d78a0:	2300      	movs	r3, #0
   d78a2:	60c3      	str	r3, [r0, #12]
   d78a4:	4631      	mov	r1, r6
   d78a6:	f001 f89c 	bl	d89e2 <__mcmp>
   d78aa:	2800      	cmp	r0, #0
   d78ac:	da65      	bge.n	d797a <_strtod_l+0x89a>
   d78ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d78b0:	ea53 030a 	orrs.w	r3, r3, sl
   d78b4:	f040 8087 	bne.w	d79c6 <_strtod_l+0x8e6>
   d78b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d78bc:	2b00      	cmp	r3, #0
   d78be:	f040 8082 	bne.w	d79c6 <_strtod_l+0x8e6>
   d78c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d78c6:	0d1b      	lsrs	r3, r3, #20
   d78c8:	051b      	lsls	r3, r3, #20
   d78ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d78ce:	d97a      	bls.n	d79c6 <_strtod_l+0x8e6>
   d78d0:	696b      	ldr	r3, [r5, #20]
   d78d2:	b913      	cbnz	r3, d78da <_strtod_l+0x7fa>
   d78d4:	692b      	ldr	r3, [r5, #16]
   d78d6:	2b01      	cmp	r3, #1
   d78d8:	dd75      	ble.n	d79c6 <_strtod_l+0x8e6>
   d78da:	4629      	mov	r1, r5
   d78dc:	2201      	movs	r2, #1
   d78de:	4620      	mov	r0, r4
   d78e0:	f001 f820 	bl	d8924 <__lshift>
   d78e4:	4631      	mov	r1, r6
   d78e6:	4605      	mov	r5, r0
   d78e8:	f001 f87b 	bl	d89e2 <__mcmp>
   d78ec:	2800      	cmp	r0, #0
   d78ee:	dd6a      	ble.n	d79c6 <_strtod_l+0x8e6>
   d78f0:	9904      	ldr	r1, [sp, #16]
   d78f2:	4a55      	ldr	r2, [pc, #340]	; (d7a48 <_strtod_l+0x968>)
   d78f4:	465b      	mov	r3, fp
   d78f6:	2900      	cmp	r1, #0
   d78f8:	f000 8085 	beq.w	d7a06 <_strtod_l+0x926>
   d78fc:	ea02 010b 	and.w	r1, r2, fp
   d7900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d7904:	dc7f      	bgt.n	d7a06 <_strtod_l+0x926>
   d7906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d790a:	f77f aeaa 	ble.w	d7662 <_strtod_l+0x582>
   d790e:	4a4f      	ldr	r2, [pc, #316]	; (d7a4c <_strtod_l+0x96c>)
   d7910:	2300      	movs	r3, #0
   d7912:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d7916:	4650      	mov	r0, sl
   d7918:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d791c:	4659      	mov	r1, fp
   d791e:	f7ff f80b 	bl	d6938 <__aeabi_dmul>
   d7922:	460b      	mov	r3, r1
   d7924:	4303      	orrs	r3, r0
   d7926:	bf08      	it	eq
   d7928:	2322      	moveq	r3, #34	; 0x22
   d792a:	4682      	mov	sl, r0
   d792c:	468b      	mov	fp, r1
   d792e:	bf08      	it	eq
   d7930:	6023      	streq	r3, [r4, #0]
   d7932:	e62b      	b.n	d758c <_strtod_l+0x4ac>
   d7934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7938:	fa02 f303 	lsl.w	r3, r2, r3
   d793c:	ea03 0a0a 	and.w	sl, r3, sl
   d7940:	e6de      	b.n	d7700 <_strtod_l+0x620>
   d7942:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d7946:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d794a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d794e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d7952:	fa01 f308 	lsl.w	r3, r1, r8
   d7956:	930c      	str	r3, [sp, #48]	; 0x30
   d7958:	9111      	str	r1, [sp, #68]	; 0x44
   d795a:	e741      	b.n	d77e0 <_strtod_l+0x700>
   d795c:	2300      	movs	r3, #0
   d795e:	930c      	str	r3, [sp, #48]	; 0x30
   d7960:	2301      	movs	r3, #1
   d7962:	9311      	str	r3, [sp, #68]	; 0x44
   d7964:	e73c      	b.n	d77e0 <_strtod_l+0x700>
   d7966:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7968:	4642      	mov	r2, r8
   d796a:	4620      	mov	r0, r4
   d796c:	f000 ffda 	bl	d8924 <__lshift>
   d7970:	901e      	str	r0, [sp, #120]	; 0x78
   d7972:	2800      	cmp	r0, #0
   d7974:	f47f af66 	bne.w	d7844 <_strtod_l+0x764>
   d7978:	e5fe      	b.n	d7578 <_strtod_l+0x498>
   d797a:	465f      	mov	r7, fp
   d797c:	d16e      	bne.n	d7a5c <_strtod_l+0x97c>
   d797e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7980:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7984:	b342      	cbz	r2, d79d8 <_strtod_l+0x8f8>
   d7986:	4a32      	ldr	r2, [pc, #200]	; (d7a50 <_strtod_l+0x970>)
   d7988:	4293      	cmp	r3, r2
   d798a:	d128      	bne.n	d79de <_strtod_l+0x8fe>
   d798c:	9b04      	ldr	r3, [sp, #16]
   d798e:	4650      	mov	r0, sl
   d7990:	b1eb      	cbz	r3, d79ce <_strtod_l+0x8ee>
   d7992:	4a2d      	ldr	r2, [pc, #180]	; (d7a48 <_strtod_l+0x968>)
   d7994:	403a      	ands	r2, r7
   d7996:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d799a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d799e:	d819      	bhi.n	d79d4 <_strtod_l+0x8f4>
   d79a0:	0d12      	lsrs	r2, r2, #20
   d79a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d79a6:	fa01 f303 	lsl.w	r3, r1, r3
   d79aa:	4298      	cmp	r0, r3
   d79ac:	d117      	bne.n	d79de <_strtod_l+0x8fe>
   d79ae:	4b29      	ldr	r3, [pc, #164]	; (d7a54 <_strtod_l+0x974>)
   d79b0:	429f      	cmp	r7, r3
   d79b2:	d102      	bne.n	d79ba <_strtod_l+0x8da>
   d79b4:	3001      	adds	r0, #1
   d79b6:	f43f addf 	beq.w	d7578 <_strtod_l+0x498>
   d79ba:	4b23      	ldr	r3, [pc, #140]	; (d7a48 <_strtod_l+0x968>)
   d79bc:	403b      	ands	r3, r7
   d79be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d79c2:	f04f 0a00 	mov.w	sl, #0
   d79c6:	9b04      	ldr	r3, [sp, #16]
   d79c8:	2b00      	cmp	r3, #0
   d79ca:	d1a0      	bne.n	d790e <_strtod_l+0x82e>
   d79cc:	e5de      	b.n	d758c <_strtod_l+0x4ac>
   d79ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d79d2:	e7ea      	b.n	d79aa <_strtod_l+0x8ca>
   d79d4:	460b      	mov	r3, r1
   d79d6:	e7e8      	b.n	d79aa <_strtod_l+0x8ca>
   d79d8:	ea53 030a 	orrs.w	r3, r3, sl
   d79dc:	d088      	beq.n	d78f0 <_strtod_l+0x810>
   d79de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d79e0:	b1db      	cbz	r3, d7a1a <_strtod_l+0x93a>
   d79e2:	423b      	tst	r3, r7
   d79e4:	d0ef      	beq.n	d79c6 <_strtod_l+0x8e6>
   d79e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d79e8:	9a04      	ldr	r2, [sp, #16]
   d79ea:	4650      	mov	r0, sl
   d79ec:	4659      	mov	r1, fp
   d79ee:	b1c3      	cbz	r3, d7a22 <_strtod_l+0x942>
   d79f0:	f7ff fb57 	bl	d70a2 <sulp>
   d79f4:	4602      	mov	r2, r0
   d79f6:	460b      	mov	r3, r1
   d79f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d79fc:	f7fe fde6 	bl	d65cc <__adddf3>
   d7a00:	4682      	mov	sl, r0
   d7a02:	468b      	mov	fp, r1
   d7a04:	e7df      	b.n	d79c6 <_strtod_l+0x8e6>
   d7a06:	4013      	ands	r3, r2
   d7a08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d7a0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d7a10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d7a14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7a18:	e7d5      	b.n	d79c6 <_strtod_l+0x8e6>
   d7a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7a1c:	ea13 0f0a 	tst.w	r3, sl
   d7a20:	e7e0      	b.n	d79e4 <_strtod_l+0x904>
   d7a22:	f7ff fb3e 	bl	d70a2 <sulp>
   d7a26:	4602      	mov	r2, r0
   d7a28:	460b      	mov	r3, r1
   d7a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7a2e:	f7fe fdcb 	bl	d65c8 <__aeabi_dsub>
   d7a32:	2200      	movs	r2, #0
   d7a34:	2300      	movs	r3, #0
   d7a36:	4682      	mov	sl, r0
   d7a38:	468b      	mov	fp, r1
   d7a3a:	f7ff f9e5 	bl	d6e08 <__aeabi_dcmpeq>
   d7a3e:	2800      	cmp	r0, #0
   d7a40:	d0c1      	beq.n	d79c6 <_strtod_l+0x8e6>
   d7a42:	e60e      	b.n	d7662 <_strtod_l+0x582>
   d7a44:	fffffc02 	.word	0xfffffc02
   d7a48:	7ff00000 	.word	0x7ff00000
   d7a4c:	39500000 	.word	0x39500000
   d7a50:	000fffff 	.word	0x000fffff
   d7a54:	7fefffff 	.word	0x7fefffff
   d7a58:	000d9120 	.word	0x000d9120
   d7a5c:	4631      	mov	r1, r6
   d7a5e:	4628      	mov	r0, r5
   d7a60:	f001 f91e 	bl	d8ca0 <__ratio>
   d7a64:	ec59 8b10 	vmov	r8, r9, d0
   d7a68:	ee10 0a10 	vmov	r0, s0
   d7a6c:	2200      	movs	r2, #0
   d7a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7a72:	4649      	mov	r1, r9
   d7a74:	f7ff f9dc 	bl	d6e30 <__aeabi_dcmple>
   d7a78:	2800      	cmp	r0, #0
   d7a7a:	d07c      	beq.n	d7b76 <_strtod_l+0xa96>
   d7a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7a7e:	2b00      	cmp	r3, #0
   d7a80:	d04c      	beq.n	d7b1c <_strtod_l+0xa3c>
   d7a82:	4b95      	ldr	r3, [pc, #596]	; (d7cd8 <_strtod_l+0xbf8>)
   d7a84:	2200      	movs	r2, #0
   d7a86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7a8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; d7cd8 <_strtod_l+0xbf8>
   d7a8e:	f04f 0800 	mov.w	r8, #0
   d7a92:	4b92      	ldr	r3, [pc, #584]	; (d7cdc <_strtod_l+0xbfc>)
   d7a94:	403b      	ands	r3, r7
   d7a96:	9311      	str	r3, [sp, #68]	; 0x44
   d7a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7a9a:	4b91      	ldr	r3, [pc, #580]	; (d7ce0 <_strtod_l+0xc00>)
   d7a9c:	429a      	cmp	r2, r3
   d7a9e:	f040 80b2 	bne.w	d7c06 <_strtod_l+0xb26>
   d7aa2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7aaa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d7aae:	ec4b ab10 	vmov	d0, sl, fp
   d7ab2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d7ab6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d7aba:	f001 f825 	bl	d8b08 <__ulp>
   d7abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7ac2:	ec53 2b10 	vmov	r2, r3, d0
   d7ac6:	f7fe ff37 	bl	d6938 <__aeabi_dmul>
   d7aca:	4652      	mov	r2, sl
   d7acc:	465b      	mov	r3, fp
   d7ace:	f7fe fd7d 	bl	d65cc <__adddf3>
   d7ad2:	460b      	mov	r3, r1
   d7ad4:	4981      	ldr	r1, [pc, #516]	; (d7cdc <_strtod_l+0xbfc>)
   d7ad6:	4a83      	ldr	r2, [pc, #524]	; (d7ce4 <_strtod_l+0xc04>)
   d7ad8:	4019      	ands	r1, r3
   d7ada:	4291      	cmp	r1, r2
   d7adc:	4682      	mov	sl, r0
   d7ade:	d95e      	bls.n	d7b9e <_strtod_l+0xabe>
   d7ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7ae2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d7ae6:	4293      	cmp	r3, r2
   d7ae8:	d103      	bne.n	d7af2 <_strtod_l+0xa12>
   d7aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7aec:	3301      	adds	r3, #1
   d7aee:	f43f ad43 	beq.w	d7578 <_strtod_l+0x498>
   d7af2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d7cf0 <_strtod_l+0xc10>
   d7af6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7afa:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7afc:	4620      	mov	r0, r4
   d7afe:	f000 fd3a 	bl	d8576 <_Bfree>
   d7b02:	9907      	ldr	r1, [sp, #28]
   d7b04:	4620      	mov	r0, r4
   d7b06:	f000 fd36 	bl	d8576 <_Bfree>
   d7b0a:	4631      	mov	r1, r6
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	f000 fd32 	bl	d8576 <_Bfree>
   d7b12:	4629      	mov	r1, r5
   d7b14:	4620      	mov	r0, r4
   d7b16:	f000 fd2e 	bl	d8576 <_Bfree>
   d7b1a:	e613      	b.n	d7744 <_strtod_l+0x664>
   d7b1c:	f1ba 0f00 	cmp.w	sl, #0
   d7b20:	d11b      	bne.n	d7b5a <_strtod_l+0xa7a>
   d7b22:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7b26:	b9f3      	cbnz	r3, d7b66 <_strtod_l+0xa86>
   d7b28:	4b6b      	ldr	r3, [pc, #428]	; (d7cd8 <_strtod_l+0xbf8>)
   d7b2a:	2200      	movs	r2, #0
   d7b2c:	4640      	mov	r0, r8
   d7b2e:	4649      	mov	r1, r9
   d7b30:	f7ff f974 	bl	d6e1c <__aeabi_dcmplt>
   d7b34:	b9d0      	cbnz	r0, d7b6c <_strtod_l+0xa8c>
   d7b36:	4640      	mov	r0, r8
   d7b38:	4649      	mov	r1, r9
   d7b3a:	4b6b      	ldr	r3, [pc, #428]	; (d7ce8 <_strtod_l+0xc08>)
   d7b3c:	2200      	movs	r2, #0
   d7b3e:	f7fe fefb 	bl	d6938 <__aeabi_dmul>
   d7b42:	4680      	mov	r8, r0
   d7b44:	4689      	mov	r9, r1
   d7b46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d7b4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d7b4e:	931b      	str	r3, [sp, #108]	; 0x6c
   d7b50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d7b54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7b58:	e79b      	b.n	d7a92 <_strtod_l+0x9b2>
   d7b5a:	f1ba 0f01 	cmp.w	sl, #1
   d7b5e:	d102      	bne.n	d7b66 <_strtod_l+0xa86>
   d7b60:	2f00      	cmp	r7, #0
   d7b62:	f43f ad7e 	beq.w	d7662 <_strtod_l+0x582>
   d7b66:	4b61      	ldr	r3, [pc, #388]	; (d7cec <_strtod_l+0xc0c>)
   d7b68:	2200      	movs	r2, #0
   d7b6a:	e78c      	b.n	d7a86 <_strtod_l+0x9a6>
   d7b6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; d7ce8 <_strtod_l+0xc08>
   d7b70:	f04f 0800 	mov.w	r8, #0
   d7b74:	e7e7      	b.n	d7b46 <_strtod_l+0xa66>
   d7b76:	4b5c      	ldr	r3, [pc, #368]	; (d7ce8 <_strtod_l+0xc08>)
   d7b78:	4640      	mov	r0, r8
   d7b7a:	4649      	mov	r1, r9
   d7b7c:	2200      	movs	r2, #0
   d7b7e:	f7fe fedb 	bl	d6938 <__aeabi_dmul>
   d7b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7b84:	4680      	mov	r8, r0
   d7b86:	4689      	mov	r9, r1
   d7b88:	b933      	cbnz	r3, d7b98 <_strtod_l+0xab8>
   d7b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7b8e:	9012      	str	r0, [sp, #72]	; 0x48
   d7b90:	9313      	str	r3, [sp, #76]	; 0x4c
   d7b92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d7b96:	e7dd      	b.n	d7b54 <_strtod_l+0xa74>
   d7b98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d7b9c:	e7f9      	b.n	d7b92 <_strtod_l+0xab2>
   d7b9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d7ba2:	9b04      	ldr	r3, [sp, #16]
   d7ba4:	2b00      	cmp	r3, #0
   d7ba6:	d1a8      	bne.n	d7afa <_strtod_l+0xa1a>
   d7ba8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7bae:	0d1b      	lsrs	r3, r3, #20
   d7bb0:	051b      	lsls	r3, r3, #20
   d7bb2:	429a      	cmp	r2, r3
   d7bb4:	d1a1      	bne.n	d7afa <_strtod_l+0xa1a>
   d7bb6:	4640      	mov	r0, r8
   d7bb8:	4649      	mov	r1, r9
   d7bba:	f001 f90f 	bl	d8ddc <__aeabi_d2lz>
   d7bbe:	f7fe fe8d 	bl	d68dc <__aeabi_l2d>
   d7bc2:	4602      	mov	r2, r0
   d7bc4:	460b      	mov	r3, r1
   d7bc6:	4640      	mov	r0, r8
   d7bc8:	4649      	mov	r1, r9
   d7bca:	f7fe fcfd 	bl	d65c8 <__aeabi_dsub>
   d7bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7bd4:	ea43 030a 	orr.w	r3, r3, sl
   d7bd8:	4313      	orrs	r3, r2
   d7bda:	4680      	mov	r8, r0
   d7bdc:	4689      	mov	r9, r1
   d7bde:	d053      	beq.n	d7c88 <_strtod_l+0xba8>
   d7be0:	a335      	add	r3, pc, #212	; (adr r3, d7cb8 <_strtod_l+0xbd8>)
   d7be2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7be6:	f7ff f919 	bl	d6e1c <__aeabi_dcmplt>
   d7bea:	2800      	cmp	r0, #0
   d7bec:	f47f acce 	bne.w	d758c <_strtod_l+0x4ac>
   d7bf0:	a333      	add	r3, pc, #204	; (adr r3, d7cc0 <_strtod_l+0xbe0>)
   d7bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bf6:	4640      	mov	r0, r8
   d7bf8:	4649      	mov	r1, r9
   d7bfa:	f7ff f92d 	bl	d6e58 <__aeabi_dcmpgt>
   d7bfe:	2800      	cmp	r0, #0
   d7c00:	f43f af7b 	beq.w	d7afa <_strtod_l+0xa1a>
   d7c04:	e4c2      	b.n	d758c <_strtod_l+0x4ac>
   d7c06:	9b04      	ldr	r3, [sp, #16]
   d7c08:	b333      	cbz	r3, d7c58 <_strtod_l+0xb78>
   d7c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7c0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7c10:	d822      	bhi.n	d7c58 <_strtod_l+0xb78>
   d7c12:	a32d      	add	r3, pc, #180	; (adr r3, d7cc8 <_strtod_l+0xbe8>)
   d7c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c18:	4640      	mov	r0, r8
   d7c1a:	4649      	mov	r1, r9
   d7c1c:	f7ff f908 	bl	d6e30 <__aeabi_dcmple>
   d7c20:	b1a0      	cbz	r0, d7c4c <_strtod_l+0xb6c>
   d7c22:	4649      	mov	r1, r9
   d7c24:	4640      	mov	r0, r8
   d7c26:	f7ff f921 	bl	d6e6c <__aeabi_d2uiz>
   d7c2a:	2801      	cmp	r0, #1
   d7c2c:	bf38      	it	cc
   d7c2e:	2001      	movcc	r0, #1
   d7c30:	f7fe fe08 	bl	d6844 <__aeabi_ui2d>
   d7c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7c36:	4680      	mov	r8, r0
   d7c38:	4689      	mov	r9, r1
   d7c3a:	bb13      	cbnz	r3, d7c82 <_strtod_l+0xba2>
   d7c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7c40:	9014      	str	r0, [sp, #80]	; 0x50
   d7c42:	9315      	str	r3, [sp, #84]	; 0x54
   d7c44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d7c48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7c50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d7c54:	1a9b      	subs	r3, r3, r2
   d7c56:	930d      	str	r3, [sp, #52]	; 0x34
   d7c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7c5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d7c60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d7c64:	f000 ff50 	bl	d8b08 <__ulp>
   d7c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7c6c:	ec53 2b10 	vmov	r2, r3, d0
   d7c70:	f7fe fe62 	bl	d6938 <__aeabi_dmul>
   d7c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7c78:	f7fe fca8 	bl	d65cc <__adddf3>
   d7c7c:	4682      	mov	sl, r0
   d7c7e:	468b      	mov	fp, r1
   d7c80:	e78f      	b.n	d7ba2 <_strtod_l+0xac2>
   d7c82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d7c86:	e7dd      	b.n	d7c44 <_strtod_l+0xb64>
   d7c88:	a311      	add	r3, pc, #68	; (adr r3, d7cd0 <_strtod_l+0xbf0>)
   d7c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c8e:	f7ff f8c5 	bl	d6e1c <__aeabi_dcmplt>
   d7c92:	e7b4      	b.n	d7bfe <_strtod_l+0xb1e>
   d7c94:	2300      	movs	r3, #0
   d7c96:	930e      	str	r3, [sp, #56]	; 0x38
   d7c98:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7c9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7c9c:	6013      	str	r3, [r2, #0]
   d7c9e:	f7ff ba65 	b.w	d716c <_strtod_l+0x8c>
   d7ca2:	2b65      	cmp	r3, #101	; 0x65
   d7ca4:	f43f ab5d 	beq.w	d7362 <_strtod_l+0x282>
   d7ca8:	2b45      	cmp	r3, #69	; 0x45
   d7caa:	f43f ab5a 	beq.w	d7362 <_strtod_l+0x282>
   d7cae:	2201      	movs	r2, #1
   d7cb0:	f7ff bb92 	b.w	d73d8 <_strtod_l+0x2f8>
   d7cb4:	f3af 8000 	nop.w
   d7cb8:	94a03595 	.word	0x94a03595
   d7cbc:	3fdfffff 	.word	0x3fdfffff
   d7cc0:	35afe535 	.word	0x35afe535
   d7cc4:	3fe00000 	.word	0x3fe00000
   d7cc8:	ffc00000 	.word	0xffc00000
   d7ccc:	41dfffff 	.word	0x41dfffff
   d7cd0:	94a03595 	.word	0x94a03595
   d7cd4:	3fcfffff 	.word	0x3fcfffff
   d7cd8:	3ff00000 	.word	0x3ff00000
   d7cdc:	7ff00000 	.word	0x7ff00000
   d7ce0:	7fe00000 	.word	0x7fe00000
   d7ce4:	7c9fffff 	.word	0x7c9fffff
   d7ce8:	3fe00000 	.word	0x3fe00000
   d7cec:	bff00000 	.word	0xbff00000
   d7cf0:	7fefffff 	.word	0x7fefffff

000d7cf4 <strtod>:
   d7cf4:	460a      	mov	r2, r1
   d7cf6:	4601      	mov	r1, r0
   d7cf8:	4802      	ldr	r0, [pc, #8]	; (d7d04 <strtod+0x10>)
   d7cfa:	4b03      	ldr	r3, [pc, #12]	; (d7d08 <strtod+0x14>)
   d7cfc:	6800      	ldr	r0, [r0, #0]
   d7cfe:	f7ff b9ef 	b.w	d70e0 <_strtod_l>
   d7d02:	bf00      	nop
   d7d04:	2003e250 	.word	0x2003e250
   d7d08:	2003e2bc 	.word	0x2003e2bc

000d7d0c <__strtok_r>:
   d7d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d0e:	b908      	cbnz	r0, d7d14 <__strtok_r+0x8>
   d7d10:	6810      	ldr	r0, [r2, #0]
   d7d12:	b188      	cbz	r0, d7d38 <__strtok_r+0x2c>
   d7d14:	4604      	mov	r4, r0
   d7d16:	4620      	mov	r0, r4
   d7d18:	f814 5b01 	ldrb.w	r5, [r4], #1
   d7d1c:	460f      	mov	r7, r1
   d7d1e:	f817 6b01 	ldrb.w	r6, [r7], #1
   d7d22:	b91e      	cbnz	r6, d7d2c <__strtok_r+0x20>
   d7d24:	b965      	cbnz	r5, d7d40 <__strtok_r+0x34>
   d7d26:	6015      	str	r5, [r2, #0]
   d7d28:	4628      	mov	r0, r5
   d7d2a:	e005      	b.n	d7d38 <__strtok_r+0x2c>
   d7d2c:	42b5      	cmp	r5, r6
   d7d2e:	d1f6      	bne.n	d7d1e <__strtok_r+0x12>
   d7d30:	2b00      	cmp	r3, #0
   d7d32:	d1f0      	bne.n	d7d16 <__strtok_r+0xa>
   d7d34:	6014      	str	r4, [r2, #0]
   d7d36:	7003      	strb	r3, [r0, #0]
   d7d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d3a:	461c      	mov	r4, r3
   d7d3c:	e00c      	b.n	d7d58 <__strtok_r+0x4c>
   d7d3e:	b915      	cbnz	r5, d7d46 <__strtok_r+0x3a>
   d7d40:	f814 3b01 	ldrb.w	r3, [r4], #1
   d7d44:	460e      	mov	r6, r1
   d7d46:	f816 5b01 	ldrb.w	r5, [r6], #1
   d7d4a:	42ab      	cmp	r3, r5
   d7d4c:	d1f7      	bne.n	d7d3e <__strtok_r+0x32>
   d7d4e:	2b00      	cmp	r3, #0
   d7d50:	d0f3      	beq.n	d7d3a <__strtok_r+0x2e>
   d7d52:	2300      	movs	r3, #0
   d7d54:	f804 3c01 	strb.w	r3, [r4, #-1]
   d7d58:	6014      	str	r4, [r2, #0]
   d7d5a:	e7ed      	b.n	d7d38 <__strtok_r+0x2c>

000d7d5c <strtok_r>:
   d7d5c:	2301      	movs	r3, #1
   d7d5e:	f7ff bfd5 	b.w	d7d0c <__strtok_r>
	...

000d7d64 <__register_exitproc>:
   d7d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7d68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d7e24 <__register_exitproc+0xc0>
   d7d6c:	4606      	mov	r6, r0
   d7d6e:	f8d8 0000 	ldr.w	r0, [r8]
   d7d72:	461f      	mov	r7, r3
   d7d74:	460d      	mov	r5, r1
   d7d76:	4691      	mov	r9, r2
   d7d78:	f000 fbb4 	bl	d84e4 <__retarget_lock_acquire_recursive>
   d7d7c:	4b25      	ldr	r3, [pc, #148]	; (d7e14 <__register_exitproc+0xb0>)
   d7d7e:	681c      	ldr	r4, [r3, #0]
   d7d80:	b934      	cbnz	r4, d7d90 <__register_exitproc+0x2c>
   d7d82:	4c25      	ldr	r4, [pc, #148]	; (d7e18 <__register_exitproc+0xb4>)
   d7d84:	601c      	str	r4, [r3, #0]
   d7d86:	4b25      	ldr	r3, [pc, #148]	; (d7e1c <__register_exitproc+0xb8>)
   d7d88:	b113      	cbz	r3, d7d90 <__register_exitproc+0x2c>
   d7d8a:	681b      	ldr	r3, [r3, #0]
   d7d8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7d90:	6863      	ldr	r3, [r4, #4]
   d7d92:	2b1f      	cmp	r3, #31
   d7d94:	dd07      	ble.n	d7da6 <__register_exitproc+0x42>
   d7d96:	f8d8 0000 	ldr.w	r0, [r8]
   d7d9a:	f000 fba5 	bl	d84e8 <__retarget_lock_release_recursive>
   d7d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7da6:	b34e      	cbz	r6, d7dfc <__register_exitproc+0x98>
   d7da8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d7dac:	b988      	cbnz	r0, d7dd2 <__register_exitproc+0x6e>
   d7dae:	4b1c      	ldr	r3, [pc, #112]	; (d7e20 <__register_exitproc+0xbc>)
   d7db0:	b923      	cbnz	r3, d7dbc <__register_exitproc+0x58>
   d7db2:	f8d8 0000 	ldr.w	r0, [r8]
   d7db6:	f000 fb96 	bl	d84e6 <__retarget_lock_release>
   d7dba:	e7f0      	b.n	d7d9e <__register_exitproc+0x3a>
   d7dbc:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7dc0:	f7fd fadc 	bl	d537c <malloc>
   d7dc4:	2800      	cmp	r0, #0
   d7dc6:	d0f4      	beq.n	d7db2 <__register_exitproc+0x4e>
   d7dc8:	2300      	movs	r3, #0
   d7dca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d7dce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d7dd2:	6863      	ldr	r3, [r4, #4]
   d7dd4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7dd8:	2201      	movs	r2, #1
   d7dda:	409a      	lsls	r2, r3
   d7ddc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7de0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d7de4:	4313      	orrs	r3, r2
   d7de6:	2e02      	cmp	r6, #2
   d7de8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d7dec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7df0:	bf02      	ittt	eq
   d7df2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d7df6:	431a      	orreq	r2, r3
   d7df8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d7dfc:	6863      	ldr	r3, [r4, #4]
   d7dfe:	f8d8 0000 	ldr.w	r0, [r8]
   d7e02:	1c5a      	adds	r2, r3, #1
   d7e04:	3302      	adds	r3, #2
   d7e06:	6062      	str	r2, [r4, #4]
   d7e08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d7e0c:	f000 fb6c 	bl	d84e8 <__retarget_lock_release_recursive>
   d7e10:	2000      	movs	r0, #0
   d7e12:	e7c6      	b.n	d7da2 <__register_exitproc+0x3e>
   d7e14:	2003e7e0 	.word	0x2003e7e0
   d7e18:	2003e754 	.word	0x2003e754
   d7e1c:	00000000 	.word	0x00000000
   d7e20:	000d537d 	.word	0x000d537d
   d7e24:	2003e2b4 	.word	0x2003e2b4

000d7e28 <rshift>:
   d7e28:	6903      	ldr	r3, [r0, #16]
   d7e2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d7e2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7e32:	ea4f 1261 	mov.w	r2, r1, asr #5
   d7e36:	f100 0414 	add.w	r4, r0, #20
   d7e3a:	dd45      	ble.n	d7ec8 <rshift+0xa0>
   d7e3c:	f011 011f 	ands.w	r1, r1, #31
   d7e40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d7e44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d7e48:	d10c      	bne.n	d7e64 <rshift+0x3c>
   d7e4a:	f100 0710 	add.w	r7, r0, #16
   d7e4e:	4629      	mov	r1, r5
   d7e50:	42b1      	cmp	r1, r6
   d7e52:	d334      	bcc.n	d7ebe <rshift+0x96>
   d7e54:	1a9b      	subs	r3, r3, r2
   d7e56:	009b      	lsls	r3, r3, #2
   d7e58:	1eea      	subs	r2, r5, #3
   d7e5a:	4296      	cmp	r6, r2
   d7e5c:	bf38      	it	cc
   d7e5e:	2300      	movcc	r3, #0
   d7e60:	4423      	add	r3, r4
   d7e62:	e015      	b.n	d7e90 <rshift+0x68>
   d7e64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d7e68:	f1c1 0820 	rsb	r8, r1, #32
   d7e6c:	40cf      	lsrs	r7, r1
   d7e6e:	f105 0e04 	add.w	lr, r5, #4
   d7e72:	46a1      	mov	r9, r4
   d7e74:	4576      	cmp	r6, lr
   d7e76:	46f4      	mov	ip, lr
   d7e78:	d815      	bhi.n	d7ea6 <rshift+0x7e>
   d7e7a:	1a9b      	subs	r3, r3, r2
   d7e7c:	009a      	lsls	r2, r3, #2
   d7e7e:	3a04      	subs	r2, #4
   d7e80:	3501      	adds	r5, #1
   d7e82:	42ae      	cmp	r6, r5
   d7e84:	bf38      	it	cc
   d7e86:	2200      	movcc	r2, #0
   d7e88:	18a3      	adds	r3, r4, r2
   d7e8a:	50a7      	str	r7, [r4, r2]
   d7e8c:	b107      	cbz	r7, d7e90 <rshift+0x68>
   d7e8e:	3304      	adds	r3, #4
   d7e90:	1b1a      	subs	r2, r3, r4
   d7e92:	42a3      	cmp	r3, r4
   d7e94:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d7e98:	bf08      	it	eq
   d7e9a:	2300      	moveq	r3, #0
   d7e9c:	6102      	str	r2, [r0, #16]
   d7e9e:	bf08      	it	eq
   d7ea0:	6143      	streq	r3, [r0, #20]
   d7ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7ea6:	f8dc c000 	ldr.w	ip, [ip]
   d7eaa:	fa0c fc08 	lsl.w	ip, ip, r8
   d7eae:	ea4c 0707 	orr.w	r7, ip, r7
   d7eb2:	f849 7b04 	str.w	r7, [r9], #4
   d7eb6:	f85e 7b04 	ldr.w	r7, [lr], #4
   d7eba:	40cf      	lsrs	r7, r1
   d7ebc:	e7da      	b.n	d7e74 <rshift+0x4c>
   d7ebe:	f851 cb04 	ldr.w	ip, [r1], #4
   d7ec2:	f847 cf04 	str.w	ip, [r7, #4]!
   d7ec6:	e7c3      	b.n	d7e50 <rshift+0x28>
   d7ec8:	4623      	mov	r3, r4
   d7eca:	e7e1      	b.n	d7e90 <rshift+0x68>

000d7ecc <__hexdig_fun>:
   d7ecc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7ed0:	2b09      	cmp	r3, #9
   d7ed2:	d802      	bhi.n	d7eda <__hexdig_fun+0xe>
   d7ed4:	3820      	subs	r0, #32
   d7ed6:	b2c0      	uxtb	r0, r0
   d7ed8:	4770      	bx	lr
   d7eda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d7ede:	2b05      	cmp	r3, #5
   d7ee0:	d801      	bhi.n	d7ee6 <__hexdig_fun+0x1a>
   d7ee2:	3847      	subs	r0, #71	; 0x47
   d7ee4:	e7f7      	b.n	d7ed6 <__hexdig_fun+0xa>
   d7ee6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d7eea:	2b05      	cmp	r3, #5
   d7eec:	d801      	bhi.n	d7ef2 <__hexdig_fun+0x26>
   d7eee:	3827      	subs	r0, #39	; 0x27
   d7ef0:	e7f1      	b.n	d7ed6 <__hexdig_fun+0xa>
   d7ef2:	2000      	movs	r0, #0
   d7ef4:	4770      	bx	lr
	...

000d7ef8 <__gethex>:
   d7ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7efc:	ed2d 8b02 	vpush	{d8}
   d7f00:	b089      	sub	sp, #36	; 0x24
   d7f02:	ee08 0a10 	vmov	s16, r0
   d7f06:	9304      	str	r3, [sp, #16]
   d7f08:	4bbc      	ldr	r3, [pc, #752]	; (d81fc <__gethex+0x304>)
   d7f0a:	681b      	ldr	r3, [r3, #0]
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	4618      	mov	r0, r3
   d7f10:	468b      	mov	fp, r1
   d7f12:	4690      	mov	r8, r2
   d7f14:	f7ff f8ab 	bl	d706e <strlen>
   d7f18:	9b01      	ldr	r3, [sp, #4]
   d7f1a:	f8db 2000 	ldr.w	r2, [fp]
   d7f1e:	4403      	add	r3, r0
   d7f20:	4682      	mov	sl, r0
   d7f22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d7f26:	9305      	str	r3, [sp, #20]
   d7f28:	1c93      	adds	r3, r2, #2
   d7f2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d7f2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d7f32:	32fe      	adds	r2, #254	; 0xfe
   d7f34:	18d1      	adds	r1, r2, r3
   d7f36:	461f      	mov	r7, r3
   d7f38:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7f3c:	9100      	str	r1, [sp, #0]
   d7f3e:	2830      	cmp	r0, #48	; 0x30
   d7f40:	d0f8      	beq.n	d7f34 <__gethex+0x3c>
   d7f42:	f7ff ffc3 	bl	d7ecc <__hexdig_fun>
   d7f46:	4604      	mov	r4, r0
   d7f48:	2800      	cmp	r0, #0
   d7f4a:	d13a      	bne.n	d7fc2 <__gethex+0xca>
   d7f4c:	9901      	ldr	r1, [sp, #4]
   d7f4e:	4652      	mov	r2, sl
   d7f50:	4638      	mov	r0, r7
   d7f52:	f7ff f894 	bl	d707e <strncmp>
   d7f56:	4605      	mov	r5, r0
   d7f58:	2800      	cmp	r0, #0
   d7f5a:	d168      	bne.n	d802e <__gethex+0x136>
   d7f5c:	f817 000a 	ldrb.w	r0, [r7, sl]
   d7f60:	eb07 060a 	add.w	r6, r7, sl
   d7f64:	f7ff ffb2 	bl	d7ecc <__hexdig_fun>
   d7f68:	2800      	cmp	r0, #0
   d7f6a:	d062      	beq.n	d8032 <__gethex+0x13a>
   d7f6c:	4633      	mov	r3, r6
   d7f6e:	7818      	ldrb	r0, [r3, #0]
   d7f70:	2830      	cmp	r0, #48	; 0x30
   d7f72:	461f      	mov	r7, r3
   d7f74:	f103 0301 	add.w	r3, r3, #1
   d7f78:	d0f9      	beq.n	d7f6e <__gethex+0x76>
   d7f7a:	f7ff ffa7 	bl	d7ecc <__hexdig_fun>
   d7f7e:	2301      	movs	r3, #1
   d7f80:	fab0 f480 	clz	r4, r0
   d7f84:	0964      	lsrs	r4, r4, #5
   d7f86:	4635      	mov	r5, r6
   d7f88:	9300      	str	r3, [sp, #0]
   d7f8a:	463a      	mov	r2, r7
   d7f8c:	4616      	mov	r6, r2
   d7f8e:	3201      	adds	r2, #1
   d7f90:	7830      	ldrb	r0, [r6, #0]
   d7f92:	f7ff ff9b 	bl	d7ecc <__hexdig_fun>
   d7f96:	2800      	cmp	r0, #0
   d7f98:	d1f8      	bne.n	d7f8c <__gethex+0x94>
   d7f9a:	9901      	ldr	r1, [sp, #4]
   d7f9c:	4652      	mov	r2, sl
   d7f9e:	4630      	mov	r0, r6
   d7fa0:	f7ff f86d 	bl	d707e <strncmp>
   d7fa4:	b980      	cbnz	r0, d7fc8 <__gethex+0xd0>
   d7fa6:	b94d      	cbnz	r5, d7fbc <__gethex+0xc4>
   d7fa8:	eb06 050a 	add.w	r5, r6, sl
   d7fac:	462a      	mov	r2, r5
   d7fae:	4616      	mov	r6, r2
   d7fb0:	3201      	adds	r2, #1
   d7fb2:	7830      	ldrb	r0, [r6, #0]
   d7fb4:	f7ff ff8a 	bl	d7ecc <__hexdig_fun>
   d7fb8:	2800      	cmp	r0, #0
   d7fba:	d1f8      	bne.n	d7fae <__gethex+0xb6>
   d7fbc:	1bad      	subs	r5, r5, r6
   d7fbe:	00ad      	lsls	r5, r5, #2
   d7fc0:	e004      	b.n	d7fcc <__gethex+0xd4>
   d7fc2:	2400      	movs	r4, #0
   d7fc4:	4625      	mov	r5, r4
   d7fc6:	e7e0      	b.n	d7f8a <__gethex+0x92>
   d7fc8:	2d00      	cmp	r5, #0
   d7fca:	d1f7      	bne.n	d7fbc <__gethex+0xc4>
   d7fcc:	7833      	ldrb	r3, [r6, #0]
   d7fce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d7fd2:	2b50      	cmp	r3, #80	; 0x50
   d7fd4:	d13b      	bne.n	d804e <__gethex+0x156>
   d7fd6:	7873      	ldrb	r3, [r6, #1]
   d7fd8:	2b2b      	cmp	r3, #43	; 0x2b
   d7fda:	d02c      	beq.n	d8036 <__gethex+0x13e>
   d7fdc:	2b2d      	cmp	r3, #45	; 0x2d
   d7fde:	d02e      	beq.n	d803e <__gethex+0x146>
   d7fe0:	1c71      	adds	r1, r6, #1
   d7fe2:	f04f 0900 	mov.w	r9, #0
   d7fe6:	7808      	ldrb	r0, [r1, #0]
   d7fe8:	f7ff ff70 	bl	d7ecc <__hexdig_fun>
   d7fec:	1e43      	subs	r3, r0, #1
   d7fee:	b2db      	uxtb	r3, r3
   d7ff0:	2b18      	cmp	r3, #24
   d7ff2:	d82c      	bhi.n	d804e <__gethex+0x156>
   d7ff4:	f1a0 0210 	sub.w	r2, r0, #16
   d7ff8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d7ffc:	f7ff ff66 	bl	d7ecc <__hexdig_fun>
   d8000:	1e43      	subs	r3, r0, #1
   d8002:	b2db      	uxtb	r3, r3
   d8004:	2b18      	cmp	r3, #24
   d8006:	d91d      	bls.n	d8044 <__gethex+0x14c>
   d8008:	f1b9 0f00 	cmp.w	r9, #0
   d800c:	d000      	beq.n	d8010 <__gethex+0x118>
   d800e:	4252      	negs	r2, r2
   d8010:	4415      	add	r5, r2
   d8012:	f8cb 1000 	str.w	r1, [fp]
   d8016:	b1e4      	cbz	r4, d8052 <__gethex+0x15a>
   d8018:	9b00      	ldr	r3, [sp, #0]
   d801a:	2b00      	cmp	r3, #0
   d801c:	bf14      	ite	ne
   d801e:	2700      	movne	r7, #0
   d8020:	2706      	moveq	r7, #6
   d8022:	4638      	mov	r0, r7
   d8024:	b009      	add	sp, #36	; 0x24
   d8026:	ecbd 8b02 	vpop	{d8}
   d802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d802e:	463e      	mov	r6, r7
   d8030:	4625      	mov	r5, r4
   d8032:	2401      	movs	r4, #1
   d8034:	e7ca      	b.n	d7fcc <__gethex+0xd4>
   d8036:	f04f 0900 	mov.w	r9, #0
   d803a:	1cb1      	adds	r1, r6, #2
   d803c:	e7d3      	b.n	d7fe6 <__gethex+0xee>
   d803e:	f04f 0901 	mov.w	r9, #1
   d8042:	e7fa      	b.n	d803a <__gethex+0x142>
   d8044:	230a      	movs	r3, #10
   d8046:	fb03 0202 	mla	r2, r3, r2, r0
   d804a:	3a10      	subs	r2, #16
   d804c:	e7d4      	b.n	d7ff8 <__gethex+0x100>
   d804e:	4631      	mov	r1, r6
   d8050:	e7df      	b.n	d8012 <__gethex+0x11a>
   d8052:	1bf3      	subs	r3, r6, r7
   d8054:	3b01      	subs	r3, #1
   d8056:	4621      	mov	r1, r4
   d8058:	2b07      	cmp	r3, #7
   d805a:	dc52      	bgt.n	d8102 <__gethex+0x20a>
   d805c:	ee18 0a10 	vmov	r0, s16
   d8060:	f000 fa55 	bl	d850e <_Balloc>
   d8064:	f04f 0b00 	mov.w	fp, #0
   d8068:	f100 0914 	add.w	r9, r0, #20
   d806c:	f1ca 0301 	rsb	r3, sl, #1
   d8070:	4604      	mov	r4, r0
   d8072:	f8cd 9008 	str.w	r9, [sp, #8]
   d8076:	f8cd b000 	str.w	fp, [sp]
   d807a:	9306      	str	r3, [sp, #24]
   d807c:	42b7      	cmp	r7, r6
   d807e:	d343      	bcc.n	d8108 <__gethex+0x210>
   d8080:	9802      	ldr	r0, [sp, #8]
   d8082:	9b00      	ldr	r3, [sp, #0]
   d8084:	f840 3b04 	str.w	r3, [r0], #4
   d8088:	eba0 0009 	sub.w	r0, r0, r9
   d808c:	1080      	asrs	r0, r0, #2
   d808e:	0146      	lsls	r6, r0, #5
   d8090:	6120      	str	r0, [r4, #16]
   d8092:	4618      	mov	r0, r3
   d8094:	f000 fb02 	bl	d869c <__hi0bits>
   d8098:	1a30      	subs	r0, r6, r0
   d809a:	f8d8 6000 	ldr.w	r6, [r8]
   d809e:	42b0      	cmp	r0, r6
   d80a0:	dd66      	ble.n	d8170 <__gethex+0x278>
   d80a2:	1b87      	subs	r7, r0, r6
   d80a4:	4639      	mov	r1, r7
   d80a6:	4620      	mov	r0, r4
   d80a8:	f000 fe50 	bl	d8d4c <__any_on>
   d80ac:	4682      	mov	sl, r0
   d80ae:	b1a8      	cbz	r0, d80dc <__gethex+0x1e4>
   d80b0:	1e7b      	subs	r3, r7, #1
   d80b2:	1159      	asrs	r1, r3, #5
   d80b4:	f003 021f 	and.w	r2, r3, #31
   d80b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d80bc:	f04f 0a01 	mov.w	sl, #1
   d80c0:	fa0a f202 	lsl.w	r2, sl, r2
   d80c4:	420a      	tst	r2, r1
   d80c6:	d009      	beq.n	d80dc <__gethex+0x1e4>
   d80c8:	4553      	cmp	r3, sl
   d80ca:	dd05      	ble.n	d80d8 <__gethex+0x1e0>
   d80cc:	1eb9      	subs	r1, r7, #2
   d80ce:	4620      	mov	r0, r4
   d80d0:	f000 fe3c 	bl	d8d4c <__any_on>
   d80d4:	2800      	cmp	r0, #0
   d80d6:	d148      	bne.n	d816a <__gethex+0x272>
   d80d8:	f04f 0a02 	mov.w	sl, #2
   d80dc:	4639      	mov	r1, r7
   d80de:	4620      	mov	r0, r4
   d80e0:	f7ff fea2 	bl	d7e28 <rshift>
   d80e4:	443d      	add	r5, r7
   d80e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d80ea:	42ab      	cmp	r3, r5
   d80ec:	da4f      	bge.n	d818e <__gethex+0x296>
   d80ee:	ee18 0a10 	vmov	r0, s16
   d80f2:	4621      	mov	r1, r4
   d80f4:	f000 fa3f 	bl	d8576 <_Bfree>
   d80f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d80fa:	2300      	movs	r3, #0
   d80fc:	6013      	str	r3, [r2, #0]
   d80fe:	27a3      	movs	r7, #163	; 0xa3
   d8100:	e78f      	b.n	d8022 <__gethex+0x12a>
   d8102:	3101      	adds	r1, #1
   d8104:	105b      	asrs	r3, r3, #1
   d8106:	e7a7      	b.n	d8058 <__gethex+0x160>
   d8108:	1e73      	subs	r3, r6, #1
   d810a:	9a05      	ldr	r2, [sp, #20]
   d810c:	9303      	str	r3, [sp, #12]
   d810e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8112:	4293      	cmp	r3, r2
   d8114:	d019      	beq.n	d814a <__gethex+0x252>
   d8116:	f1bb 0f20 	cmp.w	fp, #32
   d811a:	d107      	bne.n	d812c <__gethex+0x234>
   d811c:	9b02      	ldr	r3, [sp, #8]
   d811e:	9a00      	ldr	r2, [sp, #0]
   d8120:	f843 2b04 	str.w	r2, [r3], #4
   d8124:	9302      	str	r3, [sp, #8]
   d8126:	2300      	movs	r3, #0
   d8128:	9300      	str	r3, [sp, #0]
   d812a:	469b      	mov	fp, r3
   d812c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8130:	f7ff fecc 	bl	d7ecc <__hexdig_fun>
   d8134:	9b00      	ldr	r3, [sp, #0]
   d8136:	f000 000f 	and.w	r0, r0, #15
   d813a:	fa00 f00b 	lsl.w	r0, r0, fp
   d813e:	4303      	orrs	r3, r0
   d8140:	9300      	str	r3, [sp, #0]
   d8142:	f10b 0b04 	add.w	fp, fp, #4
   d8146:	9b03      	ldr	r3, [sp, #12]
   d8148:	e00d      	b.n	d8166 <__gethex+0x26e>
   d814a:	9b03      	ldr	r3, [sp, #12]
   d814c:	9a06      	ldr	r2, [sp, #24]
   d814e:	4413      	add	r3, r2
   d8150:	42bb      	cmp	r3, r7
   d8152:	d3e0      	bcc.n	d8116 <__gethex+0x21e>
   d8154:	4618      	mov	r0, r3
   d8156:	9901      	ldr	r1, [sp, #4]
   d8158:	9307      	str	r3, [sp, #28]
   d815a:	4652      	mov	r2, sl
   d815c:	f7fe ff8f 	bl	d707e <strncmp>
   d8160:	9b07      	ldr	r3, [sp, #28]
   d8162:	2800      	cmp	r0, #0
   d8164:	d1d7      	bne.n	d8116 <__gethex+0x21e>
   d8166:	461e      	mov	r6, r3
   d8168:	e788      	b.n	d807c <__gethex+0x184>
   d816a:	f04f 0a03 	mov.w	sl, #3
   d816e:	e7b5      	b.n	d80dc <__gethex+0x1e4>
   d8170:	da0a      	bge.n	d8188 <__gethex+0x290>
   d8172:	1a37      	subs	r7, r6, r0
   d8174:	4621      	mov	r1, r4
   d8176:	ee18 0a10 	vmov	r0, s16
   d817a:	463a      	mov	r2, r7
   d817c:	f000 fbd2 	bl	d8924 <__lshift>
   d8180:	1bed      	subs	r5, r5, r7
   d8182:	4604      	mov	r4, r0
   d8184:	f100 0914 	add.w	r9, r0, #20
   d8188:	f04f 0a00 	mov.w	sl, #0
   d818c:	e7ab      	b.n	d80e6 <__gethex+0x1ee>
   d818e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8192:	42a8      	cmp	r0, r5
   d8194:	dd6d      	ble.n	d8272 <__gethex+0x37a>
   d8196:	1b45      	subs	r5, r0, r5
   d8198:	42ae      	cmp	r6, r5
   d819a:	dc31      	bgt.n	d8200 <__gethex+0x308>
   d819c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d81a0:	2b02      	cmp	r3, #2
   d81a2:	d023      	beq.n	d81ec <__gethex+0x2f4>
   d81a4:	2b03      	cmp	r3, #3
   d81a6:	d025      	beq.n	d81f4 <__gethex+0x2fc>
   d81a8:	2b01      	cmp	r3, #1
   d81aa:	d115      	bne.n	d81d8 <__gethex+0x2e0>
   d81ac:	42ae      	cmp	r6, r5
   d81ae:	d113      	bne.n	d81d8 <__gethex+0x2e0>
   d81b0:	2e01      	cmp	r6, #1
   d81b2:	d10b      	bne.n	d81cc <__gethex+0x2d4>
   d81b4:	9a04      	ldr	r2, [sp, #16]
   d81b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d81ba:	6013      	str	r3, [r2, #0]
   d81bc:	2301      	movs	r3, #1
   d81be:	6123      	str	r3, [r4, #16]
   d81c0:	f8c9 3000 	str.w	r3, [r9]
   d81c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d81c6:	2762      	movs	r7, #98	; 0x62
   d81c8:	601c      	str	r4, [r3, #0]
   d81ca:	e72a      	b.n	d8022 <__gethex+0x12a>
   d81cc:	1e71      	subs	r1, r6, #1
   d81ce:	4620      	mov	r0, r4
   d81d0:	f000 fdbc 	bl	d8d4c <__any_on>
   d81d4:	2800      	cmp	r0, #0
   d81d6:	d1ed      	bne.n	d81b4 <__gethex+0x2bc>
   d81d8:	ee18 0a10 	vmov	r0, s16
   d81dc:	4621      	mov	r1, r4
   d81de:	f000 f9ca 	bl	d8576 <_Bfree>
   d81e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d81e4:	2300      	movs	r3, #0
   d81e6:	6013      	str	r3, [r2, #0]
   d81e8:	2750      	movs	r7, #80	; 0x50
   d81ea:	e71a      	b.n	d8022 <__gethex+0x12a>
   d81ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d81ee:	2b00      	cmp	r3, #0
   d81f0:	d1f2      	bne.n	d81d8 <__gethex+0x2e0>
   d81f2:	e7df      	b.n	d81b4 <__gethex+0x2bc>
   d81f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d81f6:	2b00      	cmp	r3, #0
   d81f8:	d1dc      	bne.n	d81b4 <__gethex+0x2bc>
   d81fa:	e7ed      	b.n	d81d8 <__gethex+0x2e0>
   d81fc:	000d924c 	.word	0x000d924c
   d8200:	1e6f      	subs	r7, r5, #1
   d8202:	f1ba 0f00 	cmp.w	sl, #0
   d8206:	d131      	bne.n	d826c <__gethex+0x374>
   d8208:	b127      	cbz	r7, d8214 <__gethex+0x31c>
   d820a:	4639      	mov	r1, r7
   d820c:	4620      	mov	r0, r4
   d820e:	f000 fd9d 	bl	d8d4c <__any_on>
   d8212:	4682      	mov	sl, r0
   d8214:	117b      	asrs	r3, r7, #5
   d8216:	2101      	movs	r1, #1
   d8218:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d821c:	f007 071f 	and.w	r7, r7, #31
   d8220:	fa01 f707 	lsl.w	r7, r1, r7
   d8224:	421f      	tst	r7, r3
   d8226:	4629      	mov	r1, r5
   d8228:	4620      	mov	r0, r4
   d822a:	bf18      	it	ne
   d822c:	f04a 0a02 	orrne.w	sl, sl, #2
   d8230:	1b76      	subs	r6, r6, r5
   d8232:	f7ff fdf9 	bl	d7e28 <rshift>
   d8236:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d823a:	2702      	movs	r7, #2
   d823c:	f1ba 0f00 	cmp.w	sl, #0
   d8240:	d048      	beq.n	d82d4 <__gethex+0x3dc>
   d8242:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8246:	2b02      	cmp	r3, #2
   d8248:	d015      	beq.n	d8276 <__gethex+0x37e>
   d824a:	2b03      	cmp	r3, #3
   d824c:	d017      	beq.n	d827e <__gethex+0x386>
   d824e:	2b01      	cmp	r3, #1
   d8250:	d109      	bne.n	d8266 <__gethex+0x36e>
   d8252:	f01a 0f02 	tst.w	sl, #2
   d8256:	d006      	beq.n	d8266 <__gethex+0x36e>
   d8258:	f8d9 0000 	ldr.w	r0, [r9]
   d825c:	ea4a 0a00 	orr.w	sl, sl, r0
   d8260:	f01a 0f01 	tst.w	sl, #1
   d8264:	d10e      	bne.n	d8284 <__gethex+0x38c>
   d8266:	f047 0710 	orr.w	r7, r7, #16
   d826a:	e033      	b.n	d82d4 <__gethex+0x3dc>
   d826c:	f04f 0a01 	mov.w	sl, #1
   d8270:	e7d0      	b.n	d8214 <__gethex+0x31c>
   d8272:	2701      	movs	r7, #1
   d8274:	e7e2      	b.n	d823c <__gethex+0x344>
   d8276:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8278:	f1c3 0301 	rsb	r3, r3, #1
   d827c:	9315      	str	r3, [sp, #84]	; 0x54
   d827e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8280:	2b00      	cmp	r3, #0
   d8282:	d0f0      	beq.n	d8266 <__gethex+0x36e>
   d8284:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8288:	f104 0314 	add.w	r3, r4, #20
   d828c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d8290:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d8294:	f04f 0c00 	mov.w	ip, #0
   d8298:	4618      	mov	r0, r3
   d829a:	f853 2b04 	ldr.w	r2, [r3], #4
   d829e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d82a2:	d01c      	beq.n	d82de <__gethex+0x3e6>
   d82a4:	3201      	adds	r2, #1
   d82a6:	6002      	str	r2, [r0, #0]
   d82a8:	2f02      	cmp	r7, #2
   d82aa:	f104 0314 	add.w	r3, r4, #20
   d82ae:	d13a      	bne.n	d8326 <__gethex+0x42e>
   d82b0:	f8d8 2000 	ldr.w	r2, [r8]
   d82b4:	3a01      	subs	r2, #1
   d82b6:	42b2      	cmp	r2, r6
   d82b8:	d10a      	bne.n	d82d0 <__gethex+0x3d8>
   d82ba:	1171      	asrs	r1, r6, #5
   d82bc:	2201      	movs	r2, #1
   d82be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d82c2:	f006 061f 	and.w	r6, r6, #31
   d82c6:	fa02 f606 	lsl.w	r6, r2, r6
   d82ca:	421e      	tst	r6, r3
   d82cc:	bf18      	it	ne
   d82ce:	4617      	movne	r7, r2
   d82d0:	f047 0720 	orr.w	r7, r7, #32
   d82d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d82d6:	601c      	str	r4, [r3, #0]
   d82d8:	9b04      	ldr	r3, [sp, #16]
   d82da:	601d      	str	r5, [r3, #0]
   d82dc:	e6a1      	b.n	d8022 <__gethex+0x12a>
   d82de:	4299      	cmp	r1, r3
   d82e0:	f843 cc04 	str.w	ip, [r3, #-4]
   d82e4:	d8d8      	bhi.n	d8298 <__gethex+0x3a0>
   d82e6:	68a3      	ldr	r3, [r4, #8]
   d82e8:	4599      	cmp	r9, r3
   d82ea:	db14      	blt.n	d8316 <__gethex+0x41e>
   d82ec:	6861      	ldr	r1, [r4, #4]
   d82ee:	ee18 0a10 	vmov	r0, s16
   d82f2:	3101      	adds	r1, #1
   d82f4:	f000 f90b 	bl	d850e <_Balloc>
   d82f8:	6922      	ldr	r2, [r4, #16]
   d82fa:	3202      	adds	r2, #2
   d82fc:	f104 010c 	add.w	r1, r4, #12
   d8300:	4682      	mov	sl, r0
   d8302:	0092      	lsls	r2, r2, #2
   d8304:	300c      	adds	r0, #12
   d8306:	f7fe fe48 	bl	d6f9a <memcpy>
   d830a:	4621      	mov	r1, r4
   d830c:	ee18 0a10 	vmov	r0, s16
   d8310:	f000 f931 	bl	d8576 <_Bfree>
   d8314:	4654      	mov	r4, sl
   d8316:	6923      	ldr	r3, [r4, #16]
   d8318:	1c5a      	adds	r2, r3, #1
   d831a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d831e:	6122      	str	r2, [r4, #16]
   d8320:	2201      	movs	r2, #1
   d8322:	615a      	str	r2, [r3, #20]
   d8324:	e7c0      	b.n	d82a8 <__gethex+0x3b0>
   d8326:	6922      	ldr	r2, [r4, #16]
   d8328:	454a      	cmp	r2, r9
   d832a:	dd0b      	ble.n	d8344 <__gethex+0x44c>
   d832c:	2101      	movs	r1, #1
   d832e:	4620      	mov	r0, r4
   d8330:	f7ff fd7a 	bl	d7e28 <rshift>
   d8334:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8338:	3501      	adds	r5, #1
   d833a:	42ab      	cmp	r3, r5
   d833c:	f6ff aed7 	blt.w	d80ee <__gethex+0x1f6>
   d8340:	2701      	movs	r7, #1
   d8342:	e7c5      	b.n	d82d0 <__gethex+0x3d8>
   d8344:	f016 061f 	ands.w	r6, r6, #31
   d8348:	d0fa      	beq.n	d8340 <__gethex+0x448>
   d834a:	449b      	add	fp, r3
   d834c:	f1c6 0620 	rsb	r6, r6, #32
   d8350:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d8354:	f000 f9a2 	bl	d869c <__hi0bits>
   d8358:	42b0      	cmp	r0, r6
   d835a:	dbe7      	blt.n	d832c <__gethex+0x434>
   d835c:	e7f0      	b.n	d8340 <__gethex+0x448>
   d835e:	bf00      	nop

000d8360 <L_shift>:
   d8360:	f1c2 0208 	rsb	r2, r2, #8
   d8364:	0092      	lsls	r2, r2, #2
   d8366:	b570      	push	{r4, r5, r6, lr}
   d8368:	f1c2 0620 	rsb	r6, r2, #32
   d836c:	6843      	ldr	r3, [r0, #4]
   d836e:	6804      	ldr	r4, [r0, #0]
   d8370:	fa03 f506 	lsl.w	r5, r3, r6
   d8374:	432c      	orrs	r4, r5
   d8376:	40d3      	lsrs	r3, r2
   d8378:	6004      	str	r4, [r0, #0]
   d837a:	f840 3f04 	str.w	r3, [r0, #4]!
   d837e:	4288      	cmp	r0, r1
   d8380:	d3f4      	bcc.n	d836c <L_shift+0xc>
   d8382:	bd70      	pop	{r4, r5, r6, pc}

000d8384 <__match>:
   d8384:	b530      	push	{r4, r5, lr}
   d8386:	6803      	ldr	r3, [r0, #0]
   d8388:	3301      	adds	r3, #1
   d838a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d838e:	b914      	cbnz	r4, d8396 <__match+0x12>
   d8390:	6003      	str	r3, [r0, #0]
   d8392:	2001      	movs	r0, #1
   d8394:	bd30      	pop	{r4, r5, pc}
   d8396:	f813 2b01 	ldrb.w	r2, [r3], #1
   d839a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d839e:	2d19      	cmp	r5, #25
   d83a0:	bf98      	it	ls
   d83a2:	3220      	addls	r2, #32
   d83a4:	42a2      	cmp	r2, r4
   d83a6:	d0f0      	beq.n	d838a <__match+0x6>
   d83a8:	2000      	movs	r0, #0
   d83aa:	e7f3      	b.n	d8394 <__match+0x10>

000d83ac <__hexnan>:
   d83ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83b0:	680b      	ldr	r3, [r1, #0]
   d83b2:	6801      	ldr	r1, [r0, #0]
   d83b4:	115e      	asrs	r6, r3, #5
   d83b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d83ba:	f013 031f 	ands.w	r3, r3, #31
   d83be:	b087      	sub	sp, #28
   d83c0:	bf18      	it	ne
   d83c2:	3604      	addne	r6, #4
   d83c4:	2500      	movs	r5, #0
   d83c6:	1f37      	subs	r7, r6, #4
   d83c8:	4682      	mov	sl, r0
   d83ca:	4690      	mov	r8, r2
   d83cc:	9301      	str	r3, [sp, #4]
   d83ce:	f846 5c04 	str.w	r5, [r6, #-4]
   d83d2:	46b9      	mov	r9, r7
   d83d4:	463c      	mov	r4, r7
   d83d6:	9502      	str	r5, [sp, #8]
   d83d8:	46ab      	mov	fp, r5
   d83da:	784a      	ldrb	r2, [r1, #1]
   d83dc:	1c4b      	adds	r3, r1, #1
   d83de:	9303      	str	r3, [sp, #12]
   d83e0:	b342      	cbz	r2, d8434 <__hexnan+0x88>
   d83e2:	4610      	mov	r0, r2
   d83e4:	9105      	str	r1, [sp, #20]
   d83e6:	9204      	str	r2, [sp, #16]
   d83e8:	f7ff fd70 	bl	d7ecc <__hexdig_fun>
   d83ec:	2800      	cmp	r0, #0
   d83ee:	d14f      	bne.n	d8490 <__hexnan+0xe4>
   d83f0:	9a04      	ldr	r2, [sp, #16]
   d83f2:	9905      	ldr	r1, [sp, #20]
   d83f4:	2a20      	cmp	r2, #32
   d83f6:	d818      	bhi.n	d842a <__hexnan+0x7e>
   d83f8:	9b02      	ldr	r3, [sp, #8]
   d83fa:	459b      	cmp	fp, r3
   d83fc:	dd13      	ble.n	d8426 <__hexnan+0x7a>
   d83fe:	454c      	cmp	r4, r9
   d8400:	d206      	bcs.n	d8410 <__hexnan+0x64>
   d8402:	2d07      	cmp	r5, #7
   d8404:	dc04      	bgt.n	d8410 <__hexnan+0x64>
   d8406:	462a      	mov	r2, r5
   d8408:	4649      	mov	r1, r9
   d840a:	4620      	mov	r0, r4
   d840c:	f7ff ffa8 	bl	d8360 <L_shift>
   d8410:	4544      	cmp	r4, r8
   d8412:	d950      	bls.n	d84b6 <__hexnan+0x10a>
   d8414:	2300      	movs	r3, #0
   d8416:	f1a4 0904 	sub.w	r9, r4, #4
   d841a:	f844 3c04 	str.w	r3, [r4, #-4]
   d841e:	f8cd b008 	str.w	fp, [sp, #8]
   d8422:	464c      	mov	r4, r9
   d8424:	461d      	mov	r5, r3
   d8426:	9903      	ldr	r1, [sp, #12]
   d8428:	e7d7      	b.n	d83da <__hexnan+0x2e>
   d842a:	2a29      	cmp	r2, #41	; 0x29
   d842c:	d156      	bne.n	d84dc <__hexnan+0x130>
   d842e:	3102      	adds	r1, #2
   d8430:	f8ca 1000 	str.w	r1, [sl]
   d8434:	f1bb 0f00 	cmp.w	fp, #0
   d8438:	d050      	beq.n	d84dc <__hexnan+0x130>
   d843a:	454c      	cmp	r4, r9
   d843c:	d206      	bcs.n	d844c <__hexnan+0xa0>
   d843e:	2d07      	cmp	r5, #7
   d8440:	dc04      	bgt.n	d844c <__hexnan+0xa0>
   d8442:	462a      	mov	r2, r5
   d8444:	4649      	mov	r1, r9
   d8446:	4620      	mov	r0, r4
   d8448:	f7ff ff8a 	bl	d8360 <L_shift>
   d844c:	4544      	cmp	r4, r8
   d844e:	d934      	bls.n	d84ba <__hexnan+0x10e>
   d8450:	f1a8 0204 	sub.w	r2, r8, #4
   d8454:	4623      	mov	r3, r4
   d8456:	f853 1b04 	ldr.w	r1, [r3], #4
   d845a:	f842 1f04 	str.w	r1, [r2, #4]!
   d845e:	429f      	cmp	r7, r3
   d8460:	d2f9      	bcs.n	d8456 <__hexnan+0xaa>
   d8462:	1b3b      	subs	r3, r7, r4
   d8464:	f023 0303 	bic.w	r3, r3, #3
   d8468:	3304      	adds	r3, #4
   d846a:	3401      	adds	r4, #1
   d846c:	3e03      	subs	r6, #3
   d846e:	42b4      	cmp	r4, r6
   d8470:	bf88      	it	hi
   d8472:	2304      	movhi	r3, #4
   d8474:	4443      	add	r3, r8
   d8476:	2200      	movs	r2, #0
   d8478:	f843 2b04 	str.w	r2, [r3], #4
   d847c:	429f      	cmp	r7, r3
   d847e:	d2fb      	bcs.n	d8478 <__hexnan+0xcc>
   d8480:	683b      	ldr	r3, [r7, #0]
   d8482:	b91b      	cbnz	r3, d848c <__hexnan+0xe0>
   d8484:	4547      	cmp	r7, r8
   d8486:	d127      	bne.n	d84d8 <__hexnan+0x12c>
   d8488:	2301      	movs	r3, #1
   d848a:	603b      	str	r3, [r7, #0]
   d848c:	2005      	movs	r0, #5
   d848e:	e026      	b.n	d84de <__hexnan+0x132>
   d8490:	3501      	adds	r5, #1
   d8492:	2d08      	cmp	r5, #8
   d8494:	f10b 0b01 	add.w	fp, fp, #1
   d8498:	dd06      	ble.n	d84a8 <__hexnan+0xfc>
   d849a:	4544      	cmp	r4, r8
   d849c:	d9c3      	bls.n	d8426 <__hexnan+0x7a>
   d849e:	2300      	movs	r3, #0
   d84a0:	f844 3c04 	str.w	r3, [r4, #-4]
   d84a4:	2501      	movs	r5, #1
   d84a6:	3c04      	subs	r4, #4
   d84a8:	6822      	ldr	r2, [r4, #0]
   d84aa:	f000 000f 	and.w	r0, r0, #15
   d84ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d84b2:	6022      	str	r2, [r4, #0]
   d84b4:	e7b7      	b.n	d8426 <__hexnan+0x7a>
   d84b6:	2508      	movs	r5, #8
   d84b8:	e7b5      	b.n	d8426 <__hexnan+0x7a>
   d84ba:	9b01      	ldr	r3, [sp, #4]
   d84bc:	2b00      	cmp	r3, #0
   d84be:	d0df      	beq.n	d8480 <__hexnan+0xd4>
   d84c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d84c4:	f1c3 0320 	rsb	r3, r3, #32
   d84c8:	fa22 f303 	lsr.w	r3, r2, r3
   d84cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d84d0:	401a      	ands	r2, r3
   d84d2:	f846 2c04 	str.w	r2, [r6, #-4]
   d84d6:	e7d3      	b.n	d8480 <__hexnan+0xd4>
   d84d8:	3f04      	subs	r7, #4
   d84da:	e7d1      	b.n	d8480 <__hexnan+0xd4>
   d84dc:	2004      	movs	r0, #4
   d84de:	b007      	add	sp, #28
   d84e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d84e4 <__retarget_lock_acquire_recursive>:
   d84e4:	4770      	bx	lr

000d84e6 <__retarget_lock_release>:
   d84e6:	4770      	bx	lr

000d84e8 <__retarget_lock_release_recursive>:
   d84e8:	4770      	bx	lr

000d84ea <__ascii_mbtowc>:
   d84ea:	b082      	sub	sp, #8
   d84ec:	b901      	cbnz	r1, d84f0 <__ascii_mbtowc+0x6>
   d84ee:	a901      	add	r1, sp, #4
   d84f0:	b142      	cbz	r2, d8504 <__ascii_mbtowc+0x1a>
   d84f2:	b14b      	cbz	r3, d8508 <__ascii_mbtowc+0x1e>
   d84f4:	7813      	ldrb	r3, [r2, #0]
   d84f6:	600b      	str	r3, [r1, #0]
   d84f8:	7812      	ldrb	r2, [r2, #0]
   d84fa:	1e10      	subs	r0, r2, #0
   d84fc:	bf18      	it	ne
   d84fe:	2001      	movne	r0, #1
   d8500:	b002      	add	sp, #8
   d8502:	4770      	bx	lr
   d8504:	4610      	mov	r0, r2
   d8506:	e7fb      	b.n	d8500 <__ascii_mbtowc+0x16>
   d8508:	f06f 0001 	mvn.w	r0, #1
   d850c:	e7f8      	b.n	d8500 <__ascii_mbtowc+0x16>

000d850e <_Balloc>:
   d850e:	b570      	push	{r4, r5, r6, lr}
   d8510:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d8512:	4604      	mov	r4, r0
   d8514:	460d      	mov	r5, r1
   d8516:	b93e      	cbnz	r6, d8528 <_Balloc+0x1a>
   d8518:	2010      	movs	r0, #16
   d851a:	f7fc ff2f 	bl	d537c <malloc>
   d851e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d8522:	6260      	str	r0, [r4, #36]	; 0x24
   d8524:	6006      	str	r6, [r0, #0]
   d8526:	60c6      	str	r6, [r0, #12]
   d8528:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d852a:	68f3      	ldr	r3, [r6, #12]
   d852c:	b183      	cbz	r3, d8550 <_Balloc+0x42>
   d852e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8530:	68db      	ldr	r3, [r3, #12]
   d8532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d8536:	b9b8      	cbnz	r0, d8568 <_Balloc+0x5a>
   d8538:	2101      	movs	r1, #1
   d853a:	fa01 f605 	lsl.w	r6, r1, r5
   d853e:	1d72      	adds	r2, r6, #5
   d8540:	0092      	lsls	r2, r2, #2
   d8542:	4620      	mov	r0, r4
   d8544:	f000 fc23 	bl	d8d8e <_calloc_r>
   d8548:	b160      	cbz	r0, d8564 <_Balloc+0x56>
   d854a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d854e:	e00e      	b.n	d856e <_Balloc+0x60>
   d8550:	2221      	movs	r2, #33	; 0x21
   d8552:	2104      	movs	r1, #4
   d8554:	4620      	mov	r0, r4
   d8556:	f000 fc1a 	bl	d8d8e <_calloc_r>
   d855a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d855c:	60f0      	str	r0, [r6, #12]
   d855e:	68db      	ldr	r3, [r3, #12]
   d8560:	2b00      	cmp	r3, #0
   d8562:	d1e4      	bne.n	d852e <_Balloc+0x20>
   d8564:	2000      	movs	r0, #0
   d8566:	bd70      	pop	{r4, r5, r6, pc}
   d8568:	6802      	ldr	r2, [r0, #0]
   d856a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d856e:	2300      	movs	r3, #0
   d8570:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d8574:	e7f7      	b.n	d8566 <_Balloc+0x58>

000d8576 <_Bfree>:
   d8576:	b570      	push	{r4, r5, r6, lr}
   d8578:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d857a:	4605      	mov	r5, r0
   d857c:	460c      	mov	r4, r1
   d857e:	b93e      	cbnz	r6, d8590 <_Bfree+0x1a>
   d8580:	2010      	movs	r0, #16
   d8582:	f7fc fefb 	bl	d537c <malloc>
   d8586:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d858a:	6268      	str	r0, [r5, #36]	; 0x24
   d858c:	6006      	str	r6, [r0, #0]
   d858e:	60c6      	str	r6, [r0, #12]
   d8590:	b13c      	cbz	r4, d85a2 <_Bfree+0x2c>
   d8592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d8594:	6862      	ldr	r2, [r4, #4]
   d8596:	68db      	ldr	r3, [r3, #12]
   d8598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d859c:	6021      	str	r1, [r4, #0]
   d859e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d85a2:	bd70      	pop	{r4, r5, r6, pc}

000d85a4 <__multadd>:
   d85a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d85a8:	690e      	ldr	r6, [r1, #16]
   d85aa:	4607      	mov	r7, r0
   d85ac:	4698      	mov	r8, r3
   d85ae:	460c      	mov	r4, r1
   d85b0:	f101 0014 	add.w	r0, r1, #20
   d85b4:	2300      	movs	r3, #0
   d85b6:	6805      	ldr	r5, [r0, #0]
   d85b8:	b2a9      	uxth	r1, r5
   d85ba:	fb02 8101 	mla	r1, r2, r1, r8
   d85be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d85c2:	0c2d      	lsrs	r5, r5, #16
   d85c4:	fb02 c505 	mla	r5, r2, r5, ip
   d85c8:	b289      	uxth	r1, r1
   d85ca:	3301      	adds	r3, #1
   d85cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d85d0:	429e      	cmp	r6, r3
   d85d2:	f840 1b04 	str.w	r1, [r0], #4
   d85d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d85da:	dcec      	bgt.n	d85b6 <__multadd+0x12>
   d85dc:	f1b8 0f00 	cmp.w	r8, #0
   d85e0:	d01b      	beq.n	d861a <__multadd+0x76>
   d85e2:	68a3      	ldr	r3, [r4, #8]
   d85e4:	42b3      	cmp	r3, r6
   d85e6:	dc12      	bgt.n	d860e <__multadd+0x6a>
   d85e8:	6861      	ldr	r1, [r4, #4]
   d85ea:	4638      	mov	r0, r7
   d85ec:	3101      	adds	r1, #1
   d85ee:	f7ff ff8e 	bl	d850e <_Balloc>
   d85f2:	6922      	ldr	r2, [r4, #16]
   d85f4:	3202      	adds	r2, #2
   d85f6:	f104 010c 	add.w	r1, r4, #12
   d85fa:	4605      	mov	r5, r0
   d85fc:	0092      	lsls	r2, r2, #2
   d85fe:	300c      	adds	r0, #12
   d8600:	f7fe fccb 	bl	d6f9a <memcpy>
   d8604:	4621      	mov	r1, r4
   d8606:	4638      	mov	r0, r7
   d8608:	f7ff ffb5 	bl	d8576 <_Bfree>
   d860c:	462c      	mov	r4, r5
   d860e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d8612:	3601      	adds	r6, #1
   d8614:	f8c3 8014 	str.w	r8, [r3, #20]
   d8618:	6126      	str	r6, [r4, #16]
   d861a:	4620      	mov	r0, r4
   d861c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8620 <__s2b>:
   d8620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8624:	460c      	mov	r4, r1
   d8626:	4615      	mov	r5, r2
   d8628:	461f      	mov	r7, r3
   d862a:	2209      	movs	r2, #9
   d862c:	3308      	adds	r3, #8
   d862e:	4606      	mov	r6, r0
   d8630:	fb93 f3f2 	sdiv	r3, r3, r2
   d8634:	2100      	movs	r1, #0
   d8636:	2201      	movs	r2, #1
   d8638:	429a      	cmp	r2, r3
   d863a:	db20      	blt.n	d867e <__s2b+0x5e>
   d863c:	4630      	mov	r0, r6
   d863e:	f7ff ff66 	bl	d850e <_Balloc>
   d8642:	9b08      	ldr	r3, [sp, #32]
   d8644:	6143      	str	r3, [r0, #20]
   d8646:	2d09      	cmp	r5, #9
   d8648:	f04f 0301 	mov.w	r3, #1
   d864c:	6103      	str	r3, [r0, #16]
   d864e:	dd19      	ble.n	d8684 <__s2b+0x64>
   d8650:	f104 0909 	add.w	r9, r4, #9
   d8654:	46c8      	mov	r8, r9
   d8656:	442c      	add	r4, r5
   d8658:	f818 3b01 	ldrb.w	r3, [r8], #1
   d865c:	4601      	mov	r1, r0
   d865e:	3b30      	subs	r3, #48	; 0x30
   d8660:	220a      	movs	r2, #10
   d8662:	4630      	mov	r0, r6
   d8664:	f7ff ff9e 	bl	d85a4 <__multadd>
   d8668:	45a0      	cmp	r8, r4
   d866a:	d1f5      	bne.n	d8658 <__s2b+0x38>
   d866c:	f1a5 0408 	sub.w	r4, r5, #8
   d8670:	444c      	add	r4, r9
   d8672:	1b2d      	subs	r5, r5, r4
   d8674:	1963      	adds	r3, r4, r5
   d8676:	42bb      	cmp	r3, r7
   d8678:	db07      	blt.n	d868a <__s2b+0x6a>
   d867a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d867e:	0052      	lsls	r2, r2, #1
   d8680:	3101      	adds	r1, #1
   d8682:	e7d9      	b.n	d8638 <__s2b+0x18>
   d8684:	340a      	adds	r4, #10
   d8686:	2509      	movs	r5, #9
   d8688:	e7f3      	b.n	d8672 <__s2b+0x52>
   d868a:	f814 3b01 	ldrb.w	r3, [r4], #1
   d868e:	4601      	mov	r1, r0
   d8690:	3b30      	subs	r3, #48	; 0x30
   d8692:	220a      	movs	r2, #10
   d8694:	4630      	mov	r0, r6
   d8696:	f7ff ff85 	bl	d85a4 <__multadd>
   d869a:	e7eb      	b.n	d8674 <__s2b+0x54>

000d869c <__hi0bits>:
   d869c:	0c03      	lsrs	r3, r0, #16
   d869e:	041b      	lsls	r3, r3, #16
   d86a0:	b9d3      	cbnz	r3, d86d8 <__hi0bits+0x3c>
   d86a2:	0400      	lsls	r0, r0, #16
   d86a4:	2310      	movs	r3, #16
   d86a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d86aa:	bf04      	itt	eq
   d86ac:	0200      	lsleq	r0, r0, #8
   d86ae:	3308      	addeq	r3, #8
   d86b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d86b4:	bf04      	itt	eq
   d86b6:	0100      	lsleq	r0, r0, #4
   d86b8:	3304      	addeq	r3, #4
   d86ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d86be:	bf04      	itt	eq
   d86c0:	0080      	lsleq	r0, r0, #2
   d86c2:	3302      	addeq	r3, #2
   d86c4:	2800      	cmp	r0, #0
   d86c6:	db05      	blt.n	d86d4 <__hi0bits+0x38>
   d86c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d86cc:	f103 0301 	add.w	r3, r3, #1
   d86d0:	bf08      	it	eq
   d86d2:	2320      	moveq	r3, #32
   d86d4:	4618      	mov	r0, r3
   d86d6:	4770      	bx	lr
   d86d8:	2300      	movs	r3, #0
   d86da:	e7e4      	b.n	d86a6 <__hi0bits+0xa>

000d86dc <__lo0bits>:
   d86dc:	6803      	ldr	r3, [r0, #0]
   d86de:	f013 0207 	ands.w	r2, r3, #7
   d86e2:	4601      	mov	r1, r0
   d86e4:	d00b      	beq.n	d86fe <__lo0bits+0x22>
   d86e6:	07da      	lsls	r2, r3, #31
   d86e8:	d424      	bmi.n	d8734 <__lo0bits+0x58>
   d86ea:	0798      	lsls	r0, r3, #30
   d86ec:	bf49      	itett	mi
   d86ee:	085b      	lsrmi	r3, r3, #1
   d86f0:	089b      	lsrpl	r3, r3, #2
   d86f2:	2001      	movmi	r0, #1
   d86f4:	600b      	strmi	r3, [r1, #0]
   d86f6:	bf5c      	itt	pl
   d86f8:	600b      	strpl	r3, [r1, #0]
   d86fa:	2002      	movpl	r0, #2
   d86fc:	4770      	bx	lr
   d86fe:	b298      	uxth	r0, r3
   d8700:	b9b0      	cbnz	r0, d8730 <__lo0bits+0x54>
   d8702:	0c1b      	lsrs	r3, r3, #16
   d8704:	2010      	movs	r0, #16
   d8706:	f013 0fff 	tst.w	r3, #255	; 0xff
   d870a:	bf04      	itt	eq
   d870c:	0a1b      	lsreq	r3, r3, #8
   d870e:	3008      	addeq	r0, #8
   d8710:	071a      	lsls	r2, r3, #28
   d8712:	bf04      	itt	eq
   d8714:	091b      	lsreq	r3, r3, #4
   d8716:	3004      	addeq	r0, #4
   d8718:	079a      	lsls	r2, r3, #30
   d871a:	bf04      	itt	eq
   d871c:	089b      	lsreq	r3, r3, #2
   d871e:	3002      	addeq	r0, #2
   d8720:	07da      	lsls	r2, r3, #31
   d8722:	d403      	bmi.n	d872c <__lo0bits+0x50>
   d8724:	085b      	lsrs	r3, r3, #1
   d8726:	f100 0001 	add.w	r0, r0, #1
   d872a:	d005      	beq.n	d8738 <__lo0bits+0x5c>
   d872c:	600b      	str	r3, [r1, #0]
   d872e:	4770      	bx	lr
   d8730:	4610      	mov	r0, r2
   d8732:	e7e8      	b.n	d8706 <__lo0bits+0x2a>
   d8734:	2000      	movs	r0, #0
   d8736:	4770      	bx	lr
   d8738:	2020      	movs	r0, #32
   d873a:	4770      	bx	lr

000d873c <__i2b>:
   d873c:	b510      	push	{r4, lr}
   d873e:	460c      	mov	r4, r1
   d8740:	2101      	movs	r1, #1
   d8742:	f7ff fee4 	bl	d850e <_Balloc>
   d8746:	2201      	movs	r2, #1
   d8748:	6144      	str	r4, [r0, #20]
   d874a:	6102      	str	r2, [r0, #16]
   d874c:	bd10      	pop	{r4, pc}

000d874e <__multiply>:
   d874e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8752:	4615      	mov	r5, r2
   d8754:	690a      	ldr	r2, [r1, #16]
   d8756:	692b      	ldr	r3, [r5, #16]
   d8758:	429a      	cmp	r2, r3
   d875a:	bfb8      	it	lt
   d875c:	460b      	movlt	r3, r1
   d875e:	460c      	mov	r4, r1
   d8760:	bfbc      	itt	lt
   d8762:	462c      	movlt	r4, r5
   d8764:	461d      	movlt	r5, r3
   d8766:	6927      	ldr	r7, [r4, #16]
   d8768:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d876c:	68a3      	ldr	r3, [r4, #8]
   d876e:	6861      	ldr	r1, [r4, #4]
   d8770:	eb07 0609 	add.w	r6, r7, r9
   d8774:	42b3      	cmp	r3, r6
   d8776:	bfb8      	it	lt
   d8778:	3101      	addlt	r1, #1
   d877a:	b085      	sub	sp, #20
   d877c:	f7ff fec7 	bl	d850e <_Balloc>
   d8780:	f100 0114 	add.w	r1, r0, #20
   d8784:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d8788:	460b      	mov	r3, r1
   d878a:	2200      	movs	r2, #0
   d878c:	4543      	cmp	r3, r8
   d878e:	d31d      	bcc.n	d87cc <__multiply+0x7e>
   d8790:	f104 0314 	add.w	r3, r4, #20
   d8794:	f105 0214 	add.w	r2, r5, #20
   d8798:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d879c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d87a0:	9302      	str	r3, [sp, #8]
   d87a2:	1b3b      	subs	r3, r7, r4
   d87a4:	3b15      	subs	r3, #21
   d87a6:	f023 0303 	bic.w	r3, r3, #3
   d87aa:	3304      	adds	r3, #4
   d87ac:	f104 0515 	add.w	r5, r4, #21
   d87b0:	42af      	cmp	r7, r5
   d87b2:	bf38      	it	cc
   d87b4:	2304      	movcc	r3, #4
   d87b6:	9301      	str	r3, [sp, #4]
   d87b8:	9b02      	ldr	r3, [sp, #8]
   d87ba:	9203      	str	r2, [sp, #12]
   d87bc:	4293      	cmp	r3, r2
   d87be:	d808      	bhi.n	d87d2 <__multiply+0x84>
   d87c0:	2e00      	cmp	r6, #0
   d87c2:	dc5a      	bgt.n	d887a <__multiply+0x12c>
   d87c4:	6106      	str	r6, [r0, #16]
   d87c6:	b005      	add	sp, #20
   d87c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d87cc:	f843 2b04 	str.w	r2, [r3], #4
   d87d0:	e7dc      	b.n	d878c <__multiply+0x3e>
   d87d2:	f8b2 a000 	ldrh.w	sl, [r2]
   d87d6:	f1ba 0f00 	cmp.w	sl, #0
   d87da:	d024      	beq.n	d8826 <__multiply+0xd8>
   d87dc:	f104 0e14 	add.w	lr, r4, #20
   d87e0:	4689      	mov	r9, r1
   d87e2:	f04f 0c00 	mov.w	ip, #0
   d87e6:	f85e 5b04 	ldr.w	r5, [lr], #4
   d87ea:	f8d9 b000 	ldr.w	fp, [r9]
   d87ee:	b2ab      	uxth	r3, r5
   d87f0:	fa1f fb8b 	uxth.w	fp, fp
   d87f4:	fb0a b303 	mla	r3, sl, r3, fp
   d87f8:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d87fc:	f8d9 5000 	ldr.w	r5, [r9]
   d8800:	4463      	add	r3, ip
   d8802:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d8806:	fb0a c50b 	mla	r5, sl, fp, ip
   d880a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d880e:	b29b      	uxth	r3, r3
   d8810:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d8814:	4577      	cmp	r7, lr
   d8816:	f849 3b04 	str.w	r3, [r9], #4
   d881a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d881e:	d8e2      	bhi.n	d87e6 <__multiply+0x98>
   d8820:	9b01      	ldr	r3, [sp, #4]
   d8822:	f841 c003 	str.w	ip, [r1, r3]
   d8826:	9b03      	ldr	r3, [sp, #12]
   d8828:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d882c:	3204      	adds	r2, #4
   d882e:	f1b9 0f00 	cmp.w	r9, #0
   d8832:	d020      	beq.n	d8876 <__multiply+0x128>
   d8834:	680b      	ldr	r3, [r1, #0]
   d8836:	f104 0c14 	add.w	ip, r4, #20
   d883a:	468e      	mov	lr, r1
   d883c:	f04f 0a00 	mov.w	sl, #0
   d8840:	f8bc 5000 	ldrh.w	r5, [ip]
   d8844:	f8be b002 	ldrh.w	fp, [lr, #2]
   d8848:	fb09 b505 	mla	r5, r9, r5, fp
   d884c:	44aa      	add	sl, r5
   d884e:	b29b      	uxth	r3, r3
   d8850:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d8854:	f84e 3b04 	str.w	r3, [lr], #4
   d8858:	f85c 3b04 	ldr.w	r3, [ip], #4
   d885c:	f8be 5000 	ldrh.w	r5, [lr]
   d8860:	0c1b      	lsrs	r3, r3, #16
   d8862:	fb09 5303 	mla	r3, r9, r3, r5
   d8866:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d886a:	4567      	cmp	r7, ip
   d886c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d8870:	d8e6      	bhi.n	d8840 <__multiply+0xf2>
   d8872:	9d01      	ldr	r5, [sp, #4]
   d8874:	514b      	str	r3, [r1, r5]
   d8876:	3104      	adds	r1, #4
   d8878:	e79e      	b.n	d87b8 <__multiply+0x6a>
   d887a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d887e:	2b00      	cmp	r3, #0
   d8880:	d1a0      	bne.n	d87c4 <__multiply+0x76>
   d8882:	3e01      	subs	r6, #1
   d8884:	e79c      	b.n	d87c0 <__multiply+0x72>
	...

000d8888 <__pow5mult>:
   d8888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d888c:	4615      	mov	r5, r2
   d888e:	f012 0203 	ands.w	r2, r2, #3
   d8892:	4606      	mov	r6, r0
   d8894:	460f      	mov	r7, r1
   d8896:	d007      	beq.n	d88a8 <__pow5mult+0x20>
   d8898:	4c21      	ldr	r4, [pc, #132]	; (d8920 <__pow5mult+0x98>)
   d889a:	3a01      	subs	r2, #1
   d889c:	2300      	movs	r3, #0
   d889e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d88a2:	f7ff fe7f 	bl	d85a4 <__multadd>
   d88a6:	4607      	mov	r7, r0
   d88a8:	10ad      	asrs	r5, r5, #2
   d88aa:	d035      	beq.n	d8918 <__pow5mult+0x90>
   d88ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d88ae:	b93c      	cbnz	r4, d88c0 <__pow5mult+0x38>
   d88b0:	2010      	movs	r0, #16
   d88b2:	f7fc fd63 	bl	d537c <malloc>
   d88b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d88ba:	6270      	str	r0, [r6, #36]	; 0x24
   d88bc:	6004      	str	r4, [r0, #0]
   d88be:	60c4      	str	r4, [r0, #12]
   d88c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d88c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d88c8:	b94c      	cbnz	r4, d88de <__pow5mult+0x56>
   d88ca:	f240 2171 	movw	r1, #625	; 0x271
   d88ce:	4630      	mov	r0, r6
   d88d0:	f7ff ff34 	bl	d873c <__i2b>
   d88d4:	2300      	movs	r3, #0
   d88d6:	f8c8 0008 	str.w	r0, [r8, #8]
   d88da:	4604      	mov	r4, r0
   d88dc:	6003      	str	r3, [r0, #0]
   d88de:	f04f 0900 	mov.w	r9, #0
   d88e2:	07eb      	lsls	r3, r5, #31
   d88e4:	d50a      	bpl.n	d88fc <__pow5mult+0x74>
   d88e6:	4639      	mov	r1, r7
   d88e8:	4622      	mov	r2, r4
   d88ea:	4630      	mov	r0, r6
   d88ec:	f7ff ff2f 	bl	d874e <__multiply>
   d88f0:	4639      	mov	r1, r7
   d88f2:	4680      	mov	r8, r0
   d88f4:	4630      	mov	r0, r6
   d88f6:	f7ff fe3e 	bl	d8576 <_Bfree>
   d88fa:	4647      	mov	r7, r8
   d88fc:	106d      	asrs	r5, r5, #1
   d88fe:	d00b      	beq.n	d8918 <__pow5mult+0x90>
   d8900:	6820      	ldr	r0, [r4, #0]
   d8902:	b938      	cbnz	r0, d8914 <__pow5mult+0x8c>
   d8904:	4622      	mov	r2, r4
   d8906:	4621      	mov	r1, r4
   d8908:	4630      	mov	r0, r6
   d890a:	f7ff ff20 	bl	d874e <__multiply>
   d890e:	6020      	str	r0, [r4, #0]
   d8910:	f8c0 9000 	str.w	r9, [r0]
   d8914:	4604      	mov	r4, r0
   d8916:	e7e4      	b.n	d88e2 <__pow5mult+0x5a>
   d8918:	4638      	mov	r0, r7
   d891a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d891e:	bf00      	nop
   d8920:	000d9350 	.word	0x000d9350

000d8924 <__lshift>:
   d8924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8928:	460c      	mov	r4, r1
   d892a:	6849      	ldr	r1, [r1, #4]
   d892c:	6923      	ldr	r3, [r4, #16]
   d892e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d8932:	68a3      	ldr	r3, [r4, #8]
   d8934:	4607      	mov	r7, r0
   d8936:	4691      	mov	r9, r2
   d8938:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d893c:	f108 0601 	add.w	r6, r8, #1
   d8940:	42b3      	cmp	r3, r6
   d8942:	db3f      	blt.n	d89c4 <__lshift+0xa0>
   d8944:	4638      	mov	r0, r7
   d8946:	f7ff fde2 	bl	d850e <_Balloc>
   d894a:	2300      	movs	r3, #0
   d894c:	4605      	mov	r5, r0
   d894e:	f100 0114 	add.w	r1, r0, #20
   d8952:	f100 0210 	add.w	r2, r0, #16
   d8956:	4618      	mov	r0, r3
   d8958:	4553      	cmp	r3, sl
   d895a:	db36      	blt.n	d89ca <__lshift+0xa6>
   d895c:	6920      	ldr	r0, [r4, #16]
   d895e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d8962:	f104 0314 	add.w	r3, r4, #20
   d8966:	f019 091f 	ands.w	r9, r9, #31
   d896a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d896e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d8972:	d02e      	beq.n	d89d2 <__lshift+0xae>
   d8974:	f1c9 0e20 	rsb	lr, r9, #32
   d8978:	468a      	mov	sl, r1
   d897a:	2200      	movs	r2, #0
   d897c:	6818      	ldr	r0, [r3, #0]
   d897e:	fa00 f009 	lsl.w	r0, r0, r9
   d8982:	4302      	orrs	r2, r0
   d8984:	f84a 2b04 	str.w	r2, [sl], #4
   d8988:	f853 2b04 	ldr.w	r2, [r3], #4
   d898c:	459c      	cmp	ip, r3
   d898e:	fa22 f20e 	lsr.w	r2, r2, lr
   d8992:	d8f3      	bhi.n	d897c <__lshift+0x58>
   d8994:	ebac 0304 	sub.w	r3, ip, r4
   d8998:	3b15      	subs	r3, #21
   d899a:	f023 0303 	bic.w	r3, r3, #3
   d899e:	3304      	adds	r3, #4
   d89a0:	f104 0015 	add.w	r0, r4, #21
   d89a4:	4560      	cmp	r0, ip
   d89a6:	bf88      	it	hi
   d89a8:	2304      	movhi	r3, #4
   d89aa:	50ca      	str	r2, [r1, r3]
   d89ac:	b10a      	cbz	r2, d89b2 <__lshift+0x8e>
   d89ae:	f108 0602 	add.w	r6, r8, #2
   d89b2:	3e01      	subs	r6, #1
   d89b4:	4638      	mov	r0, r7
   d89b6:	612e      	str	r6, [r5, #16]
   d89b8:	4621      	mov	r1, r4
   d89ba:	f7ff fddc 	bl	d8576 <_Bfree>
   d89be:	4628      	mov	r0, r5
   d89c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d89c4:	3101      	adds	r1, #1
   d89c6:	005b      	lsls	r3, r3, #1
   d89c8:	e7ba      	b.n	d8940 <__lshift+0x1c>
   d89ca:	f842 0f04 	str.w	r0, [r2, #4]!
   d89ce:	3301      	adds	r3, #1
   d89d0:	e7c2      	b.n	d8958 <__lshift+0x34>
   d89d2:	3904      	subs	r1, #4
   d89d4:	f853 2b04 	ldr.w	r2, [r3], #4
   d89d8:	f841 2f04 	str.w	r2, [r1, #4]!
   d89dc:	459c      	cmp	ip, r3
   d89de:	d8f9      	bhi.n	d89d4 <__lshift+0xb0>
   d89e0:	e7e7      	b.n	d89b2 <__lshift+0x8e>

000d89e2 <__mcmp>:
   d89e2:	b530      	push	{r4, r5, lr}
   d89e4:	6902      	ldr	r2, [r0, #16]
   d89e6:	690c      	ldr	r4, [r1, #16]
   d89e8:	1b12      	subs	r2, r2, r4
   d89ea:	d10e      	bne.n	d8a0a <__mcmp+0x28>
   d89ec:	f100 0314 	add.w	r3, r0, #20
   d89f0:	3114      	adds	r1, #20
   d89f2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d89f6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d89fa:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d89fe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d8a02:	42a5      	cmp	r5, r4
   d8a04:	d003      	beq.n	d8a0e <__mcmp+0x2c>
   d8a06:	d305      	bcc.n	d8a14 <__mcmp+0x32>
   d8a08:	2201      	movs	r2, #1
   d8a0a:	4610      	mov	r0, r2
   d8a0c:	bd30      	pop	{r4, r5, pc}
   d8a0e:	4283      	cmp	r3, r0
   d8a10:	d3f3      	bcc.n	d89fa <__mcmp+0x18>
   d8a12:	e7fa      	b.n	d8a0a <__mcmp+0x28>
   d8a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8a18:	e7f7      	b.n	d8a0a <__mcmp+0x28>

000d8a1a <__mdiff>:
   d8a1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a1e:	460c      	mov	r4, r1
   d8a20:	4606      	mov	r6, r0
   d8a22:	4611      	mov	r1, r2
   d8a24:	4620      	mov	r0, r4
   d8a26:	4617      	mov	r7, r2
   d8a28:	f7ff ffdb 	bl	d89e2 <__mcmp>
   d8a2c:	1e05      	subs	r5, r0, #0
   d8a2e:	d108      	bne.n	d8a42 <__mdiff+0x28>
   d8a30:	4629      	mov	r1, r5
   d8a32:	4630      	mov	r0, r6
   d8a34:	f7ff fd6b 	bl	d850e <_Balloc>
   d8a38:	2301      	movs	r3, #1
   d8a3a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d8a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a42:	bfa4      	itt	ge
   d8a44:	463b      	movge	r3, r7
   d8a46:	4627      	movge	r7, r4
   d8a48:	4630      	mov	r0, r6
   d8a4a:	6879      	ldr	r1, [r7, #4]
   d8a4c:	bfa6      	itte	ge
   d8a4e:	461c      	movge	r4, r3
   d8a50:	2500      	movge	r5, #0
   d8a52:	2501      	movlt	r5, #1
   d8a54:	f7ff fd5b 	bl	d850e <_Balloc>
   d8a58:	693e      	ldr	r6, [r7, #16]
   d8a5a:	60c5      	str	r5, [r0, #12]
   d8a5c:	6925      	ldr	r5, [r4, #16]
   d8a5e:	f107 0114 	add.w	r1, r7, #20
   d8a62:	f104 0914 	add.w	r9, r4, #20
   d8a66:	f100 0e14 	add.w	lr, r0, #20
   d8a6a:	f107 0210 	add.w	r2, r7, #16
   d8a6e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d8a72:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d8a76:	46f2      	mov	sl, lr
   d8a78:	2700      	movs	r7, #0
   d8a7a:	f859 3b04 	ldr.w	r3, [r9], #4
   d8a7e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d8a82:	fa1f f883 	uxth.w	r8, r3
   d8a86:	fa17 f78b 	uxtah	r7, r7, fp
   d8a8a:	0c1b      	lsrs	r3, r3, #16
   d8a8c:	eba7 0808 	sub.w	r8, r7, r8
   d8a90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d8a94:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d8a98:	fa1f f888 	uxth.w	r8, r8
   d8a9c:	141f      	asrs	r7, r3, #16
   d8a9e:	454d      	cmp	r5, r9
   d8aa0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d8aa4:	f84a 3b04 	str.w	r3, [sl], #4
   d8aa8:	d8e7      	bhi.n	d8a7a <__mdiff+0x60>
   d8aaa:	1b2b      	subs	r3, r5, r4
   d8aac:	3b15      	subs	r3, #21
   d8aae:	f023 0303 	bic.w	r3, r3, #3
   d8ab2:	3304      	adds	r3, #4
   d8ab4:	3415      	adds	r4, #21
   d8ab6:	42a5      	cmp	r5, r4
   d8ab8:	bf38      	it	cc
   d8aba:	2304      	movcc	r3, #4
   d8abc:	4419      	add	r1, r3
   d8abe:	4473      	add	r3, lr
   d8ac0:	469e      	mov	lr, r3
   d8ac2:	460d      	mov	r5, r1
   d8ac4:	4565      	cmp	r5, ip
   d8ac6:	d30e      	bcc.n	d8ae6 <__mdiff+0xcc>
   d8ac8:	f10c 0203 	add.w	r2, ip, #3
   d8acc:	1a52      	subs	r2, r2, r1
   d8ace:	f022 0203 	bic.w	r2, r2, #3
   d8ad2:	3903      	subs	r1, #3
   d8ad4:	458c      	cmp	ip, r1
   d8ad6:	bf38      	it	cc
   d8ad8:	2200      	movcc	r2, #0
   d8ada:	441a      	add	r2, r3
   d8adc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d8ae0:	b17b      	cbz	r3, d8b02 <__mdiff+0xe8>
   d8ae2:	6106      	str	r6, [r0, #16]
   d8ae4:	e7ab      	b.n	d8a3e <__mdiff+0x24>
   d8ae6:	f855 8b04 	ldr.w	r8, [r5], #4
   d8aea:	fa17 f488 	uxtah	r4, r7, r8
   d8aee:	1422      	asrs	r2, r4, #16
   d8af0:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d8af4:	b2a4      	uxth	r4, r4
   d8af6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d8afa:	f84e 4b04 	str.w	r4, [lr], #4
   d8afe:	1417      	asrs	r7, r2, #16
   d8b00:	e7e0      	b.n	d8ac4 <__mdiff+0xaa>
   d8b02:	3e01      	subs	r6, #1
   d8b04:	e7ea      	b.n	d8adc <__mdiff+0xc2>
	...

000d8b08 <__ulp>:
   d8b08:	b082      	sub	sp, #8
   d8b0a:	ed8d 0b00 	vstr	d0, [sp]
   d8b0e:	9b01      	ldr	r3, [sp, #4]
   d8b10:	4912      	ldr	r1, [pc, #72]	; (d8b5c <__ulp+0x54>)
   d8b12:	4019      	ands	r1, r3
   d8b14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d8b18:	2900      	cmp	r1, #0
   d8b1a:	dd05      	ble.n	d8b28 <__ulp+0x20>
   d8b1c:	2200      	movs	r2, #0
   d8b1e:	460b      	mov	r3, r1
   d8b20:	ec43 2b10 	vmov	d0, r2, r3
   d8b24:	b002      	add	sp, #8
   d8b26:	4770      	bx	lr
   d8b28:	4249      	negs	r1, r1
   d8b2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d8b2e:	ea4f 5021 	mov.w	r0, r1, asr #20
   d8b32:	f04f 0200 	mov.w	r2, #0
   d8b36:	f04f 0300 	mov.w	r3, #0
   d8b3a:	da04      	bge.n	d8b46 <__ulp+0x3e>
   d8b3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d8b40:	fa41 f300 	asr.w	r3, r1, r0
   d8b44:	e7ec      	b.n	d8b20 <__ulp+0x18>
   d8b46:	f1a0 0114 	sub.w	r1, r0, #20
   d8b4a:	291e      	cmp	r1, #30
   d8b4c:	bfda      	itte	le
   d8b4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d8b52:	fa20 f101 	lsrle.w	r1, r0, r1
   d8b56:	2101      	movgt	r1, #1
   d8b58:	460a      	mov	r2, r1
   d8b5a:	e7e1      	b.n	d8b20 <__ulp+0x18>
   d8b5c:	7ff00000 	.word	0x7ff00000

000d8b60 <__b2d>:
   d8b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b62:	6905      	ldr	r5, [r0, #16]
   d8b64:	f100 0714 	add.w	r7, r0, #20
   d8b68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d8b6c:	1f2e      	subs	r6, r5, #4
   d8b6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d8b72:	4620      	mov	r0, r4
   d8b74:	f7ff fd92 	bl	d869c <__hi0bits>
   d8b78:	f1c0 0320 	rsb	r3, r0, #32
   d8b7c:	280a      	cmp	r0, #10
   d8b7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; d8bfc <__b2d+0x9c>
   d8b82:	600b      	str	r3, [r1, #0]
   d8b84:	dc14      	bgt.n	d8bb0 <__b2d+0x50>
   d8b86:	f1c0 0e0b 	rsb	lr, r0, #11
   d8b8a:	fa24 f10e 	lsr.w	r1, r4, lr
   d8b8e:	42b7      	cmp	r7, r6
   d8b90:	ea41 030c 	orr.w	r3, r1, ip
   d8b94:	bf34      	ite	cc
   d8b96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d8b9a:	2100      	movcs	r1, #0
   d8b9c:	3015      	adds	r0, #21
   d8b9e:	fa04 f000 	lsl.w	r0, r4, r0
   d8ba2:	fa21 f10e 	lsr.w	r1, r1, lr
   d8ba6:	ea40 0201 	orr.w	r2, r0, r1
   d8baa:	ec43 2b10 	vmov	d0, r2, r3
   d8bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8bb0:	42b7      	cmp	r7, r6
   d8bb2:	bf3a      	itte	cc
   d8bb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d8bb8:	f1a5 0608 	subcc.w	r6, r5, #8
   d8bbc:	2100      	movcs	r1, #0
   d8bbe:	380b      	subs	r0, #11
   d8bc0:	d017      	beq.n	d8bf2 <__b2d+0x92>
   d8bc2:	f1c0 0c20 	rsb	ip, r0, #32
   d8bc6:	fa04 f500 	lsl.w	r5, r4, r0
   d8bca:	42be      	cmp	r6, r7
   d8bcc:	fa21 f40c 	lsr.w	r4, r1, ip
   d8bd0:	ea45 0504 	orr.w	r5, r5, r4
   d8bd4:	bf8c      	ite	hi
   d8bd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d8bda:	2400      	movls	r4, #0
   d8bdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d8be0:	fa01 f000 	lsl.w	r0, r1, r0
   d8be4:	fa24 f40c 	lsr.w	r4, r4, ip
   d8be8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d8bec:	ea40 0204 	orr.w	r2, r0, r4
   d8bf0:	e7db      	b.n	d8baa <__b2d+0x4a>
   d8bf2:	ea44 030c 	orr.w	r3, r4, ip
   d8bf6:	460a      	mov	r2, r1
   d8bf8:	e7d7      	b.n	d8baa <__b2d+0x4a>
   d8bfa:	bf00      	nop
   d8bfc:	3ff00000 	.word	0x3ff00000

000d8c00 <__d2b>:
   d8c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8c04:	4689      	mov	r9, r1
   d8c06:	2101      	movs	r1, #1
   d8c08:	ec57 6b10 	vmov	r6, r7, d0
   d8c0c:	4690      	mov	r8, r2
   d8c0e:	f7ff fc7e 	bl	d850e <_Balloc>
   d8c12:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d8c16:	4604      	mov	r4, r0
   d8c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d8c1c:	bb35      	cbnz	r5, d8c6c <__d2b+0x6c>
   d8c1e:	2e00      	cmp	r6, #0
   d8c20:	9301      	str	r3, [sp, #4]
   d8c22:	d028      	beq.n	d8c76 <__d2b+0x76>
   d8c24:	4668      	mov	r0, sp
   d8c26:	9600      	str	r6, [sp, #0]
   d8c28:	f7ff fd58 	bl	d86dc <__lo0bits>
   d8c2c:	9900      	ldr	r1, [sp, #0]
   d8c2e:	b300      	cbz	r0, d8c72 <__d2b+0x72>
   d8c30:	9a01      	ldr	r2, [sp, #4]
   d8c32:	f1c0 0320 	rsb	r3, r0, #32
   d8c36:	fa02 f303 	lsl.w	r3, r2, r3
   d8c3a:	430b      	orrs	r3, r1
   d8c3c:	40c2      	lsrs	r2, r0
   d8c3e:	6163      	str	r3, [r4, #20]
   d8c40:	9201      	str	r2, [sp, #4]
   d8c42:	9b01      	ldr	r3, [sp, #4]
   d8c44:	61a3      	str	r3, [r4, #24]
   d8c46:	2b00      	cmp	r3, #0
   d8c48:	bf14      	ite	ne
   d8c4a:	2202      	movne	r2, #2
   d8c4c:	2201      	moveq	r2, #1
   d8c4e:	6122      	str	r2, [r4, #16]
   d8c50:	b1d5      	cbz	r5, d8c88 <__d2b+0x88>
   d8c52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d8c56:	4405      	add	r5, r0
   d8c58:	f8c9 5000 	str.w	r5, [r9]
   d8c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d8c60:	f8c8 0000 	str.w	r0, [r8]
   d8c64:	4620      	mov	r0, r4
   d8c66:	b003      	add	sp, #12
   d8c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8c70:	e7d5      	b.n	d8c1e <__d2b+0x1e>
   d8c72:	6161      	str	r1, [r4, #20]
   d8c74:	e7e5      	b.n	d8c42 <__d2b+0x42>
   d8c76:	a801      	add	r0, sp, #4
   d8c78:	f7ff fd30 	bl	d86dc <__lo0bits>
   d8c7c:	9b01      	ldr	r3, [sp, #4]
   d8c7e:	6163      	str	r3, [r4, #20]
   d8c80:	2201      	movs	r2, #1
   d8c82:	6122      	str	r2, [r4, #16]
   d8c84:	3020      	adds	r0, #32
   d8c86:	e7e3      	b.n	d8c50 <__d2b+0x50>
   d8c88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d8c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d8c90:	f8c9 0000 	str.w	r0, [r9]
   d8c94:	6918      	ldr	r0, [r3, #16]
   d8c96:	f7ff fd01 	bl	d869c <__hi0bits>
   d8c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d8c9e:	e7df      	b.n	d8c60 <__d2b+0x60>

000d8ca0 <__ratio>:
   d8ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ca4:	4688      	mov	r8, r1
   d8ca6:	4669      	mov	r1, sp
   d8ca8:	4681      	mov	r9, r0
   d8caa:	f7ff ff59 	bl	d8b60 <__b2d>
   d8cae:	a901      	add	r1, sp, #4
   d8cb0:	4640      	mov	r0, r8
   d8cb2:	ec55 4b10 	vmov	r4, r5, d0
   d8cb6:	f7ff ff53 	bl	d8b60 <__b2d>
   d8cba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d8cbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d8cc2:	eba3 0c02 	sub.w	ip, r3, r2
   d8cc6:	e9dd 3200 	ldrd	r3, r2, [sp]
   d8cca:	1a9b      	subs	r3, r3, r2
   d8ccc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d8cd0:	ec51 0b10 	vmov	r0, r1, d0
   d8cd4:	2b00      	cmp	r3, #0
   d8cd6:	bfd6      	itet	le
   d8cd8:	460a      	movle	r2, r1
   d8cda:	462a      	movgt	r2, r5
   d8cdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d8ce0:	468b      	mov	fp, r1
   d8ce2:	462f      	mov	r7, r5
   d8ce4:	bfd4      	ite	le
   d8ce6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d8cea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d8cee:	4620      	mov	r0, r4
   d8cf0:	ee10 2a10 	vmov	r2, s0
   d8cf4:	465b      	mov	r3, fp
   d8cf6:	4639      	mov	r1, r7
   d8cf8:	f7fd ff48 	bl	d6b8c <__aeabi_ddiv>
   d8cfc:	ec41 0b10 	vmov	d0, r0, r1
   d8d00:	b003      	add	sp, #12
   d8d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8d06 <__copybits>:
   d8d06:	3901      	subs	r1, #1
   d8d08:	b570      	push	{r4, r5, r6, lr}
   d8d0a:	1149      	asrs	r1, r1, #5
   d8d0c:	6914      	ldr	r4, [r2, #16]
   d8d0e:	3101      	adds	r1, #1
   d8d10:	f102 0314 	add.w	r3, r2, #20
   d8d14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d8d18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d8d1c:	1f05      	subs	r5, r0, #4
   d8d1e:	42a3      	cmp	r3, r4
   d8d20:	d30c      	bcc.n	d8d3c <__copybits+0x36>
   d8d22:	1aa3      	subs	r3, r4, r2
   d8d24:	3b11      	subs	r3, #17
   d8d26:	f023 0303 	bic.w	r3, r3, #3
   d8d2a:	3211      	adds	r2, #17
   d8d2c:	42a2      	cmp	r2, r4
   d8d2e:	bf88      	it	hi
   d8d30:	2300      	movhi	r3, #0
   d8d32:	4418      	add	r0, r3
   d8d34:	2300      	movs	r3, #0
   d8d36:	4288      	cmp	r0, r1
   d8d38:	d305      	bcc.n	d8d46 <__copybits+0x40>
   d8d3a:	bd70      	pop	{r4, r5, r6, pc}
   d8d3c:	f853 6b04 	ldr.w	r6, [r3], #4
   d8d40:	f845 6f04 	str.w	r6, [r5, #4]!
   d8d44:	e7eb      	b.n	d8d1e <__copybits+0x18>
   d8d46:	f840 3b04 	str.w	r3, [r0], #4
   d8d4a:	e7f4      	b.n	d8d36 <__copybits+0x30>

000d8d4c <__any_on>:
   d8d4c:	f100 0214 	add.w	r2, r0, #20
   d8d50:	6900      	ldr	r0, [r0, #16]
   d8d52:	114b      	asrs	r3, r1, #5
   d8d54:	4298      	cmp	r0, r3
   d8d56:	b510      	push	{r4, lr}
   d8d58:	db11      	blt.n	d8d7e <__any_on+0x32>
   d8d5a:	dd0a      	ble.n	d8d72 <__any_on+0x26>
   d8d5c:	f011 011f 	ands.w	r1, r1, #31
   d8d60:	d007      	beq.n	d8d72 <__any_on+0x26>
   d8d62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d8d66:	fa24 f001 	lsr.w	r0, r4, r1
   d8d6a:	fa00 f101 	lsl.w	r1, r0, r1
   d8d6e:	428c      	cmp	r4, r1
   d8d70:	d10b      	bne.n	d8d8a <__any_on+0x3e>
   d8d72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d8d76:	4293      	cmp	r3, r2
   d8d78:	d803      	bhi.n	d8d82 <__any_on+0x36>
   d8d7a:	2000      	movs	r0, #0
   d8d7c:	bd10      	pop	{r4, pc}
   d8d7e:	4603      	mov	r3, r0
   d8d80:	e7f7      	b.n	d8d72 <__any_on+0x26>
   d8d82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d8d86:	2900      	cmp	r1, #0
   d8d88:	d0f5      	beq.n	d8d76 <__any_on+0x2a>
   d8d8a:	2001      	movs	r0, #1
   d8d8c:	e7f6      	b.n	d8d7c <__any_on+0x30>

000d8d8e <_calloc_r>:
   d8d8e:	b513      	push	{r0, r1, r4, lr}
   d8d90:	434a      	muls	r2, r1
   d8d92:	4611      	mov	r1, r2
   d8d94:	9201      	str	r2, [sp, #4]
   d8d96:	f7fc fb21 	bl	d53dc <_malloc_r>
   d8d9a:	4604      	mov	r4, r0
   d8d9c:	b118      	cbz	r0, d8da6 <_calloc_r+0x18>
   d8d9e:	9a01      	ldr	r2, [sp, #4]
   d8da0:	2100      	movs	r1, #0
   d8da2:	f7fe f908 	bl	d6fb6 <memset>
   d8da6:	4620      	mov	r0, r4
   d8da8:	b002      	add	sp, #8
   d8daa:	bd10      	pop	{r4, pc}
   d8dac:	0000      	movs	r0, r0
	...

000d8db0 <nan>:
   d8db0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8db8 <nan+0x8>
   d8db4:	4770      	bx	lr
   d8db6:	bf00      	nop
   d8db8:	00000000 	.word	0x00000000
   d8dbc:	7ff80000 	.word	0x7ff80000

000d8dc0 <__ascii_wctomb>:
   d8dc0:	b149      	cbz	r1, d8dd6 <__ascii_wctomb+0x16>
   d8dc2:	2aff      	cmp	r2, #255	; 0xff
   d8dc4:	bf85      	ittet	hi
   d8dc6:	238a      	movhi	r3, #138	; 0x8a
   d8dc8:	6003      	strhi	r3, [r0, #0]
   d8dca:	700a      	strbls	r2, [r1, #0]
   d8dcc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   d8dd0:	bf98      	it	ls
   d8dd2:	2001      	movls	r0, #1
   d8dd4:	4770      	bx	lr
   d8dd6:	4608      	mov	r0, r1
   d8dd8:	4770      	bx	lr
	...

000d8ddc <__aeabi_d2lz>:
   d8ddc:	b538      	push	{r3, r4, r5, lr}
   d8dde:	2200      	movs	r2, #0
   d8de0:	2300      	movs	r3, #0
   d8de2:	4604      	mov	r4, r0
   d8de4:	460d      	mov	r5, r1
   d8de6:	f7fe f819 	bl	d6e1c <__aeabi_dcmplt>
   d8dea:	b928      	cbnz	r0, d8df8 <__aeabi_d2lz+0x1c>
   d8dec:	4620      	mov	r0, r4
   d8dee:	4629      	mov	r1, r5
   d8df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8df4:	f7fe b8aa 	b.w	d6f4c <__aeabi_d2ulz>
   d8df8:	4620      	mov	r0, r4
   d8dfa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d8dfe:	f7fe f8a5 	bl	d6f4c <__aeabi_d2ulz>
   d8e02:	4240      	negs	r0, r0
   d8e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8e08:	bd38      	pop	{r3, r4, r5, pc}
   d8e0a:	bf00      	nop

000d8e0c <dynalib_user>:
   d8e0c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8e1c:	0000 0000 614c 3a74 2520 2066 6f4c 3a6e     ....Lat: %f Lon:
   d8e2c:	2520 2066 6341 2063 6d28 3a29 2520 0066      %f Acc (m): %f.
   d8e3c:	6562 6174 6e4f 696c 656e 6200 7465 4361     betaOnline.betaC
   d8e4c:	6c6f 726f 6200 7465 4c61 6769 7468 6e69     olor.betaLightin
   d8e5c:	0067 6562 6174 6f4c 6163 6574 3400 6c00     g.betaLocate.4.l
   d8e6c:	776f 6800 6769 0068 6166 0072 6c61 6870     ow.high.far.alph
   d8e7c:	4f61 6c6e 6e69 0065 666f 0066 696c 6867     aOnline.off.ligh
   d8e8c:	6974 676e 0031 696c 6867 6974 676e 0032     ting1.lighting2.
   d8e9c:	696c 6867 6974 676e 0033 002c 7325 227b     lighting3.,.%s{"
   d8eac:	226d 223a 3025 7832 253a 3230 3a78 3025     m":"%02x:%02x:%0
   d8ebc:	7832 253a 3230 3a78 3025 7832 253a 3230     2x:%02x:%02x:%02
   d8ecc:	2278 222c 2273 253a 2c64 6322 3a22 6425     x","s":%d,"c":%d
   d8edc:	007d 6564 6976 6563 6f4c 6163 6f74 0072     }.deviceLocator.
   d8eec:	5441 5426 7b00 7722 3a22 227b 2261 003a     AT&T.{"w":{"a":.
   d8efc:	7570 6c62 7369 4c68 636f 7461 6f69 006e     publishLocation.
   d8f0c:	6373 6e61 6144 6174 253d 0073 6f68 6b6f     scanData=%s.hook
   d8f1c:	722d 7365 6f70 736e 2f65 7325 252f 0073     -response/%s/%s.

000d8f2c <_ZTV23GoogleMapsDeviceLocator>:
	...
   d8f34:	46a9 000d 46c9 000d c000 4001 1000 4002     .F...F.....@...@
   d8f44:	2000 4002                                   . .@

000d8f48 <CSWTCH.60>:
   d8f48:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d8f58:	0050 0000                                   P...

000d8f5c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8f64:	5449 000d 544f 000d 548d 000d 545d 000d     IT..OT...T..]T..
   d8f74:	544b 000d                                   KT..

000d8f78 <_ZTVN5spark13EthernetClassE>:
	...
   d8f80:	5a1f 000d 5a15 000d 5a0b 000d 5a01 000d     .Z...Z...Z...Z..
   d8f90:	59f5 000d 59e9 000d 5bed 000d 5bf5 000d     .Y...Y...[...[..
   d8fa0:	59dd 000d 59d5 000d 59cb 000d 59c1 000d     .Y...Y...Y...Y..
   d8fb0:	5c25 000d                                   %\..

000d8fb4 <_ZTV7TwoWire>:
	...
   d8fbc:	5a3d 000d 5a87 000d 5a5f 000d 5a3f 000d     =Z...Z.._Z..?Z..
   d8fcc:	5a67 000d 5a6f 000d 5a77 000d 5a7f 000d     gZ..oZ..wZ...Z..

000d8fdc <_ZTV9IPAddress>:
	...
   d8fe4:	5ac9 000d 5ab9 000d 5abb 000d 7061 0070     .Z...Z...Z..app.

000d8ff4 <_ZTVN5spark12NetworkClassE>:
	...
   d8ffc:	5bad 000d 5bb7 000d 5bc1 000d 5bcb 000d     .[...[...[...[..
   d900c:	5bd5 000d 5be1 000d 5bed 000d 5bf5 000d     .[...[...[...[..
   d901c:	5bfd 000d 5c09 000d 5c11 000d 5c1b 000d     .[...\...\...\..
   d902c:	5c25 000d 5925 252d 2d6d 6425 2554 3a48     %\..%Y-%m-%dT%H:
   d903c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d904c <_ZTV11USARTSerial>:
	...
   d9054:	5fbb 000d 6029 000d 6001 000d 5d0d 000d     ._..)`...`...]..
   d9064:	5fd1 000d 5fed 000d 5fdf 000d 5ffb 000d     ._..._..._..._..
   d9074:	5fbd 000d 5fc3 000d                         ._..._..

000d907c <_ZTV9USBSerial>:
	...
   d9084:	60b7 000d 611f 000d 60f5 000d 5d0d 000d     .`...a...`...]..
   d9094:	60e7 000d 60b9 000d 60c9 000d 6119 000d     .`...`...`...a..
   d90a4:	60d9 000d 60b1 000d                         .`...`..

000d90ac <_ZTVN5spark9WiFiClassE>:
	...
   d90b4:	6217 000d 620d 000d 6203 000d 61b9 000d     .b...b...b...a..
   d90c4:	61f7 000d 61eb 000d 5bed 000d 5bf5 000d     .a...a...[...[..
   d90d4:	61df 000d 61d7 000d 61cd 000d 61c3 000d     .a...a...a...a..
   d90e4:	5c25 000d                                   %\..

000d90e8 <_ZSt7nothrow>:
   d90e8:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000d90f8 <fpi.7566>:
   d90f8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9108:	0000 0000                                   ....

000d910c <fpinan.7602>:
   d910c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d911c:	0000 0000                                   ....

000d9120 <tinytens>:
   d9120:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d9130:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d9140:	6f43 64ac 0628 1168                         Co.d(.h.

000d9148 <_ctype_>:
   d9148:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9158:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9168:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9178:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9188:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9198:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d91a8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d91b8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d91c8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   d9248:	2e00 0000                                   ....

000d924c <_C_numeric_locale>:
   d924c:	9249 000d 8ea7 000d e2b8 2003 0043 4f50     I.......... C.PO
   d925c:	4953 0058                                   SIX.

000d9260 <__mprec_bigtens>:
   d9260:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9270:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9280:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9288 <__mprec_tens>:
   d9288:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9298:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d92a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d92b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d92c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d92d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d92e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d92f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9308:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9318:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9328:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9338:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9348:	9db4 79d9 7843 44ea                         ...yCx.D

000d9350 <p05.7490>:
   d9350:	0005 0000 0019 0000 007d 0000               ........}...

000d935c <link_const_variable_data_end>:
   d935c:	000d467d 	.word	0x000d467d
   d9360:	000d4ac1 	.word	0x000d4ac1
   d9364:	000d4f65 	.word	0x000d4f65
   d9368:	000d5439 	.word	0x000d5439
   d936c:	000d5a29 	.word	0x000d5a29
   d9370:	000d5b9d 	.word	0x000d5b9d
   d9374:	000d5cf9 	.word	0x000d5cf9
   d9378:	000d5e2d 	.word	0x000d5e2d
   d937c:	000d5f55 	.word	0x000d5f55
   d9380:	000d5f79 	.word	0x000d5f79
   d9384:	000d6221 	.word	0x000d6221

000d9388 <link_constructors_end>:
	...
